"SELECT DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0) AS [DET_BE],   [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   [fraud_detect].[PRICE] AS [PRICE],   [fraud_detect].[QTY] AS [QTY] FROM [dbo].[fraud_detect] [fraud_detect]",3344,189,3155,6463,0,3344
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(day,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [dy:DET_BE:ok],   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [mn:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(day,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0))",1339,601,738,6452,0,4018
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(day,[fraud_detect].[DET_BE]) AS [dy:DET_BE:ok],   DATEPART(month,[fraud_detect].[DET_BE]) AS [mn:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(day,[fraud_detect].[DET_BE]),   DATEPART(month,[fraud_detect].[DET_BE]),   DATEPART(year,[fraud_detect].[DET_BE])",1096,548,548,6452,0,1096
SELECT * from T_bag,537,24,513,586,0,537
SELECT x.* FROM DIGI.dbo.fraud_detect x,452,41,411,1787,0,1356
select * from T_bag,388,77,311,1907,0,2718
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",346,346,0,0,0,346
" DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",327,327,0,0,0,327
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",293,293,0,0,0,293
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [mn:DET_BE:ok],   DATEPART(quarter,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [qr:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(quarter,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0))",274,251,23,6452,0,274
" DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",273,273,0,0,0,273
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",229,132,97,155,0,12390
SELECT x.* FROM DIGI.dbo.T_bag x ORDER BY x.BS_SCAN_DATE,192,157,35,4823,1,2304
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]) AS [mn:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]),   DATEPART(year,[fraud_detect].[DET_BE])",180,190,-10,6452,0,180
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]) AS [mn:DET_BE:ok],   DATEPART(quarter,[fraud_detect].[DET_BE]) AS [qr:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]),   DATEPART(quarter,[fraud_detect].[DET_BE]),   DATEPART(year,[fraud_detect].[DET_BE])",178,208,-30,6452,0,357
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info; ",158,11,147,7319,231,475
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.ITM_NAME,x.DET_BE",153,1110,-957,6855,0,615
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.ITM_NAME,x.DET_BE DESC",153,1095,-942,6452,0,307
"SELECT TOP (1000) [PersonID]       ,[LastName]       ,[FirstName]       ,[Address]       ,[City]   FROM [DIGI].[dbo].[Persons] ",151,0,151,9,0,151
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]) AS [mn:DET_BE:ok],   DATEPART(quarter,[fraud_detect].[DET_BE]) AS [qr:DET_BE:ok],   SUM(([fraud_detect].[QTY] * [fraud_detect].[PRICE])) AS [sum:Calculation_1065664265670361088:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(month,[fraud_detect].[DET_BE]),   DATEPART(quarter,[fraud_detect].[DET_BE]),   DATEPART(year,[fraud_detect].[DET_BE])",138,206,-68,6452,0,138
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0   ",133,10,123,4750,131,133
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [mn:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(month,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0))",128,210,-82,6452,0,385
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups        SELECT arcn.replica_server_name AS [ReplicaName], cm.member_name AS [NodeName], cm.member_type AS [MemberType], cm.member_state AS [MemberState], ISNULL(cm.number_of_quorum_votes, -1) AS [NumberOfQuorumVotes], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/ReplicaClusterNode[@ReplicaName=' + quotename(arcn.replica_server_name,'''') + ' and @NodeName=' + quotename(cm.member_name,'''') + ']' AS [Urn] FROM #tmpag_availability_groups AS AG INNER JOIN master.sys.dm_hadr_availability_replica_cluster_nodes AS arcn ON arcn.group_name=AG.name LEFT OUTER JOIN master.sys.dm_hadr_cluster_members AS cm ON UPPER(arcn.node_name) = UPPER(cm.member_name) WHERE (AG.name=@_msparam_0)        drop table #tmpag_availability_groups       ",127,96,31,5,0,127
SELECT x.* FROM DIGI.dbo.T_bag x ORDER BY x.BS_COUNT DESC,125,38,87,297,0,251
"(@P0 decimal(38,0),@P1 datetime2,@P2 nvarchar(4000),@P3 nvarchar(4000),@P4 decimal(38,0),@P5 decimal(38,0))UPDATE DIGI.dbo.fraud_detect 	SET PRICE=@P0 	WHERE DET_BE=@P1 AND ITM_NAME=@P2 AND FR_PC=@P3 AND PRICE=@P4 AND QTY=@P5",113,113,0,3717,0,454
"(@P0 decimal(38,0),@P1 datetime2,@P2 nvarchar(4000),@P3 nvarchar(4000),@P4 decimal(38,0),@P5 decimal(38,0))UPDATE DIGI.dbo.fraud_detect 	SET QTY=@P0 	WHERE DET_BE=@P1 AND ITM_NAME=@P2 AND FR_PC=@P3 AND PRICE=@P4 AND QTY=@P5",110,110,0,3699,0,221
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(year,[fraud_detect].[DET_BE])",108,148,-40,6452,0,326
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC",107,47,60,81179,0,215
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(quarter,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [qr:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(quarter,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)),   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0))",107,193,-86,6452,0,107
"()                 begin try                 declare @enable int;                 select top 1 @enable = convert(int,value_in_use) from sys.configurations where name = 'default trace enabled'                 if @enable = 1 --default trace is enabled                 begin                 declare @curr_tracefilename varchar(500);                 declare @base_tracefilename varchar(500);                 declare @indx int ;                 declare @temp_trace table (                 StartTime datetime                 ,       EventSubClass int                 ,       IntegerData int                 );                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename)                 select @indx  = PATINDEX('%'+@path_separator+'%', @curr_tracefilename)                 set @curr_tracefilename = reverse(@curr_tracefilename)                 set @base_tracefilename = LEFT( @curr_tracefilename, len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace                 select StartTime                 ,       EventSubClass                 ,       IntegerData                 from ::fn_trace_gettable( @base_tracefilename, default )                 where EventClass = 81;                  update @temp_trace set IntegerData = -IntegerData where EventSubClass = 2;                  select   1 as row_no                 ,       StartTime                 ,       EventSubClass                 ,       IntegerData                 ,       case when IntegerData < 0                 then -IntegerData                 else IntegerData                 end ""Absolute""                 from @temp_trace                 where (datediff(dd,StartTime,getdate()) < 7) order by StartTime ;                 end                 else                 begin                 select top 0 1 as row_no, 1 as StartTime , 1 as EventSubClass, 1 as IntegerData, 1 as Absolute                 end                 end try                 begin catch                 select  -100 as row_no                 ,       ERROR_NUMBER()  as StartTime                 ,       ERROR_SEVERITY() as EventSubClass                 ,       ERROR_STATE()  as   IntegerData                 ,       ERROR_MESSAGE() as Absolute                 end catch               ",100,98,2,0,0,200
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME]",87,76,11,6452,0,87
SELECT x.* FROM DIGI.dbo.T_bag x ORDER BY x.BS_SCAN_DATE DESC,80,71,9,2154,0,161
"SELECT TOP 10000 DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0) AS [DET_BE],   [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   [fraud_detect].[PRICE] AS [PRICE],   [fraud_detect].[QTY] AS [QTY] FROM [dbo].[fraud_detect] [fraud_detect]",78,5,73,170,0,78
SELECT x.* FROM DIGI.dbo.T_bag x,77,14,63,391,0,309
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC",76,64,12,89471,0,230
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(year,[fraud_detect].[DET_BE])",67,128,-61,6452,0,67
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0)) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(year,DATEADD(day,DATEDIFF(day,0,([fraud_detect].[DET_BE])),0))",66,164,-98,6452,0,66
" 	SELECT 	CASE 		WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END AS LoadedModules, 	COUNT(1) AS ModuleCount         FROM sys.dm_os_loaded_modules WITH (NOLOCK)         WHERE name like  '%msdtcprx.dll%' 	OR name like  '%sqljdbc_xa.dll%'         GROUP BY 	CASE WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END;     ",61,61,0,0,0,3745
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups               select replica_id, group_id into #tmpardb_availability_replicas from master.sys.availability_replicas              select replica_id, group_database_id, database_name,is_database_joined,is_failover_ready,is_pending_secondary_suspend,recovery_lsn,truncation_lsn into #tmpardb_database_replica_cluster_states from master.sys.dm_hadr_database_replica_cluster_states              select replica_id, is_local into #tmpardb_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select replica_id, group_database_id,synchronization_state, is_suspended into #tmpardb_database_replica_states from master.sys.dm_hadr_database_replica_states        SELECT dbcs.database_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityDatabase[@Name=' + quotename(dbcs.database_name,'''') + ']' AS [Urn], ISNULL(dbrs.synchronization_state, 0) AS [SynchronizationState], ISNULL(dbrs.is_suspended, 0) AS [IsSuspended], ISNULL(dbcs.is_database_joined, 0) AS [IsJoined] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpardb_availability_replicas AS AR ON AR.group_id=AG.group_id INNER JOIN #tmpardb_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id AND arstates.is_local = 1 INNER JOIN #tmpardb_database_replica_cluster_states AS dbcs ON arstates.replica_id = dbcs.replica_id LEFT OUTER JOIN #tmpardb_database_replica_states AS dbrs ON dbcs.replica_id = dbrs.replica_id AND dbcs.group_database_id = dbrs.group_database_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpardb_availability_replicas              DROP TABLE #tmpardb_database_replica_cluster_states              DROP TABLE #tmpardb_availability_replica_states              DROP TABLE #tmpardb_database_replica_states              drop table #tmpag_availability_groups       ",61,45,16,270,2,61
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              CREATE TABLE #ror_list_delimited (       replica_id uniqueidentifier,       read_only_routing_list nvarchar(max)       )       select replica_id,read_only_replica_id,routing_priority into #tmp_availability_read_only_routing_lists from sys.availability_read_only_routing_lists        INSERT INTO #ror_list_delimited       SELECT DISTINCT ars.replica_id, a.delimited       FROM #tmpar_availability_replicas AS ars       CROSS APPLY       (         SELECT STUFF(final_list.read_only_routing_list,1,1,'') FROM (         SELECT CASE          WHEN CHARINDEX(',', STUFF(priority_grouped_list.priority_group, 1, 1, '')) = 0 THEN priority_grouped_list.priority_group         ELSE ',(' + STUFF(priority_grouped_list.priority_group, 1, 1, '') + ')'            END          FROM (         SELECT (SELECT  ',N'''+ ars2.replica_server_name +''''         FROM #tmp_availability_read_only_routing_lists AS rrlists         INNER JOIN #tmpar_availability_replicas AS ars2         ON ars2.replica_id = rrlists.read_only_replica_id         WHERE rrlists.routing_priority = prioritylist.routing_priority         AND rrlists.replica_id = ars.replica_id         FOR XML PATH('') ) AS priority_group         FROM         (SELECT  distinct(routing_priority)         FROM #tmp_availability_read_only_routing_lists where replica_id = ars.replica_id) AS prioritylist(routing_priority)) priority_grouped_list         FOR XML PATH('') ) AS final_list(read_only_routing_list) ) AS a(delimited)              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], AR.replica_id AS [UniqueId], ISNULL(arstates.role, 3) AS [Role], ISNULL(arstates.operational_state, 6) AS [OperationalState], ISNULL(arstates.recovery_health, 2) AS [RollupRecoveryState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arstates.connected_state, 2) AS [ConnectionState], ISNULL(AR.create_date, 0) AS [CreateDate], ISNULL(AR.modify_date, 0) AS [DateLastModified], ISNULL(AR.endpoint_url, N'') AS [EndpointUrl], ISNULL(AR.read_only_routing_url, '') AS [ReadonlyRoutingConnectionUrl], ISNULL(rorlists.read_only_routing_list, '') AS [ReadonlyRoutingListDelimited], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(AR.availability_mode, 2) AS [AvailabilityMode], ISNULL(AR.failover_mode, 3) AS [FailoverMode], ISNULL(AR.session_timeout, -1) AS [SessionTimeout], ISNULL(arstates.last_connect_error_number,-1) AS [LastConnectErrorNumber], ISNULL(arstates.last_connect_error_description, N'') AS [LastConnectErrorDescription], ISNULL(AR.backup_priority, -1) AS [BackupPriority], ISNULL(arstates.last_connect_error_timestamp, 0) AS [LastConnectErrorTimestamp], suser_sname(AR.owner_sid) AS [Owner], ISNULL(arcs.join_state, 99) AS [JoinState], ISNULL(AR.seeding_mode, 1) AS [SeedingMode] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #ror_list_delimited AS rorlists ON AR.replica_id = rorlists.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AR.replica_server_name=@_msparam_0)and((AG.name=@_msparam_1))        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #ror_list_delimited       DROP TABLE #tmp_availability_read_only_routing_lists              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",56,42,14,95,1,169
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC",52,43,9,81195,0,312
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(year,[fraud_detect].[DET_BE])",51,117,-66,6452,0,51
"SELECT [fraud_detect].[FR_PC] AS [FR_PC],   [fraud_detect].[ITM_NAME] AS [ITM_NAME],   DATEPART(quarter,[fraud_detect].[DET_BE]) AS [qr:DET_BE:ok],   SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   SUM(CAST([fraud_detect].[QTY] as BIGINT)) AS [sum:QTY:ok],   DATEPART(year,[fraud_detect].[DET_BE]) AS [yr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY [fraud_detect].[FR_PC],   [fraud_detect].[ITM_NAME],   DATEPART(quarter,[fraud_detect].[DET_BE]),   DATEPART(year,[fraud_detect].[DET_BE])",44,168,-124,6452,0,44
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",43,27,16,1743,0,2343
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityReplica[@Name=' + quotename(AR.replica_server_name,'''') + ']' AS [Urn], ISNULL(arstates.role, 3) AS [Role], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arcs.join_state, 99) AS [JoinState] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",43,34,9,97,1,86
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",41,23,18,747,0,2229
"(@_msparam_0 nvarchar(4000))SELECT SCHEMA_NAME(udf.schema_id) AS [Schema], udf.name AS [Name], udf.object_id AS [ID], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], usrt.name AS [DataType] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT')) ORDER BY [Schema] ASC,[Name] ASC",36,34,2,6506,79,109
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",36,21,15,145,0,1973
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",36,23,13,3424,0,1965
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",36,20,16,539,0,1962
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",35,19,16,409,0,1919
"SELECT DISTINCT s.*,ep.value as description FROM master.sys.schemas s LEFT OUTER JOIN master.sys.extended_properties ep ON ep.class=3 AND ep.major_id=s.schema_id AND ep.minor_id=0 AND ep.name='MS_Description' INNER JOIN master.sys.all_objects o ON s.schema_id=o.schema_id",34,26,8,40,0,69
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 41 AND c.user_type_id = 41 -- only time columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumTimeIndices], db_id() AS database_id       FROM CTE     ",34,19,15,483,0,1869
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.QTY,x.PRICE DESC",33,211,-178,3713,0,827
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.QTY,x.PRICE",31,199,-168,3713,0,621
"       select 1 as name, -- Temp DB       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id = 2 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.name, mf.type, mf.type_desc        UNION ALL        select 2 as name, -- User DBs       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id > 4 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.type, mf.type_desc        UNION ALL        select 3 as name, -- System DBs       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf WITH(nolock)       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and (fs.database_id = 1 OR fs.database_id = 3 OR fs.database_id = 4) and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.type, mf.type_desc      ",29,29,0,103,0,209
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT udf.name AS [Name], udf.object_id AS [ID], udf.create_date AS [CreateDate], udf.modify_date AS [DateLastModified], ISNULL(sudf.name, N'') AS [Owner], CAST(case when udf.principal_id is null then 1 else 0 end AS bit) AS [IsSchemaOwned], SCHEMA_NAME(udf.schema_id) AS [Schema], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], usrt.name AS [DataType], s1ret_param.name AS [DataTypeSchema], ISNULL(baset.name, N'') AS [SystemType], CAST(CASE WHEN baset.name IN (N'nchar', N'nvarchar') AND ret_param.max_length <> -1 THEN ret_param.max_length/2 ELSE ret_param.max_length END AS int) AS [Length], CAST(ret_param.precision AS int) AS [NumericPrecision], CAST(ret_param.scale AS int) AS [NumericScale], ISNULL(xscret_param.name, N'') AS [XmlSchemaNamespace], ISNULL(s2ret_param.name, N'') AS [XmlSchemaNamespaceSchema], ISNULL( (case ret_param.is_xml_document when 1 then 2 else 1 end), 0) AS [XmlDocumentConstraint], CASE WHEN usrt.is_table_type = 1 THEN N'structured' ELSE N'' END AS [UserType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsAnsiNullsOn'),0) AS bit) AS [AnsiNullsStatus], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], case when amudf.object_id is null then N'' else asmbludf.name end AS [AssemblyName], case when amudf.object_id is null then N'' else amudf.assembly_class end AS [ClassName], case when amudf.object_id is null then N'' else amudf.assembly_method end AS [MethodName], CAST(case when amudf.object_id is null then CAST(smudf.null_on_null_input AS bit) else amudf.null_on_null_input end AS bit) AS [ReturnsNullOnNullInput], case when amudf.object_id is null then case isnull(smudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end else case isnull(amudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end end AS [ExecutionContext], case when amudf.object_id is null then ISNULL(user_name(smudf.execute_as_principal_id),N'') else ISNULL(user_name(amudf.execute_as_principal_id), N'') end AS [ExecutionContextPrincipal], CAST(OBJECTPROPERTYEX(udf.object_id, N'IsDeterministic') AS bit) AS [IsDeterministic], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsQuotedIdentOn'),0) AS bit) AS [QuotedIdentifierStatus], ret_param.name AS [TableVariableName], ISNULL(sm.uses_native_compilation,0) AS [IsNativelyCompiled], CAST(ISNULL(sm.inline_type,0) AS bit) AS [InlineType], CAST(ISNULL(sm.is_inlineable,0) AS bit) AS [IsInlineable], ISNULL(smudf.definition, ssmudf.definition) AS [Definition] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.database_principals AS sudf ON sudf.principal_id = ISNULL(udf.principal_id, (OBJECTPROPERTY(udf.object_id, 'OwnerId'))) LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id LEFT OUTER JOIN sys.schemas AS s1ret_param ON s1ret_param.schema_id = usrt.schema_id LEFT OUTER JOIN sys.types AS baset ON (baset.user_type_id = ret_param.system_type_id and baset.user_type_id = baset.system_type_id) or ((baset.system_type_id = ret_param.system_type_id) and (baset.user_type_id = ret_param.user_type_id) and (baset.is_user_defined = 0) and (baset.is_assembly_type = 1))  LEFT OUTER JOIN sys.xml_schema_collections AS xscret_param ON xscret_param.xml_collection_id = ret_param.xml_collection_id LEFT OUTER JOIN sys.schemas AS s2ret_param ON s2ret_param.schema_id = xscret_param.schema_id LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.assembly_modules AS amudf ON amudf.object_id = udf.object_id LEFT OUTER JOIN sys.assemblies AS asmbludf ON asmbludf.assembly_id = amudf.assembly_id LEFT OUTER JOIN sys.all_sql_modules AS sm ON sm.object_id = udf.object_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT'))and(udf.name=@_msparam_1 and SCHEMA_NAME(udf.schema_id)=@_msparam_2)",29,29,0,112,0,29
SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.ITM_NAME,26,162,-136,4719,0,26
SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.QTY DESC,26,163,-137,3713,0,293
"()           declare @ms_now bigint            select @ms_now = ms_ticks from sys.dm_os_sys_info;            select top 15 record_id,           dateadd(ms, -1 * (@ms_now - [timestamp]), GetDate()) as EventTime,           SQLProcessUtilization,           SystemIdle,           100 - SystemIdle - SQLProcessUtilization as OtherProcessUtilization           from (           select           record.value('(./Record/@id)[1]', 'int') as record_id,           record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int') as SystemIdle,           record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') as SQLProcessUtilization,           timestamp           from (           select timestamp, convert(xml, record) as record           from sys.dm_os_ring_buffers           where ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'           and record like '%SystemHealth%') as x 		) as y  	order by record_id desc",25,25,0,0,0,50
SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.QTY,24,157,-133,3713,0,148
SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.DET_BE DESC,24,136,-112,5138,1,49
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT udf.name AS [Name], udf.object_id AS [ID], udf.create_date AS [CreateDate], udf.modify_date AS [DateLastModified], ISNULL(sudf.name, N'') AS [Owner], CAST(case when udf.principal_id is null then 1 else 0 end AS bit) AS [IsSchemaOwned], SCHEMA_NAME(udf.schema_id) AS [Schema], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], usrt.name AS [DataType], s1ret_param.name AS [DataTypeSchema], ISNULL(baset.name, N'') AS [SystemType], CAST(CASE WHEN baset.name IN (N'nchar', N'nvarchar') AND ret_param.max_length <> -1 THEN ret_param.max_length/2 ELSE ret_param.max_length END AS int) AS [Length], CAST(ret_param.precision AS int) AS [NumericPrecision], CAST(ret_param.scale AS int) AS [NumericScale], ISNULL(xscret_param.name, N'') AS [XmlSchemaNamespace], ISNULL(s2ret_param.name, N'') AS [XmlSchemaNamespaceSchema], ISNULL( (case ret_param.is_xml_document when 1 then 2 else 1 end), 0) AS [XmlDocumentConstraint], CASE WHEN usrt.is_table_type = 1 THEN N'structured' ELSE N'' END AS [UserType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsAnsiNullsOn'),0) AS bit) AS [AnsiNullsStatus], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], case when amudf.object_id is null then N'' else asmbludf.name end AS [AssemblyName], case when amudf.object_id is null then N'' else amudf.assembly_class end AS [ClassName], case when amudf.object_id is null then N'' else amudf.assembly_method end AS [MethodName], CAST(case when amudf.object_id is null then CAST(smudf.null_on_null_input AS bit) else amudf.null_on_null_input end AS bit) AS [ReturnsNullOnNullInput], case when amudf.object_id is null then case isnull(smudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end else case isnull(amudf.execute_as_principal_id, -1) when -1 then 1 when -2 then 2 else 3 end end AS [ExecutionContext], case when amudf.object_id is null then ISNULL(user_name(smudf.execute_as_principal_id),N'') else ISNULL(user_name(amudf.execute_as_principal_id), N'') end AS [ExecutionContextPrincipal], CAST(OBJECTPROPERTYEX(udf.object_id, N'IsDeterministic') AS bit) AS [IsDeterministic], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id,N'ExecIsQuotedIdentOn'),0) AS bit) AS [QuotedIdentifierStatus], ret_param.name AS [TableVariableName], ISNULL(sm.uses_native_compilation,0) AS [IsNativelyCompiled], CAST(ISNULL(sm.inline_type,0) AS bit) AS [InlineType], CAST(ISNULL(sm.is_inlineable,0) AS bit) AS [IsInlineable], ISNULL(smudf.definition, ssmudf.definition) AS [Definition] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.database_principals AS sudf ON sudf.principal_id = ISNULL(udf.principal_id, (OBJECTPROPERTY(udf.object_id, 'OwnerId'))) LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id LEFT OUTER JOIN sys.schemas AS s1ret_param ON s1ret_param.schema_id = usrt.schema_id LEFT OUTER JOIN sys.types AS baset ON (baset.user_type_id = ret_param.system_type_id and baset.user_type_id = baset.system_type_id) or ((baset.system_type_id = ret_param.system_type_id) and (baset.user_type_id = ret_param.user_type_id) and (baset.is_user_defined = 0) and (baset.is_assembly_type = 1))  LEFT OUTER JOIN sys.xml_schema_collections AS xscret_param ON xscret_param.xml_collection_id = ret_param.xml_collection_id LEFT OUTER JOIN sys.schemas AS s2ret_param ON s2ret_param.schema_id = xscret_param.schema_id LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.assembly_modules AS amudf ON amudf.object_id = udf.object_id LEFT OUTER JOIN sys.assemblies AS asmbludf ON asmbludf.assembly_id = amudf.assembly_id LEFT OUTER JOIN sys.all_sql_modules AS sm ON sm.object_id = udf.object_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT'))and(udf.name=@_msparam_1 and SCHEMA_NAME(udf.schema_id)=@_msparam_2)",23,23,0,116,0,23
"       SELECT COUNT_BIG(*) AS NumOfNodes FROM [sys].[dm_hadr_cluster_members] WHERE member_type = 0     ",23,21,2,0,0,1408
"(@_msparam_0 nvarchar(4000))SELECT SCHEMA_NAME(udf.schema_id) AS [Schema], udf.name AS [Name], udf.object_id AS [ID], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], usrt.name AS [DataType] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT')) ORDER BY [Schema] ASC,[Name] ASC",22,21,1,4184,40,45
"()                 begin try                 if (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1                 begin                 declare @curr_tracefilename varchar(500) ;                 declare @base_tracefilename varchar(500) ;                 declare @indx int ;                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename);                 select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename) ;                 set @curr_tracefilename = reverse(@curr_tracefilename) ;                 set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  select  (dense_rank() over (order by StartTime desc))%2 as l1                 ,       convert(int, EventClass) as EventClass                 ,       DatabaseName                 ,       Filename                 ,       (Duration/1000) as Duration                 ,       StartTime                 ,       EndTime                 ,       (IntegerData*8.0/1024) as ChangeInSize                 from ::fn_trace_gettable( @base_tracefilename, default )                 left outer join sys.databases as d on (d.name = DB_NAME())                 where EventClass >=  92      and EventClass <=  95        and ServerName = @@servername   and DatabaseName = db_name()  and (d.create_date < EndTime)                 order by StartTime desc ;                 end     else                 select -1 as l1, 0 as EventClass, 0 DatabaseName, 0 as Filename, 0 as Duration, 0 as StartTime, 0 as EndTime,0 as ChangeInSize                 end try                 begin catch                 select -100 as l1                 ,       ERROR_NUMBER() as EventClass                 ,       ERROR_SEVERITY() DatabaseName                 ,       ERROR_STATE() as Filename                 ,       ERROR_MESSAGE() as Duration                 ,       1 as StartTime, 1 as EndTime,1 as ChangeInSize                 end catch               ",22,21,1,502,0,22
SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.DET_BE,22,126,-104,4859,0,133
"(@1 varchar(8000),@2 nvarchar(4000),@3 nvarchar(4000),@4 tinyint,@5 smallint)SELECT [x].* FROM [DIGI].[dbo].[fraud_detect] [x] WHERE [DET_BE]=@1 AND [ITM_NAME]=@2 AND [FR_PC]=@3 AND [PRICE]=@4 AND [QTY]=@5",21,21,0,3699,0,42
"(@_msparam_0 nvarchar(4000))SELECT SCHEMA_NAME(udf.schema_id) AS [Schema], udf.name AS [Name], udf.object_id AS [ID], (case when 'FN' = udf.type then 1 when 'FS' = udf.type then 1 when 'IF' = udf.type then 3 when 'TF' = udf.type then 2 when 'FT' = udf.type then 2 else 0 end) AS [FunctionType], CASE WHEN udf.type IN ('FN','IF','TF') THEN 1 WHEN udf.type IN ('FS','FT') THEN 2 ELSE 1 END AS [ImplementationType], CAST(  case      when udf.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = udf.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CAST(CASE WHEN ISNULL(smudf.definition, ssmudf.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted], CAST(ISNULL(OBJECTPROPERTYEX(udf.object_id, N'IsSchemaBound'),0) AS bit) AS [IsSchemaBound], usrt.name AS [DataType] FROM sys.all_objects AS udf LEFT OUTER JOIN sys.sql_modules AS smudf ON smudf.object_id = udf.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmudf ON ssmudf.object_id = udf.object_id LEFT OUTER JOIN sys.all_parameters AS ret_param ON ret_param.object_id = udf.object_id and ret_param.is_output = @_msparam_0 LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = ret_param.user_type_id WHERE (udf.type in ('TF', 'FN', 'IF', 'FS', 'FT')) ORDER BY [Schema] ASC,[Name] ASC",21,21,0,4210,43,128
"(@1 varchar(8000),@2 nvarchar(4000),@3 nvarchar(4000),@4 smallint,@5 tinyint)SELECT [x].* FROM [DIGI].[dbo].[fraud_detect] [x] WHERE [DET_BE]=@1 AND [ITM_NAME]=@2 AND [FR_PC]=@3 AND [PRICE]=@4 AND [QTY]=@5",21,21,0,3717,0,85
SELECT count(*) from fraud_detect,20,20,0,3681,0,20
SELECT target_data 									FROM sys.dm_xe_session_targets xet WITH(nolock) 									JOIN sys.dm_xe_sessions xes WITH(nolock) 									ON xes.address = xet.event_session_address 									WHERE xes.name = 'telemetry_xevents' 									AND xet.target_name = 'ring_buffer',20,16,4,0,0,372599
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.DET_BE,x.ITM_NAME",20,122,-102,4719,0,20
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.DET_BE,x.ITM_NAME DESC",19,116,-97,4719,0,19
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              CREATE TABLE #ror_list_delimited (       replica_id uniqueidentifier,       read_only_routing_list nvarchar(max)       )       select replica_id,read_only_replica_id,routing_priority into #tmp_availability_read_only_routing_lists from sys.availability_read_only_routing_lists        INSERT INTO #ror_list_delimited       SELECT DISTINCT ars.replica_id, a.delimited       FROM #tmpar_availability_replicas AS ars       CROSS APPLY       (         SELECT STUFF(final_list.read_only_routing_list,1,1,'') FROM (         SELECT CASE          WHEN CHARINDEX(',', STUFF(priority_grouped_list.priority_group, 1, 1, '')) = 0 THEN priority_grouped_list.priority_group         ELSE ',(' + STUFF(priority_grouped_list.priority_group, 1, 1, '') + ')'            END          FROM (         SELECT (SELECT  ',N'''+ ars2.replica_server_name +''''         FROM #tmp_availability_read_only_routing_lists AS rrlists         INNER JOIN #tmpar_availability_replicas AS ars2         ON ars2.replica_id = rrlists.read_only_replica_id         WHERE rrlists.routing_priority = prioritylist.routing_priority         AND rrlists.replica_id = ars.replica_id         FOR XML PATH('') ) AS priority_group         FROM         (SELECT  distinct(routing_priority)         FROM #tmp_availability_read_only_routing_lists where replica_id = ars.replica_id) AS prioritylist(routing_priority)) priority_grouped_list         FOR XML PATH('') ) AS final_list(read_only_routing_list) ) AS a(delimited)              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], AR.replica_id AS [UniqueId], ISNULL(arstates.role, 3) AS [Role], ISNULL(arstates.operational_state, 6) AS [OperationalState], ISNULL(arstates.recovery_health, 2) AS [RollupRecoveryState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arstates.connected_state, 2) AS [ConnectionState], ISNULL(AR.create_date, 0) AS [CreateDate], ISNULL(AR.modify_date, 0) AS [DateLastModified], ISNULL(AR.endpoint_url, N'') AS [EndpointUrl], ISNULL(AR.read_only_routing_url, '') AS [ReadonlyRoutingConnectionUrl], ISNULL(rorlists.read_only_routing_list, '') AS [ReadonlyRoutingListDelimited], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(AR.availability_mode, 2) AS [AvailabilityMode], ISNULL(AR.failover_mode, 3) AS [FailoverMode], ISNULL(AR.session_timeout, -1) AS [SessionTimeout], ISNULL(arstates.last_connect_error_number,-1) AS [LastConnectErrorNumber], ISNULL(arstates.last_connect_error_description, N'') AS [LastConnectErrorDescription], ISNULL(AR.backup_priority, -1) AS [BackupPriority], ISNULL(arstates.last_connect_error_timestamp, 0) AS [LastConnectErrorTimestamp], suser_sname(AR.owner_sid) AS [Owner], ISNULL(arcs.join_state, 99) AS [JoinState], ISNULL(AR.seeding_mode, 1) AS [SeedingMode] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #ror_list_delimited AS rorlists ON AR.replica_id = rorlists.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AR.replica_server_name=@_msparam_0)and((AG.name=@_msparam_1))        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #ror_list_delimited       DROP TABLE #tmp_availability_read_only_routing_lists              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",19,15,4,224,0,57
"()                 begin try                 declare @table1 table(                 objecttype varchar (100) collate database_default                 ,       buffers bigint                 );                  insert @table1                 exec('dbcc memorystatus with tableresults')                  select 0 as row_no                 ,       objecttype                 ,       buffers as value                 ,       1 as state,      1 as msg                 from @table1                 where objecttype in ('Stolen','Free','Cached','Dirty','Kept','I/O','Latched','Other' )                 end try                 begin catch                 select -100 as row_no                 ,       ERROR_NUMBER() as objecttype                 ,       ERROR_SEVERITY() as value                 ,       ERROR_STATE() as state                 ,       ERROR_MESSAGE() as msg                 end catch               ",18,18,0,3722,11,37
"()begin try  use msdb;  declare @enable int; select @enable = convert(int, value_in_use) from sys.configurations where name = 'default trace enabled'  if @enable = 1   begin          declare @curr_tracefilename varchar(500);         declare @base_tracefilename varchar(500);         declare @status int;          declare @indx int;            declare @temp_trace table (                  Error int         ,       StartTime datetime         ,       HostName sysname collate database_default null         ,       ApplicationName sysname collate database_default  null         ,       LoginName sysname collate database_default null         ,       Severity int         ,       DatabaseName sysname collate database_default null         ,       TextData nvarchar(max) collate database_default          );          declare @path_separator CHAR(1) ;         set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;          select @status=status, @curr_tracefilename=path from sys.traces where is_default = 1 ;         set @curr_tracefilename = reverse(@curr_tracefilename)          select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename)           set @curr_tracefilename = reverse(@curr_tracefilename)          set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace          select Error         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       Severity         ,       DatabaseName         ,       TextData           from ::fn_trace_gettable( @base_tracefilename, default )          where substring(TextData, 20, 15) like '%Backup%' and TextData like '%Error%' and ServerName = @@servername ;                    select (row_number() over(order by StartTime desc))%2 as l1         ,       right( right( TextData, len(TextData) - patindex('%BACKUP%',TextData) ) , len(right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - patindex('%BACKUP%',right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - 10 ) as ErrorMessage         ,       Error         ,       Severity         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       DatabaseName           from @temp_trace            where DatabaseName = '""  & Parameters!DatabaseName.Value &  ""'           order by StartTime desc  end else  begin          select top 0 1 as ErrorMessage, 1 as Error, 1 as Severity, 1 as StartTime,1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName, 1 as l1  end  end try  begin catch  select ERROR_MESSAGE() as ErrorMessage ,       ERROR_NUMBER() as Error ,       ERROR_SEVERITY() as Severity ,       ERROR_STATE() as StartTime ,       1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName ,       -100 as l1  end catch",17,15,2,0,0,35
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityReplica[@Name=' + quotename(AR.replica_server_name,'''') + ']' AS [Urn], ISNULL(arstates.role, 3) AS [Role], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arcs.join_state, 99) AS [JoinState] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",17,15,2,229,2,35
"SELECT DISTINCT s.*,ep.value as description FROM DIGI.sys.schemas s LEFT OUTER JOIN DIGI.sys.extended_properties ep ON ep.class=3 AND ep.major_id=s.schema_id AND ep.minor_id=0 AND ep.name='MS_Description' INNER JOIN DIGI.sys.all_objects o ON s.schema_id=o.schema_id",17,14,3,40,0,470
"       select COUNT_BIG(*) AS [NumReplicaPerAG]       from sys.dm_hadr_availability_replica_states where group_id in       (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1) group by group_id     ",17,14,3,71,0,1059
"         DECLARE @msticks bigint, @mstickstime datetime, @LastHour datetime                 SELECT @mstickstime = GETDATE(), @msticks = ms_ticks from sys.dm_os_sys_info                 SELECT @LastHour = DATEADD(HOUR, -1, @mstickstime);                  WITH Quartiles AS (                 SELECT DISTINCT                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,                        CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],                        PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS MedianSQLCPU                            ,                        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS Q3SQLCPU                      ,                        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS Q1SQLCPU                   FROM (                     SELECT timestamp, CONVERT (xml, record) AS 'record'                     FROM sys.dm_os_ring_buffers                     WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'                       AND record LIKE '%<SystemHealth>%'                             ) AS t                      WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)                      AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)               ),               SimpleStats AS (                 SELECT                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,                        CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],                     MAX(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MaxSQLCPU],                        MIN(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MinSQLCPU],                        AVG(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [AvgSQLCPU]                   FROM (                     SELECT timestamp, CONVERT (xml, record) AS 'record'                     FROM sys.dm_os_ring_buffers                     WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'                       AND record LIKE '%<SystemHealth>%'                             ) AS t               WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)                      AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)               GROUP BY                      CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) ,                      CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)               )               SELECT                      ss.EventDate AS EventDate,                      ss.EventTime AS EventTime,                      ss.MaxSQLCPU,                      ss.MinSQLCPU,                      ss.AvgSQLCPU,                      q.MedianSQLCPU,                      q.Q1SQLCPU,                      q.Q3SQLCPU               FROM SimpleStats ss                      INNER JOIN Quartiles q                            ON q.EventDate = ss.EventDate                            AND q.EventTime = ss.EventTime      ",16,16,0,781,0,24659
"       select counter_name, cntr_value from sys.dm_os_performance_counters where object_name like '%JSON Doc Stats%'     ",16,16,0,0,0,1005
"       select counter_name, cntr_value from sys.dm_os_performance_counters where object_name like '%External Scripts%'     ",16,16,0,0,0,1004
"()begin try select top 10 rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ) as row_no ,       (rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ))%2 as l1 ,       creation_time ,       last_execution_time  ,       (total_worker_time+0.0)/1000 as total_worker_time ,       (total_worker_time+0.0)/(execution_count*1000) as [AvgCPUTime] ,       total_logical_reads as [LogicalReads] ,       total_logical_writes as [LogicalWrites] ,       execution_count ,       total_logical_reads+total_logical_writes as [AggIO] ,       (total_logical_reads+total_logical_writes)/(execution_count+0.0) as [AvgIO] ,       case when sql_handle IS NULL                 then ' '                 else ( substring(st.text,(qs.statement_start_offset+2)/2,       (case when qs.statement_end_offset = -1         then len(convert(nvarchar(MAX),st.text))*2      else qs.statement_end_offset    end - qs.statement_start_offset) /2  ) )         end as query_text  ,       db_name(st.dbid) as db_name ,       st.objectid as object_id from sys.dm_exec_query_stats  qs cross apply sys.dm_exec_sql_text(sql_handle) st where total_worker_time  > 0  order by [AvgCPUTime] desc end try begin catch select -100 as row_no ,       1 as l1, 1 as create_time,1 as last_execution_time,1 as total_worker_time,1 as AvgCPUTime,1 as LogicalReads,1 as LogicalWrites ,       ERROR_NUMBER() as execution_count ,       ERROR_SEVERITY() as AggIO ,       ERROR_STATE() as AvgIO ,       ERROR_MESSAGE() as query_text ,       0 as db_name ,       0 as object_name end catch",16,16,0,14678,408,32
"       SELECT database_id, database_guid,       CASE       WHEN db_name(database_id) LIKE '%WideWorldImportersDW%' THEN 'WideWorldImportersDW'       WHEN db_name(database_id) LIKE '%WideWorldImporters%' THEN 'WideWorldImporters'       WHEN db_name(database_id) LIKE '%AdventureWorks2016CTP3%' THEN 'AdventureWorks2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2016CTP3%' THEN 'AdventureWorksDW2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorks2014%' THEN 'AdventureWorks2014'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2014%' THEN 'AdventureWorksDW2014'       WHEN db_name(database_id) LIKE '%AdventureWorks2012%' THEN 'AdventureWorks2012'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2012%' THEN 'AdventureWorksDW2012'       WHEN db_name(database_id) LIKE '%AdventureWorks2008%' THEN 'AdventureWorks2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2008%' THEN 'AdventureWorksDW2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW%' THEN 'AdventureWorksDW'       WHEN db_name(database_id) LIKE '%AdventureWorks%' THEN 'AdventureWorks'       WHEN db_name(database_id) LIKE '%ReportServerTempDB%' THEN 'ReportServerTempDB'       WHEN db_name(database_id) LIKE '%ReportServer%' THEN 'ReportServer'       WHEN db_name(database_id) LIKE '%WSS_Content%' THEN 'WSS_Content'       WHEN db_name(database_id) LIKE '%MDW%' THEN 'MDW'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX_baseline%' THEN 'MicrosoftDynamicsAX_baseline'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX%' THEN 'MicrosoftDynamicsAX'       WHEN db_name(database_id) = 'master' THEN 'master'       WHEN db_name(database_id) = 'msdb' THEN 'msdb'       WHEN db_name(database_id) = 'tempdb' THEN 'tempdb'       WHEN db_name(database_id) = 'model' THEN 'model'       WHEN db_name(database_id) LIKE '%SharePoint_Config%' THEN 'SharePoint_Config'       WHEN db_name(database_id) LIKE '%SharePoint_AdminContent%' THEN 'SharePoint_AdminContent'       WHEN db_name(database_id) LIKE '%AppManagement%' THEN 'AppManagement'       WHEN db_name(database_id) LIKE '%Bdc_Service_DB%' THEN 'Bdc_Service_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_DB%' THEN 'Search_Service_Application_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_AnalyticsReportingStoreDB%' THEN 'Search_Service_Application_AnalyticsReportingStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_CrawlStoreDB%' THEN 'Search_Service_Application_CrawlStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_LinkStoreDB%' THEN 'Search_Service_Application_LinkStoreDB'       WHEN db_name(database_id) LIKE '%Secure_Store_Service_DB%' THEN 'Secure_Store_Service_DB'       WHEN db_name(database_id) LIKE '%SharePoint_Logging%' THEN 'SharePoint_Logging'       WHEN db_name(database_id) LIKE '%SettingsServiceDB%' THEN 'SettingsServiceDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_ProfileDB%' THEN 'User Profile Service Application_ProfileDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SyncDB%' THEN 'User Profile Service Application_SyncDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SocialDB%' THEN 'User Profile Service Application_SocialDB'       WHEN db_name(database_id) LIKE '%WordAutomationServices%' THEN 'WordAutomationServices'       WHEN db_name(database_id) LIKE '%Managed Metadata Service Application_Metadata%' THEN 'Managed Metadata Service Application_Metadata'       WHEN db_name(database_id) LIKE '%SharePoint Translation Services%' THEN 'SharePoint Translation Services'       WHEN db_name(database_id) LIKE '%ProjectWebApp%' THEN 'ProjectWebApp'       WHEN db_name(database_id) LIKE '%DefaultPowerPivotServiceApplicationDB%' THEN 'DefaultPowerPivotServiceApplicationDB'       WHEN db_name(database_id) LIKE '%PerformancePoint Service%' THEN 'PerformancePoint Service'       WHEN db_name(database_id) LIKE '%SessionStateService%' THEN 'SessionStateService'       WHEN db_name(database_id) = 'SSISDB' THEN 'SSISDB'       WHEN db_name(database_id) = 'DQS_MAIN' THEN 'DQS_MAIN'       ELSE 'Other'       END AS default_database_class       FROM sys.database_recovery_status WITH(nolock)     ",16,8,8,17,0,999
"SELECT SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   DATEADD(quarter, DATEDIFF(quarter, 0, [fraud_detect].[DET_BE]), 0) AS [tqr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY DATEADD(quarter, DATEDIFF(quarter, 0, [fraud_detect].[DET_BE]), 0)",16,108,-92,6452,0,16
"       SELECT replica_id, group_id, is_local, role, operational_state, recovery_health, synchronization_health, connected_state, last_connect_error_number, last_connect_error_timestamp FROM sys.dm_hadr_availability_replica_states WITH(nolock)     ",15,13,2,66,0,973
"SELECT x.* FROM DIGI.dbo.fraud_detect x ORDER BY x.DET_BE DESC,x.ITM_NAME",15,63,-48,1577,0,15
"()                 begin try                 select  object_name                 ,       counter_name                 ,       convert(varchar(10),cntr_value) as cntr_value                 from sys.dm_os_performance_counters                 where ( (object_name like '%Manager%') and (counter_name = 'Memory Grants Pending' or counter_name='Memory Grants Outstanding' ))                 end try                 begin catch                 select top 0 0 as object_name, 0 as counter_name, 0 as cntr_value                 end catch               ",15,15,0,0,0,30
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              CREATE TABLE #ror_list_delimited (       replica_id uniqueidentifier,       read_only_routing_list nvarchar(max)       )       select replica_id,read_only_replica_id,routing_priority into #tmp_availability_read_only_routing_lists from sys.availability_read_only_routing_lists        INSERT INTO #ror_list_delimited       SELECT DISTINCT ars.replica_id, a.delimited       FROM #tmpar_availability_replicas AS ars       CROSS APPLY       (         SELECT STUFF(final_list.read_only_routing_list,1,1,'') FROM (         SELECT CASE          WHEN CHARINDEX(',', STUFF(priority_grouped_list.priority_group, 1, 1, '')) = 0 THEN priority_grouped_list.priority_group         ELSE ',(' + STUFF(priority_grouped_list.priority_group, 1, 1, '') + ')'            END          FROM (         SELECT (SELECT  ',N'''+ ars2.replica_server_name +''''         FROM #tmp_availability_read_only_routing_lists AS rrlists         INNER JOIN #tmpar_availability_replicas AS ars2         ON ars2.replica_id = rrlists.read_only_replica_id         WHERE rrlists.routing_priority = prioritylist.routing_priority         AND rrlists.replica_id = ars.replica_id         FOR XML PATH('') ) AS priority_group         FROM         (SELECT  distinct(routing_priority)         FROM #tmp_availability_read_only_routing_lists where replica_id = ars.replica_id) AS prioritylist(routing_priority)) priority_grouped_list         FOR XML PATH('') ) AS final_list(read_only_routing_list) ) AS a(delimited)              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], AR.replica_id AS [UniqueId], ISNULL(arstates.role, 3) AS [Role], ISNULL(arstates.operational_state, 6) AS [OperationalState], ISNULL(arstates.recovery_health, 2) AS [RollupRecoveryState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arstates.connected_state, 2) AS [ConnectionState], ISNULL(AR.create_date, 0) AS [CreateDate], ISNULL(AR.modify_date, 0) AS [DateLastModified], ISNULL(AR.endpoint_url, N'') AS [EndpointUrl], ISNULL(AR.read_only_routing_url, '') AS [ReadonlyRoutingConnectionUrl], ISNULL(rorlists.read_only_routing_list, '') AS [ReadonlyRoutingListDelimited], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(AR.availability_mode, 2) AS [AvailabilityMode], ISNULL(AR.failover_mode, 3) AS [FailoverMode], ISNULL(AR.session_timeout, -1) AS [SessionTimeout], ISNULL(arstates.last_connect_error_number,-1) AS [LastConnectErrorNumber], ISNULL(arstates.last_connect_error_description, N'') AS [LastConnectErrorDescription], ISNULL(AR.backup_priority, -1) AS [BackupPriority], ISNULL(arstates.last_connect_error_timestamp, 0) AS [LastConnectErrorTimestamp], suser_sname(AR.owner_sid) AS [Owner], ISNULL(arcs.join_state, 99) AS [JoinState], ISNULL(AR.seeding_mode, 1) AS [SeedingMode] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #ror_list_delimited AS rorlists ON AR.replica_id = rorlists.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AR.replica_server_name=@_msparam_0)and((AG.name=@_msparam_1))        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #ror_list_delimited       DROP TABLE #tmp_availability_read_only_routing_lists              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",15,12,3,174,0,45
"       select       group_id,       replica_id,       availability_mode,       failover_mode,       primary_role_allow_connections,       secondary_role_allow_connections,       LEN(ISNULL(read_only_routing_url, '')) as read_only_routing_url_length,       seeding_mode,       session_timeout       from sys.availability_replicas WITH(nolock) where group_id in       (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)     ",14,12,2,98,0,103
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups              select agstates.group_id, agstates.primary_replica into #tmpag_availability_group_states from master.sys.dm_hadr_availability_group_states as agstates              select group_id, replica_id, replica_metadata_id into #tmpag_availability_replicas from master.sys.availability_replicas       select replica_id, is_local, role into #tmpag_availability_replica_states from master.sys.dm_hadr_availability_replica_states          SELECT AG.name AS [Name], AG.group_id AS [UniqueId], ISNULL(AG.automated_backup_preference, 4) AS [AutomatedBackupPreference], ISNULL(AG.failure_condition_level, 6) AS [FailureConditionLevel], ISNULL(AG.health_check_timeout, -1) AS [HealthCheckTimeout], ISNULL(agstates.primary_replica, '') AS [PrimaryReplicaServerName], ISNULL(arstates2.role, 3) AS [LocalReplicaRole], AR2.replica_metadata_id AS [ID], CAST(ISNULL(AG.basic_features, 0) AS bit) AS [BasicAvailabilityGroup], CAST(ISNULL(AG.db_failover, 0) AS bit) AS [DatabaseHealthTrigger], CAST(ISNULL(AG.dtc_support, 0) AS bit) AS [DtcSupportEnabled], CAST(ISNULL(AG.is_distributed, 0) AS bit) AS [IsDistributedAvailabilityGroup], ISNULL(AG.cluster_type, 0) AS [ClusterType], ISNULL(AG.required_synchronized_secondaries_to_commit, 0) AS [RequiredSynchronizedSecondariesToCommit], CAST(ISNULL(AG.is_contained, 0) AS bit) AS [IsContained] FROM #tmpag_availability_groups AS AG LEFT OUTER JOIN #tmpag_availability_group_states as agstates ON AG.group_id = agstates.group_id INNER JOIN #tmpag_availability_replicas AS AR2 ON AG.group_id = AR2.group_id INNER JOIN #tmpag_availability_replica_states AS arstates2 ON AR2.replica_id = arstates2.replica_id AND arstates2.is_local = 1 WHERE (AG.name=@_msparam_0)        drop table #tmpag_availability_groups              drop table #tmpag_availability_group_states              drop table #tmpag_availability_replicas       drop table #tmpag_availability_replica_states      ",14,12,2,103,1,14
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",14,14,0,0,0,14
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",14,14,0,0,0,14
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups               select replica_id, group_id into #tmpardb_availability_replicas from master.sys.availability_replicas              select replica_id, group_database_id, database_name,is_database_joined,is_failover_ready,is_pending_secondary_suspend,recovery_lsn,truncation_lsn into #tmpardb_database_replica_cluster_states from master.sys.dm_hadr_database_replica_cluster_states              select replica_id, is_local into #tmpardb_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select replica_id, group_database_id,synchronization_state, is_suspended into #tmpardb_database_replica_states from master.sys.dm_hadr_database_replica_states        SELECT dbcs.database_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityDatabase[@Name=' + quotename(dbcs.database_name,'''') + ']' AS [Urn], ISNULL(dbrs.synchronization_state, 0) AS [SynchronizationState], ISNULL(dbrs.is_suspended, 0) AS [IsSuspended], ISNULL(dbcs.is_database_joined, 0) AS [IsJoined] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpardb_availability_replicas AS AR ON AR.group_id=AG.group_id INNER JOIN #tmpardb_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id AND arstates.is_local = 1 INNER JOIN #tmpardb_database_replica_cluster_states AS dbcs ON arstates.replica_id = dbcs.replica_id LEFT OUTER JOIN #tmpardb_database_replica_states AS dbrs ON dbcs.replica_id = dbrs.replica_id AND dbcs.group_database_id = dbrs.group_database_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpardb_availability_replicas              DROP TABLE #tmpardb_database_replica_cluster_states              DROP TABLE #tmpardb_availability_replica_states              DROP TABLE #tmpardb_database_replica_states              drop table #tmpag_availability_groups       ",14,12,2,94,1,14
"       select * into #tmpag_availability_groups from master.sys.availability_groups              select agstates.group_id, agstates.primary_replica into #tmpag_availability_group_states from master.sys.dm_hadr_availability_group_states as agstates              select group_id, replica_id, replica_metadata_id into #tmpag_availability_replicas from master.sys.availability_replicas       select replica_id, is_local, role into #tmpag_availability_replica_states from master.sys.dm_hadr_availability_replica_states                select TMIL.group_id, count(*) as is_managed_instance_link into #tmp_managed_instance_link from sys.availability_replicas AS TMIL where TMIL.endpoint_url LIKE '%Server=%' and (select count(*) from sys.availability_replicas as A1 where A1.group_id = TMIL.group_id) = 2 group by TMIL.group_id having count(*) = 1        SELECT AG.name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' AS [Urn], ISNULL(agstates.primary_replica, '') AS [PrimaryReplicaServerName], ISNULL(arstates2.role, 3) AS [LocalReplicaRole], CAST(ISNULL(AG.is_distributed, 0) AS bit) AS [IsDistributedAvailabilityGroup], ISNULL(AG.cluster_type, 0) AS [ClusterType], CAST(ISNULL(MIL.is_managed_instance_link, 0) & ISNULL(AG.is_distributed, 0) AS bit) AS [IsManagedInstanceLink], CAST(ISNULL(AG.is_contained, 0) AS bit) AS [IsContained] FROM #tmpag_availability_groups AS AG LEFT OUTER JOIN #tmpag_availability_group_states as agstates ON AG.group_id = agstates.group_id INNER JOIN #tmpag_availability_replicas AS AR2 ON AG.group_id = AR2.group_id INNER JOIN #tmpag_availability_replica_states AS arstates2 ON AR2.replica_id = arstates2.replica_id AND arstates2.is_local = 1 LEFT OUTER JOIN #tmp_managed_instance_link AS MIL ON AG.group_id = MIL.group_id ORDER BY [Name] ASC        drop table #tmpag_availability_groups              drop table #tmpag_availability_group_states              drop table #tmpag_availability_replicas       drop table #tmpag_availability_replica_states              drop table #tmp_managed_instance_link      ",14,11,3,98,1,28
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityReplica[@Name=' + quotename(AR.replica_server_name,'''') + ']' AS [Urn], ISNULL(arstates.role, 3) AS [Role], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arcs.join_state, 99) AS [JoinState] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",14,12,2,170,1,28
"SELECT SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   DATEADD(month, DATEDIFF(month, 0, [fraud_detect].[DET_BE]), 0) AS [tmn:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY DATEADD(month, DATEDIFF(month, 0, [fraud_detect].[DET_BE]), 0)",14,90,-76,6452,0,14
"SELECT SUM([fraud_detect].[PRICE]) AS [sum:PRICE:ok],   DATEADD(year, DATEDIFF(year, 0, [fraud_detect].[DET_BE]), 0) AS [tyr:DET_BE:ok] FROM [dbo].[fraud_detect] [fraud_detect] GROUP BY DATEADD(year, DATEDIFF(year, 0, [fraud_detect].[DET_BE]), 0)",13,88,-75,6452,0,13
SELECT TOP 1 * FROM fraud_detect ORDER BY [DET_BE] DESC;,13,90,-77,3799,0,41
