"CREATE   PROCEDURE [dbo].[sp_syscollector_purge_collection_logs]     @reference_date datetime = NULL,     @delete_batch_size int = 500 AS BEGIN     SET NOCOUNT ON      -- Security check (role membership)     IF (NOT (ISNULL(IS_MEMBER(N'dc_proxy'), 0) = 1) AND NOT (ISNULL(IS_MEMBER(N'db_owner'), 0) = 1))     BEGIN         RAISERROR(14677, -1, -1, 'dc_proxy')         RETURN(1) -- Failure     END      IF (@reference_date IS NULL)     BEGIN         SET @reference_date = GETDATE()     END          -- An expired log record is any record of a collection set that is older than      -- the reference date minus the collection set's days_until_expiration     CREATE TABLE #purged_log_ids (log_id BIGINT, package_execution_id uniqueidentifier)          -- Identify logs to purge based on following criteria     -- a) limit max batch size      -- b) do not delete last log record that is a root log record for a collection set     INSERT INTO #purged_log_ids     SELECT TOP (@delete_batch_size) log_id, package_execution_id     FROM syscollector_execution_log_internal as l     INNER JOIN syscollector_collection_sets s ON l.collection_set_id = s.collection_set_id     WHERE s.days_until_expiration > 0     AND @reference_date >= DATEADD(DAY, s.days_until_expiration, l.finish_time)     AND log_id NOT IN (                         SELECT TOP 1 log_id  from syscollector_execution_log_internal                          WHERE parent_log_id IS NULL                          AND collection_set_id = l.collection_set_id                         ORDER BY start_time DESC                         )      DECLARE @purge_log_count int     SELECT @purge_log_count  = COUNT(log_id)      FROM  #purged_log_ids      -- Delete all ssis log records pertaining to expired logs     DELETE FROM dbo.sysssislog         FROM dbo.sysssislog AS s         INNER JOIN #purged_log_ids AS i ON i.package_execution_id = s.executionid              -- Then delete the actual logs     DELETE FROM syscollector_execution_log_internal         FROM syscollector_execution_log_internal AS l         INNER Join #purged_log_ids AS i ON i.log_id = l.log_id       DROP TABLE #purged_log_ids      -- making sure that delete # record does not exceed given delete batch size     DECLARE @orphaned_record_cleanup_count int     SET @orphaned_record_cleanup_count = @delete_batch_size - @purge_log_count      -- Go for another round to cleanup the orphans     -- Ideally, the log heirarchy guarantees that a finish time by a parent log will always     -- be higher than the finish time of any of its descendants.     -- The purge step however does not delete log records with a null finish time     -- A child log can have a null finish time while its parent is closed if there is an     -- error in execution that causes the log to stay open.     -- If such a child log exists, its parent will be purged leaving it as an orphan          -- get orphan records and all their descendants in a cursor and purge them     DECLARE orphaned_log_cursor INSENSITIVE CURSOR FOR             SELECT TOP (@orphaned_record_cleanup_count) log_id              FROM syscollector_execution_log_internal             WHERE parent_log_id NOT IN (                 SELECT log_id FROM syscollector_execution_log_internal             )             FOR READ ONLY                  DECLARE @log_id BIGINT      -- for every orphan, delete all its remaining tree     -- this is supposedly a very small fraction of the entire log     OPEN orphaned_log_cursor         FETCH orphaned_log_cursor INTO @log_id     WHILE @@FETCH_STATUS = 0     BEGIN         EXEC sp_syscollector_delete_execution_log_tree @log_id = @log_id, @from_collection_set = 0         FETCH orphaned_log_cursor INTO @log_id     END          CLOSE orphaned_log_cursor     DEALLOCATE orphaned_log_cursor END ",21066,21065,1,751858,92,505586
"Select DISTINCT [PROVINCE_NAME_TH]       ,[PROVINCE_NAME_EN]       ,[DISTRICT_NAME_TH]       ,[DISTRICT_NAME_EN]       ,[SUBDISTRICT_NAME_TH]       ,[SUBDISTRICT_NAME_EN]       ,[ZIPCODE] From [dbo].[DCE_ADDRESS_MASTER_VW]",3731,6161,-2430,5062,0,126476851
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000))SELECT clmns.column_id AS [ID], clmns.name AS [Name], ISNULL(dc.Name, N'') AS [DefaultConstraintName], clmns.is_nullable AS [Nullable], CAST(ISNULL(cik.index_column_id, 0) AS bit) AS [InPrimaryKey], clmns.is_identity AS [Identity], usrt.name AS [DataType], ISNULL(baset.name, N'') AS [SystemType], CAST(CASE WHEN baset.name IN (N'nchar', N'nvarchar') AND clmns.max_length <> -1 THEN clmns.max_length/2 ELSE clmns.max_length END AS int) AS [Length], CAST(clmns.precision AS int) AS [NumericPrecision], CAST(clmns.scale AS int) AS [NumericScale], ISNULL(xscclmns.name, N'') AS [XmlSchemaNamespace], ISNULL(s2clmns.name, N'') AS [XmlSchemaNamespaceSchema], ISNULL( (case clmns.is_xml_document when 1 then 2 else 1 end), 0) AS [XmlDocumentConstraint], s1clmns.name AS [DataTypeSchema], clmns.is_computed AS [Computed] FROM sys.tables AS tbl INNER JOIN sys.all_columns AS clmns ON clmns.object_id=tbl.object_id LEFT OUTER JOIN sys.default_constraints as dc ON clmns.default_object_id = dc.object_id LEFT OUTER JOIN sys.indexes AS ik ON ik.object_id = clmns.object_id and 1=ik.is_primary_key LEFT OUTER JOIN sys.index_columns AS cik ON cik.index_id = ik.index_id and cik.column_id = clmns.column_id and cik.object_id = clmns.object_id and 0 = cik.is_included_column LEFT OUTER JOIN sys.types AS usrt ON usrt.user_type_id = clmns.user_type_id LEFT OUTER JOIN sys.types AS baset ON (baset.user_type_id = clmns.system_type_id and baset.user_type_id = baset.system_type_id) or ((baset.system_type_id = clmns.system_type_id) and (baset.user_type_id = clmns.user_type_id) and (baset.is_user_defined = 0) and (baset.is_assembly_type = 1))  LEFT OUTER JOIN sys.xml_schema_collections AS xscclmns ON xscclmns.xml_collection_id = clmns.xml_collection_id LEFT OUTER JOIN sys.schemas AS s2clmns ON s2clmns.schema_id = xscclmns.schema_id LEFT OUTER JOIN sys.schemas AS s1clmns ON s1clmns.schema_id = usrt.schema_id WHERE (tbl.name=@_msparam_0 and SCHEMA_NAME(tbl.schema_id)=@_msparam_1) ORDER BY [ID] ASC",2972,1703,1269,917,0,2972
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",2941,1745,1196,593,0,267701
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",1844,1111,733,518,0,167821
"()                 begin try                 declare @enable int;                 select top 1 @enable = convert(int,value_in_use) from sys.configurations where name = 'default trace enabled'                 if @enable = 1 --default trace is enabled                 begin                 declare @curr_tracefilename varchar(500);                 declare @base_tracefilename varchar(500);                 declare @indx int ;                 declare @temp_trace table (                 StartTime datetime                 ,       EventSubClass int                 ,       IntegerData int                 );                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename)                 select @indx  = PATINDEX('%'+@path_separator+'%', @curr_tracefilename)                 set @curr_tracefilename = reverse(@curr_tracefilename)                 set @base_tracefilename = LEFT( @curr_tracefilename, len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace                 select StartTime                 ,       EventSubClass                 ,       IntegerData                 from ::fn_trace_gettable( @base_tracefilename, default )                 where EventClass = 81;                  update @temp_trace set IntegerData = -IntegerData where EventSubClass = 2;                  select   1 as row_no                 ,       StartTime                 ,       EventSubClass                 ,       IntegerData                 ,       case when IntegerData < 0                 then -IntegerData                 else IntegerData                 end ""Absolute""                 from @temp_trace                 where (datediff(dd,StartTime,getdate()) < 7) order by StartTime ;                 end                 else                 begin                 select top 0 1 as row_no, 1 as StartTime , 1 as EventSubClass, 1 as IntegerData, 1 as Absolute                 end                 end try                 begin catch                 select  -100 as row_no                 ,       ERROR_NUMBER()  as StartTime                 ,       ERROR_SEVERITY() as EventSubClass                 ,       ERROR_STATE()  as   IntegerData                 ,       ERROR_MESSAGE() as Absolute                 end catch               ",1216,1215,1,0,0,2432
Select [dbo].[DCE_ADDRESS_MASTER_UPSTREAM_VW].* From [dbo].[DCE_ADDRESS_MASTER_UPSTREAM_VW],638,33,605,103,0,154695726
"Select [dbo].[DCE_ADDRESS_MASTER_UPSTREAM_VW].* From [dbo].[DCE_ADDRESS_MASTER_UPSTREAM_VW]  ",611,29,582,92,0,5357403
"()begin try  use msdb;  declare @enable int; select @enable = convert(int, value_in_use) from sys.configurations where name = 'default trace enabled'  if @enable = 1   begin          declare @curr_tracefilename varchar(500);         declare @base_tracefilename varchar(500);         declare @status int;          declare @indx int;            declare @temp_trace table (                  Error int         ,       StartTime datetime         ,       HostName sysname collate database_default null         ,       ApplicationName sysname collate database_default  null         ,       LoginName sysname collate database_default null         ,       Severity int         ,       DatabaseName sysname collate database_default null         ,       TextData nvarchar(max) collate database_default          );          declare @path_separator CHAR(1) ;         set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;          select @status=status, @curr_tracefilename=path from sys.traces where is_default = 1 ;         set @curr_tracefilename = reverse(@curr_tracefilename)          select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename)           set @curr_tracefilename = reverse(@curr_tracefilename)          set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace          select Error         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       Severity         ,       DatabaseName         ,       TextData           from ::fn_trace_gettable( @base_tracefilename, default )          where substring(TextData, 20, 15) like '%Backup%' and TextData like '%Error%' and ServerName = @@servername ;                    select (row_number() over(order by StartTime desc))%2 as l1         ,       right( right( TextData, len(TextData) - patindex('%BACKUP%',TextData) ) , len(right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - patindex('%BACKUP%',right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - 10 ) as ErrorMessage         ,       Error         ,       Severity         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       DatabaseName           from @temp_trace            where DatabaseName = '""  & Parameters!DatabaseName.Value &  ""'           order by StartTime desc  end else  begin          select top 0 1 as ErrorMessage, 1 as Error, 1 as Severity, 1 as StartTime,1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName, 1 as l1  end  end try  begin catch  select ERROR_MESSAGE() as ErrorMessage ,       ERROR_NUMBER() as Error ,       ERROR_SEVERITY() as Severity ,       ERROR_STATE() as StartTime ,       1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName ,       -100 as l1  end catch",540,539,1,0,0,2163
"with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, ag.cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE source_database_id is NULL",443,403,40,530,0,886
"       SELECT db_id() AS database_id,       COUNT_BIG(*) AS [NumExternalStats]       FROM sys.tables t WITH(nolock) INNER JOIN sys.stats s WITH(nolock) ON t.object_id = s.object_id       WHERE t.is_external=1     ",307,182,125,11001,0,20884
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",304,304,0,0,0,912
" DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",293,293,0,0,0,881
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",290,171,119,304,0,26447
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",229,134,95,225,0,20906
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info; ",227,34,193,15991,651,454
"       SELECT db_id() AS database_id, COUNT_BIG(*) AS [TVPStoredProcsCount]       FROM sys.types t WITH(nolock)       JOIN sys.parameters p WITH(nolock) ON t.system_type_id = p.system_type_id AND t.user_type_id=p.user_type_id       JOIN sys.objects o WITH(nolock) ON o.object_id = p.object_id       WHERE is_table_type = 1     ",203,113,90,231,0,18559
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info;",197,197,0,9699,0,197
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info; ",178,178,0,8787,0,178
"SELECT ag_rep.group_id, ag_rep.replica_server_name, ag_rep_states.synchronization_health_desc, ag_rep_cluster_nodes.node_name FROM sys.availability_groups ag INNER JOIN sys.availability_replicas ag_rep ON ag.group_id = ag_rep.group_id INNER JOIN sys.dm_hadr_availability_replica_states ag_rep_states on ag.group_id = ag_rep_states.group_id and ag_rep_states.is_local = 1 INNER JOIN sys.dm_hadr_availability_replica_cluster_nodes ag_rep_cluster_nodes on ag.name = ag_rep_cluster_nodes.group_name and ag_rep.replica_server_name = ag_rep_cluster_nodes.replica_server_name",154,114,40,230,0,154
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",153,103,50,8514,0,14005
"(@DatabaseName NVarChar(max))begin try   use msdb;  Select distinct t1.name ,       (dense_rank() over (order by backup_start_date desc,t3.backup_set_id))%2 as l1 ,       (dense_rank() over (order by backup_start_date desc,t3.backup_set_id,t6.physical_device_name))%2 as l2 ,       t3.user_name ,       t3.backup_set_id ,       t3.name as backup_name ,       t3.description ,       (datediff( ss,  t3.backup_start_date, t3.backup_finish_date))/60.0 as duration ,       t3.backup_start_date ,       t3.backup_finish_date ,       t3.type as [type] ,       case when (t3.backup_size/1024.0) < 1024 then (t3.backup_size/1024.0)                  when (t3.backup_size/1048576.0) < 1024 then (t3.backup_size/1048576.0)          else (t3.backup_size/1048576.0/1024.0)          end as backup_size  ,       case when (t3.backup_size/1024.0) < 1024 then 'KB'                  when (t3.backup_size/1048576.0) < 1024 then 'MB'          else 'GB'          end as backup_size_unit  ,       t3.first_lsn ,       t3.last_lsn ,       case when t3.differential_base_lsn is null then 'Not Applicable'          else convert( varchar(100),t3.differential_base_lsn)          end as [differential_base_lsn] ,       t6.physical_device_name ,       t6.device_type as [device_type] ,       t3.recovery_model   from sys.databases t1  inner join backupset t3 on (t3.database_name = t1.name )   left outer join backupmediaset t5 on ( t3.media_set_id = t5.media_set_id )  left outer join backupmediafamily t6 on ( t6.media_set_id = t5.media_set_id )  where (t1.name = @DatabaseName)  order by backup_start_date desc,t3.backup_set_id,t6.physical_device_name;   end try  begin catch   select 1 as user_name, 1 as backup_set_id, 1 as backup_name, 1 as description, 1 as duration, 1 as backup_start_date, 1 as backup_finish_date,1 as type, 1 as backup_size, 1 as backup_size_unit ,       ERROR_SEVERITY() as first_lsn ,       ERROR_STATE() as last_lsn ,       1 as differential_base_lsn ,       ERROR_MESSAGE() as physical_device_name ,       1 as device_type, 1 as recovery_model ,       -100 as l1 ,       ERROR_NUMBER() as l2  end catch",149,127,22,1702,0,745
"()                 begin try                 if (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1                 begin                 declare @curr_tracefilename varchar(500) ;                 declare @base_tracefilename varchar(500) ;                 declare @indx int ;                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename);                 select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename) ;                 set @curr_tracefilename = reverse(@curr_tracefilename) ;                 set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  select  (dense_rank() over (order by StartTime desc))%2 as l1                 ,       convert(int, EventClass) as EventClass                 ,       DatabaseName                 ,       Filename                 ,       (Duration/1000) as Duration                 ,       StartTime                 ,       EndTime                 ,       (IntegerData*8.0/1024) as ChangeInSize                 from ::fn_trace_gettable( @base_tracefilename, default )                 left outer join sys.databases as d on (d.name = DB_NAME())                 where EventClass >=  92      and EventClass <=  95        and ServerName = @@servername   and DatabaseName = db_name()  and (d.create_date < EndTime)                 order by StartTime desc ;                 end     else                 select -1 as l1, 0 as EventClass, 0 DatabaseName, 0 as Filename, 0 as Duration, 0 as StartTime, 0 as EndTime,0 as ChangeInSize                 end try                 begin catch                 select -100 as l1                 ,       ERROR_NUMBER() as EventClass                 ,       ERROR_SEVERITY() DatabaseName                 ,       ERROR_STATE() as Filename                 ,       ERROR_MESSAGE() as Duration                 ,       1 as StartTime, 1 as EndTime,1 as ChangeInSize                 end catch               ",147,144,3,73,0,147
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0   ",145,25,120,13384,415,145
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",137,92,45,8062,0,12514
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0   ",136,136,0,6955,0,136
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",130,76,54,672,0,11832
"()begin try  use msdb;  declare @enable int; select @enable = convert(int, value_in_use) from sys.configurations where name = 'default trace enabled'  if @enable = 1   begin          declare @curr_tracefilename varchar(500);         declare @base_tracefilename varchar(500);         declare @status int;          declare @indx int;            declare @temp_trace table (                  Error int         ,       StartTime datetime         ,       HostName sysname collate database_default null         ,       ApplicationName sysname collate database_default  null         ,       LoginName sysname collate database_default null         ,       Severity int         ,       DatabaseName sysname collate database_default null         ,       TextData nvarchar(max) collate database_default          );          declare @path_separator CHAR(1) ;         set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;          select @status=status, @curr_tracefilename=path from sys.traces where is_default = 1 ;         set @curr_tracefilename = reverse(@curr_tracefilename)          select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename)           set @curr_tracefilename = reverse(@curr_tracefilename)          set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace          select Error         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       Severity         ,       DatabaseName         ,       TextData           from ::fn_trace_gettable( @base_tracefilename, default )          where substring(TextData, 20, 15) like '%Backup%' and TextData like '%Error%' and ServerName = @@servername ;                    select (row_number() over(order by StartTime desc))%2 as l1         ,       right( right( TextData, len(TextData) - patindex('%BACKUP%',TextData) ) , len(right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - patindex('%BACKUP%',right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - 10 ) as ErrorMessage         ,       Error         ,       Severity         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       DatabaseName           from @temp_trace            where DatabaseName = '""  & Parameters!DatabaseName.Value &  ""'           order by StartTime desc  end else  begin          select top 0 1 as ErrorMessage, 1 as Error, 1 as Severity, 1 as StartTime,1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName, 1 as l1  end  end try  begin catch  select ERROR_MESSAGE() as ErrorMessage ,       ERROR_NUMBER() as Error ,       ERROR_SEVERITY() as Severity ,       ERROR_STATE() as StartTime ,       1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName ,       -100 as l1  end catch",118,116,2,0,0,355
"()begin try  use msdb;  declare @enable int; select @enable = convert(int, value_in_use) from sys.configurations where name = 'default trace enabled'  if @enable = 1   begin          declare @curr_tracefilename varchar(500);         declare @base_tracefilename varchar(500);         declare @status int;          declare @indx int;            declare @temp_trace table (                  Error int         ,       StartTime datetime         ,       HostName sysname collate database_default null         ,       ApplicationName sysname collate database_default  null         ,       LoginName sysname collate database_default null         ,       Severity int         ,       DatabaseName sysname collate database_default null         ,       TextData nvarchar(max) collate database_default          );          declare @path_separator CHAR(1) ;         set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;          select @status=status, @curr_tracefilename=path from sys.traces where is_default = 1 ;         set @curr_tracefilename = reverse(@curr_tracefilename)          select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename)           set @curr_tracefilename = reverse(@curr_tracefilename)          set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace          select Error         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       Severity         ,       DatabaseName         ,       TextData           from ::fn_trace_gettable( @base_tracefilename, default )          where substring(TextData, 20, 15) like '%Backup%' and TextData like '%Error%' and ServerName = @@servername ;                    select (row_number() over(order by StartTime desc))%2 as l1         ,       right( right( TextData, len(TextData) - patindex('%BACKUP%',TextData) ) , len(right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - patindex('%BACKUP%',right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - 10 ) as ErrorMessage         ,       Error         ,       Severity         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       DatabaseName           from @temp_trace            where DatabaseName = '""  & Parameters!DatabaseName.Value &  ""'           order by StartTime desc  end else  begin          select top 0 1 as ErrorMessage, 1 as Error, 1 as Severity, 1 as StartTime,1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName, 1 as l1  end  end try  begin catch  select ERROR_MESSAGE() as ErrorMessage ,       ERROR_NUMBER() as Error ,       ERROR_SEVERITY() as Severity ,       ERROR_STATE() as StartTime ,       1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName ,       -100 as l1  end catch",116,115,1,0,0,350
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",116,68,48,572,0,10573
"()begin try  use msdb;  declare @enable int; select @enable = convert(int, value_in_use) from sys.configurations where name = 'default trace enabled'  if @enable = 1   begin          declare @curr_tracefilename varchar(500);         declare @base_tracefilename varchar(500);         declare @status int;          declare @indx int;            declare @temp_trace table (                  Error int         ,       StartTime datetime         ,       HostName sysname collate database_default null         ,       ApplicationName sysname collate database_default  null         ,       LoginName sysname collate database_default null         ,       Severity int         ,       DatabaseName sysname collate database_default null         ,       TextData nvarchar(max) collate database_default          );          declare @path_separator CHAR(1) ;         set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;          select @status=status, @curr_tracefilename=path from sys.traces where is_default = 1 ;         set @curr_tracefilename = reverse(@curr_tracefilename)          select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename)           set @curr_tracefilename = reverse(@curr_tracefilename)          set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace          select Error         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       Severity         ,       DatabaseName         ,       TextData           from ::fn_trace_gettable( @base_tracefilename, default )          where substring(TextData, 20, 15) like '%Backup%' and TextData like '%Error%' and ServerName = @@servername ;                    select (row_number() over(order by StartTime desc))%2 as l1         ,       right( right( TextData, len(TextData) - patindex('%BACKUP%',TextData) ) , len(right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - patindex('%BACKUP%',right( TextData, len(TextData) - patindex('%BACKUP%',TextData) )) - 10 ) as ErrorMessage         ,       Error         ,       Severity         ,       StartTime         ,       HostName         ,       ApplicationName         ,       LoginName         ,       DatabaseName           from @temp_trace            where DatabaseName = '""  & Parameters!DatabaseName.Value &  ""'           order by StartTime desc  end else  begin          select top 0 1 as ErrorMessage, 1 as Error, 1 as Severity, 1 as StartTime,1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName, 1 as l1  end  end try  begin catch  select ERROR_MESSAGE() as ErrorMessage ,       ERROR_NUMBER() as Error ,       ERROR_SEVERITY() as Severity ,       ERROR_STATE() as StartTime ,       1 as HostName, 1 as ApplicationName,1 as LoginName, 1 as DatabaseName ,       -100 as l1  end catch",114,113,1,0,0,343
"()                 begin try                 if (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1                 begin                 declare @curr_tracefilename varchar(500) ;                 declare @base_tracefilename varchar(500) ;                 declare @indx int ;                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename);                 select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename) ;                 set @curr_tracefilename = reverse(@curr_tracefilename) ;                 set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  select  (dense_rank() over (order by StartTime desc))%2 as l1                 ,       convert(int, EventClass) as EventClass                 ,       DatabaseName                 ,       Filename                 ,       (Duration/1000) as Duration                 ,       StartTime                 ,       EndTime                 ,       (IntegerData*8.0/1024) as ChangeInSize                 from ::fn_trace_gettable( @base_tracefilename, default )                 left outer join sys.databases as d on (d.name = DB_NAME())                 where EventClass >=  92      and EventClass <=  95        and ServerName = @@servername   and DatabaseName = db_name()  and (d.create_date < EndTime)                 order by StartTime desc ;                 end     else                 select -1 as l1, 0 as EventClass, 0 DatabaseName, 0 as Filename, 0 as Duration, 0 as StartTime, 0 as EndTime,0 as ChangeInSize                 end try                 begin catch                 select -100 as l1                 ,       ERROR_NUMBER() as EventClass                 ,       ERROR_SEVERITY() DatabaseName                 ,       ERROR_STATE() as Filename                 ,       ERROR_MESSAGE() as Duration                 ,       1 as StartTime, 1 as EndTime,1 as ChangeInSize                 end catch               ",110,108,2,493,0,110
"()                 begin try                 if (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1                 begin                 declare @curr_tracefilename varchar(500) ;                 declare @base_tracefilename varchar(500) ;                 declare @indx int ;                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename);                 select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename) ;                 set @curr_tracefilename = reverse(@curr_tracefilename) ;                 set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  select  (dense_rank() over (order by StartTime desc))%2 as l1                 ,       convert(int, EventClass) as EventClass                 ,       DatabaseName                 ,       Filename                 ,       (Duration/1000) as Duration                 ,       StartTime                 ,       EndTime                 ,       (IntegerData*8.0/1024) as ChangeInSize                 from ::fn_trace_gettable( @base_tracefilename, default )                 left outer join sys.databases as d on (d.name = DB_NAME())                 where EventClass >=  92      and EventClass <=  95        and ServerName = @@servername   and DatabaseName = db_name()  and (d.create_date < EndTime)                 order by StartTime desc ;                 end     else                 select -1 as l1, 0 as EventClass, 0 DatabaseName, 0 as Filename, 0 as Duration, 0 as StartTime, 0 as EndTime,0 as ChangeInSize                 end try                 begin catch                 select -100 as l1                 ,       ERROR_NUMBER() as EventClass                 ,       ERROR_SEVERITY() DatabaseName                 ,       ERROR_STATE() as Filename                 ,       ERROR_MESSAGE() as Duration                 ,       1 as StartTime, 1 as EndTime,1 as ChangeInSize                 end catch               ",108,107,1,40,0,108
"()                 begin try                 if (select convert(int,value_in_use) from sys.configurations where name = 'default trace enabled' ) = 1                 begin                 declare @curr_tracefilename varchar(500) ;                 declare @base_tracefilename varchar(500) ;                 declare @indx int ;                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename);                 select @indx  = patindex('%'+@path_separator+'%', @curr_tracefilename) ;                 set @curr_tracefilename = reverse(@curr_tracefilename) ;                 set @base_tracefilename = left( @curr_tracefilename,len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  select  (dense_rank() over (order by StartTime desc))%2 as l1                 ,       convert(int, EventClass) as EventClass                 ,       DatabaseName                 ,       Filename                 ,       (Duration/1000) as Duration                 ,       StartTime                 ,       EndTime                 ,       (IntegerData*8.0/1024) as ChangeInSize                 from ::fn_trace_gettable( @base_tracefilename, default )                 left outer join sys.databases as d on (d.name = DB_NAME())                 where EventClass >=  92      and EventClass <=  95        and ServerName = @@servername   and DatabaseName = db_name()  and (d.create_date < EndTime)                 order by StartTime desc ;                 end     else                 select -1 as l1, 0 as EventClass, 0 DatabaseName, 0 as Filename, 0 as Duration, 0 as StartTime, 0 as EndTime,0 as ChangeInSize                 end try                 begin catch                 select -100 as l1                 ,       ERROR_NUMBER() as EventClass                 ,       ERROR_SEVERITY() DatabaseName                 ,       ERROR_STATE() as Filename                 ,       ERROR_MESSAGE() as Duration                 ,       1 as StartTime, 1 as EndTime,1 as ChangeInSize                 end catch               ",106,105,1,4,0,106
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups        SELECT arcn.replica_server_name AS [ReplicaName], cm.member_name AS [NodeName], cm.member_type AS [MemberType], cm.member_state AS [MemberState], ISNULL(cm.number_of_quorum_votes, -1) AS [NumberOfQuorumVotes], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/ReplicaClusterNode[@ReplicaName=' + quotename(arcn.replica_server_name,'''') + ' and @NodeName=' + quotename(cm.member_name,'''') + ']' AS [Urn] FROM #tmpag_availability_groups AS AG INNER JOIN master.sys.dm_hadr_availability_replica_cluster_nodes AS arcn ON arcn.group_name=AG.name LEFT OUTER JOIN master.sys.dm_hadr_cluster_members AS cm ON UPPER(arcn.node_name) = UPPER(cm.member_name) WHERE (AG.name=@_msparam_0)        drop table #tmpag_availability_groups       ",105,82,23,5,0,105
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",104,63,41,179,0,9483
select 1 FROM sysobjects,96,51,45,71,0,550512
" create procedure sys.sp_columns (     @table_name         nvarchar(384),     @table_owner        nvarchar(384) = null,     @table_qualifier    sysname = null,     @column_name        nvarchar(384) = null,     @ODBCVer            int = 2 ) as     declare @full_table_name    nvarchar(769) -- 384 + 1 + 384     declare @table_id           int     declare @fUsePattern        bit      select @fUsePattern = 1      if (@ODBCVer is null) or (@ODBCVer <> 3)         select @ODBCVer = 2      if @table_qualifier is not null     begin         if db_name() <> @table_qualifier         begin   -- If qualifier doesn't match current database             raiserror (15250, -1,-1)             return         end     end      -- ""ALL"" is represented by NULL value.     if @table_name = '%'         select @table_name = null     if @table_owner = '%'         select @table_owner = null     if @table_qualifier = '%'         select @table_qualifier = null     if @column_name = '%'         select @column_name = null      -- Empty string means nothing, so use invalid identifier.     -- A quoted space will never match any object name.     if @table_owner = ''         select @table_owner = ' '      select @full_table_name = isnull(quotename(@table_owner), '') + '.' + isnull(quotename(@table_name), '')     select @table_id = object_id(@full_table_name)      if (@fUsePattern = 1) -- Does the user want it?     begin         if ((isnull(charindex('%', @full_table_name),0) = 0) and             (isnull(charindex('_', @full_table_name),0) = 0) and             (isnull(charindex('[', @table_name),0) = 0) and             (isnull(charindex('[', @table_owner),0) = 0) and             (isnull(charindex('%', @column_name),0) = 0) and             (isnull(charindex('_', @column_name),0) = 0) and             (@table_id <> 0))         begin             select @fUsePattern = 0 -- not a single wild char, so go the fast way.         end     end      if @fUsePattern = 0     begin         /* -- Debug output, do not remove it.         print '*************'         print 'No pattern matching.'         print @fUsePattern         print isnull(convert(sysname, @table_id), '@table_id = null')         print isnull(@full_table_name, '@full_table_name = null')         print isnull(@table_owner, '@table_owner = null')         print isnull(@table_name, '@table_name = null')         print isnull(@column_name, '@column_name = null')         print '*************'         */         select             TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,             TABLE_OWNER                 = s_cov.TABLE_OWNER,             TABLE_NAME                  = s_cov.TABLE_NAME,             COLUMN_NAME                 = s_cov.COLUMN_NAME,             DATA_TYPE                   = s_cov.DATA_TYPE_28,             TYPE_NAME                   = s_cov.TYPE_NAME_28,             ""PRECISION""                 = s_cov.PRECISION_28,             ""LENGTH""                    = s_cov.LENGTH_28,             SCALE                       = s_cov.SCALE_90,             RADIX                       = s_cov.RADIX,             NULLABLE                    = s_cov.NULLABLE,             REMARKS                     = s_cov.REMARKS,             COLUMN_DEF                  = s_cov.COLUMN_DEF,             SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,             SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,             CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,             ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,             IS_NULLABLE                 = s_cov.IS_NULLABLE,             SS_DATA_TYPE                = s_cov.SS_DATA_TYPE          from             sys.spt_columns_odbc_view s_cov          where             s_cov.object_id = @table_id -- (2nd) (@table_name is null or o.name like @table_name)             -- (2nd) and (@table_owner is null or schema_name(o.schema_id) like @table_owner)             and (@column_name is null or s_cov.COLUMN_NAME = @column_name) -- (2nd)             and (@column_name is NULL or c.name like @column_name)             and s_cov.ODBCVER = @ODBCVer             and s_cov.OBJECT_TYPE <> 'TT'             and ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )         order by 17     end     else     begin         /* -- Debug output, do not remove it.         print '*************'         print 'THERE IS pattern matching!'         print @fUsePattern         print isnull(convert(sysname, @table_id), '@table_id = null')         print isnull(@full_table_name, '@full_table_name = null')         print isnull(@table_owner, '@table_owner = null')         print isnull(@table_name, '@table_name = null')         print isnull(@column_name, '@column_name = null')         print '*************'     */         select             TABLE_QUALIFIER             = s_cov.TABLE_QUALIFIER,             TABLE_OWNER                 = s_cov.TABLE_OWNER,             TABLE_NAME                  = s_cov.TABLE_NAME,             COLUMN_NAME                 = s_cov.COLUMN_NAME,             DATA_TYPE                   = s_cov.DATA_TYPE_28,             TYPE_NAME                   = s_cov.TYPE_NAME_28,             ""PRECISION""                 = s_cov.PRECISION_28,             ""LENGTH""                    = s_cov.LENGTH_28,             SCALE                       = s_cov.SCALE_90,             RADIX                       = s_cov.RADIX,             NULLABLE                    = s_cov.NULLABLE,             REMARKS                     = s_cov.REMARKS,             COLUMN_DEF                  = s_cov.COLUMN_DEF,             SQL_DATA_TYPE               = s_cov.SQL_DATA_TYPE_28,             SQL_DATETIME_SUB            = s_cov.SQL_DATETIME_SUB_90,             CHAR_OCTET_LENGTH           = s_cov.CHAR_OCTET_LENGTH_28,             ORDINAL_POSITION            = s_cov.ORDINAL_POSITION,             IS_NULLABLE                 = s_cov.IS_NULLABLE,             SS_DATA_TYPE                = s_cov.SS_DATA_TYPE          from             sys.spt_columns_odbc_view s_cov          where             s_cov.ODBCVER = @ODBCVer and             s_cov.OBJECT_TYPE <> 'TT' and             (@table_name is null or s_cov.TABLE_NAME like @table_name) and             (@table_owner is null or schema_name(s_cov.SCHEMA_ID) like @table_owner) and             (@column_name is null or s_cov.COLUMN_NAME like @column_name) and             ( s_cov.SS_IS_SPARSE = 0 OR objectproperty ( s_cov.OBJECT_ID, 'tablehascolumnset' ) = 0 )          order by 2, 3, 17     end ",95,56,39,873,0,41293058
" update t2  set t2.BSM_STATUS = 'P' from BSM_INPUT_SPEC_TEMP t1 JOIN BSM_INPUT_SPEC t2 on t1.record_id=t2.RECORD_ID  where t1.RECORD_ID IS NOT NULL  ",92,83,9,24224,0,29715
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",86,56,30,4826,0,7844
"(@P1 nvarchar(3))with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, isnull(ag.cluster_type, 1) as cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE db.name = @P1",86,66,20,152,0,86
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",84,49,35,1852,0,7713
"(@P1 nvarchar(15))with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, isnull(ag.cluster_type, 1) as cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE db.name = @P1",84,64,20,152,0,84
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",81,47,34,916,0,7406
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 41 AND c.user_type_id = 41 -- only time columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumTimeIndices], db_id() AS database_id       FROM CTE     ",81,47,34,1652,0,7379
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",80,47,33,1708,0,7331
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",80,46,34,1565,0,7287
"       SELECT db_id() AS database_id, o.[type] as ModuleType, COUNT_BIG(*) as ModuleCount       FROM sys.objects AS o WITH(nolock)       WHERE o.type in ('AF', 'F', 'FN', 'FS', 'FT', 'IF', 'P', 'PC', 'TA', 'TF', 'TR', 'X', 'C', 'D', 'PG', 'SN', 'SO', 'SQ', 'TT', 'UQ', 'V')       GROUP BY o.[type]     ",77,46,31,100,0,7043
"(@P1 nvarchar(9))with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, isnull(ag.cluster_type, 1) as cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE db.name = @P1",77,60,17,152,0,77
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",77,44,33,1361,0,7028
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC",74,62,12,87910,0,299
(@1 varchar(8000))DELETE [BSM_INPUT_SPEC_TEMP]  WHERE [BSM_STATUS]=@1,74,74,0,21508,0,20101
"(@P1 nvarchar(7))with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, isnull(ag.cluster_type, 1) as cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE db.name = @P1",74,57,17,152,0,74
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",74,43,31,833,0,6745
"       SELECT db_id() AS database_id,       COUNT_BIG(*) AS [NumExternalStats]       FROM sys.tables t WITH(nolock) INNER JOIN sys.stats s WITH(nolock) ON t.object_id = s.object_id       WHERE t.is_external=1     ",71,42,29,2551,0,4887
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 41 AND c.user_type_id = 41 -- only time columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumTimeIndices], db_id() AS database_id       FROM CTE     ",71,41,30,1153,0,6535
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",71,45,26,2184,0,6515
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",67,39,28,369,0,6138
"(@P0 nvarchar(4000),@P1 int)SELECT     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_FILE_ID_CSV"".""PRIORITY"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_FILE_ID_CSV"".""TIME"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_FILE_ID_CSV"".""VALUE"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_FILE_ID_CSV"".""GROUP_FILE""  FROM     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_FILE_ID_CSV""  WHERE      GROUP_FILE =  @P0   AND FILE_ID =  @P1   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",66,325,-259,65376,0,60425
SELECT target_data 									FROM sys.dm_xe_session_targets xet WITH(nolock) 									JOIN sys.dm_xe_sessions xes WITH(nolock) 									ON xes.address = xet.event_session_address 									WHERE xes.name = 'telemetry_xevents' 									AND xet.target_name = 'ring_buffer',64,57,7,0,0,1691348
"(@P0 nvarchar(4000),@P1 int)SELECT     dbo.""TP_THAI_ADDR_FORMAT_FILE_ID_CSV"".""PRIORITY"" ,     dbo.""TP_THAI_ADDR_FORMAT_FILE_ID_CSV"".""TIME"" ,     dbo.""TP_THAI_ADDR_FORMAT_FILE_ID_CSV"".""VALUE"" ,     dbo.""TP_THAI_ADDR_FORMAT_FILE_ID_CSV"".""GROUP_FILE""  FROM     dbo.""TP_THAI_ADDR_FORMAT_FILE_ID_CSV""  WHERE      GROUP_FILE =  @P0   AND FILE_ID =  @P1   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",61,303,-242,65376,0,55862
"(@P0 nvarchar(4000),@P1 int)SELECT     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_FILE_ID_CSV"".""PRIORITY"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_FILE_ID_CSV"".""TIME"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_FILE_ID_CSV"".""VALUE"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_FILE_ID_CSV"".""GROUP_FILE""  FROM     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_FILE_ID_CSV""  WHERE      GROUP_FILE =  @P0   AND FILE_ID =  @P1   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",60,309,-249,65364,0,55007
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",59,38,21,3058,0,5416
" CREATE   PROCEDURE autoadmin_fetch_system_flags AS BEGIN 	BEGIN TRANSACTION 		DECLARE @value NVARCHAR(MAX)  		SELECT @value = value FROM autoadmin_system_flags WHERE LOWER(name) = LOWER(N'SSMBackup2WAEverConfigured') 		 		IF (LOWER(ISNULL(@value, '')) <> N'true') 		BEGIN 			DECLARE @is_configured BIT 			SET @is_configured = 0 			 			IF EXISTS (SELECT TOP 1 container_url FROM managed_backup.fn_backup_db_config(NULL) WHERE container_url IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 container_url FROM managed_backup.fn_backup_instance_config() WHERE container_url IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 credential_name FROM smart_admin.fn_backup_db_config(NULL) WHERE credential_name IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 credential_name FROM smart_admin.fn_backup_instance_config() WHERE credential_name IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			 			IF (@is_configured = 1) 			BEGIN 				MERGE autoadmin_system_flags AS target 				USING (SELECT LOWER(N'SSMBackup2WAEverConfigured') as name) AS source 				ON source.name = target.name 				WHEN MATCHED THEN UPDATE SET target.value = N'true' 				WHEN NOT MATCHED THEN INSERT VALUES (N'SSMBackup2WAEverConfigured', N'true'); 			END 		END 	COMMIT TRANSACTION 	     SELECT name, 	value  	FROM autoadmin_system_flags END ",59,59,0,523,3,59
"(@_msparam_0 nvarchar(4000),@_msparam_1 nvarchar(4000),@_msparam_2 nvarchar(4000))SELECT SCHEMA_NAME(sp.schema_id) AS [Schema], sp.name AS [Name], sp.object_id AS [ID], CAST(  case      when sp.is_ms_shipped = 1 then 1     when (         select              major_id          from              sys.extended_properties          where              major_id = sp.object_id and              minor_id = 0 and              class = 1 and              name = N'microsoft_database_tools_support')          is not null then 1     else 0 end                        AS bit) AS [IsSystemObject], CASE WHEN sp.type = N'P' THEN 1 WHEN sp.type = N'PC' THEN 2 ELSE 1 END AS [ImplementationType], CAST(CASE WHEN ISNULL(smsp.definition, ssmsp.definition) IS NULL THEN 1 ELSE 0 END AS bit) AS [IsEncrypted] FROM sys.all_objects AS sp LEFT OUTER JOIN sys.sql_modules AS smsp ON smsp.object_id = sp.object_id LEFT OUTER JOIN sys.system_sql_modules AS ssmsp ON ssmsp.object_id = sp.object_id WHERE (sp.type = @_msparam_0 OR sp.type = @_msparam_1 OR sp.type=@_msparam_2) ORDER BY [Schema] ASC,[Name] ASC",57,45,12,81203,0,405
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups               select replica_id, group_id into #tmpardb_availability_replicas from master.sys.availability_replicas              select replica_id, group_database_id, database_name,is_database_joined,is_failover_ready,is_pending_secondary_suspend,recovery_lsn,truncation_lsn into #tmpardb_database_replica_cluster_states from master.sys.dm_hadr_database_replica_cluster_states              select replica_id, is_local into #tmpardb_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select replica_id, group_database_id,synchronization_state, is_suspended into #tmpardb_database_replica_states from master.sys.dm_hadr_database_replica_states        SELECT dbcs.database_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityDatabase[@Name=' + quotename(dbcs.database_name,'''') + ']' AS [Urn], ISNULL(dbrs.synchronization_state, 0) AS [SynchronizationState], ISNULL(dbrs.is_suspended, 0) AS [IsSuspended], ISNULL(dbcs.is_database_joined, 0) AS [IsJoined] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpardb_availability_replicas AS AR ON AR.group_id=AG.group_id INNER JOIN #tmpardb_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id AND arstates.is_local = 1 INNER JOIN #tmpardb_database_replica_cluster_states AS dbcs ON arstates.replica_id = dbcs.replica_id LEFT OUTER JOIN #tmpardb_database_replica_states AS dbrs ON dbcs.replica_id = dbrs.replica_id AND dbcs.group_database_id = dbrs.group_database_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpardb_availability_replicas              DROP TABLE #tmpardb_database_replica_cluster_states              DROP TABLE #tmpardb_availability_replica_states              DROP TABLE #tmpardb_database_replica_states              drop table #tmpag_availability_groups       ",57,43,14,247,1,115
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",57,32,25,889,0,5216
" 	SELECT 	CASE 		WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END AS LoadedModules, 	COUNT(1) AS ModuleCount         FROM sys.dm_os_loaded_modules WITH (NOLOCK)         WHERE name like  '%msdtcprx.dll%' 	OR name like  '%sqljdbc_xa.dll%'         GROUP BY 	CASE WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END;     ",55,55,0,0,0,5049
"()begin try select top 10 rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ) as row_no ,       (rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ))%2 as l1 ,       creation_time ,       last_execution_time  ,       (total_worker_time+0.0)/1000 as total_worker_time ,       (total_worker_time+0.0)/(execution_count*1000) as [AvgCPUTime] ,       total_logical_reads as [LogicalReads] ,       total_logical_writes as [LogicalWrites] ,       execution_count ,       total_logical_reads+total_logical_writes as [AggIO] ,       (total_logical_reads+total_logical_writes)/(execution_count+0.0) as [AvgIO] ,       case when sql_handle IS NULL                 then ' '                 else ( substring(st.text,(qs.statement_start_offset+2)/2,       (case when qs.statement_end_offset = -1         then len(convert(nvarchar(MAX),st.text))*2      else qs.statement_end_offset    end - qs.statement_start_offset) /2  ) )         end as query_text  ,       db_name(st.dbid) as db_name ,       st.objectid as object_id from sys.dm_exec_query_stats  qs cross apply sys.dm_exec_sql_text(sql_handle) st where total_worker_time  > 0  order by [AvgCPUTime] desc end try begin catch select -100 as row_no ,       1 as l1, 1 as create_time,1 as last_execution_time,1 as total_worker_time,1 as AvgCPUTime,1 as LogicalReads,1 as LogicalWrites ,       ERROR_NUMBER() as execution_count ,       ERROR_SEVERITY() as AggIO ,       ERROR_STATE() as AvgIO ,       ERROR_MESSAGE() as query_text ,       0 as db_name ,       0 as object_name end catch",54,53,1,36062,1314,54
"(@1 smallint,@2 varchar(8000))DELETE [cleaned_update_adr]  WHERE [FILE_ID]=@1 AND [RM_NUMBER]=@2",54,52,2,5730,0,54
"(@P0 nvarchar(4000))SELECT     dbo.""TP_THAI_ADDR_SPLIT_CSV"".""PRIORITY"" ,     dbo.""TP_THAI_ADDR_SPLIT_CSV"".""TIME"" ,     dbo.""TP_THAI_ADDR_SPLIT_CSV"".""VALUE"" ,     dbo.""TP_THAI_ADDR_SPLIT_CSV"".""GROUP_FILE""  FROM     dbo.""TP_THAI_ADDR_SPLIT_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",53,254,-201,53490,0,16400
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",53,29,24,604,0,4869
"(@P0 nvarchar(4000))SELECT     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_CSV"".""PRIORITY"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_CSV"".""TIME"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_CSV"".""VALUE"" ,     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_CSV"".""GROUP_FILE""  FROM     dbo.""TP_CLEANED_DATA_SPEC_BY_SPECTRUM_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",52,262,-210,53490,0,16096
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",52,29,23,745,0,4799
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 41 AND c.user_type_id = 41 -- only time columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumTimeIndices], db_id() AS database_id       FROM CTE     ",52,29,23,689,0,4769
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",52,31,21,1899,0,4741
"(@P0 nvarchar(4000))SELECT     dbo.""TP_ENG_ADDR_SPLIT_CSV"".""PRIORITY"" ,     dbo.""TP_ENG_ADDR_SPLIT_CSV"".""TIME"" ,     dbo.""TP_ENG_ADDR_SPLIT_CSV"".""VALUE"" ,     dbo.""TP_ENG_ADDR_SPLIT_CSV"".""GROUP_FILE""  FROM     dbo.""TP_ENG_ADDR_SPLIT_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",51,261,-210,53490,0,15800
"update t1  set t1.BSM_STATUS = 'P' from BSM_INPUT_SPEC_TEMP t1 JOIN BSM_INPUT_SPEC t2 on t1.record_id=t2.RECORD_ID  where t2.BSM_STATUS = 'P' ",50,50,0,23666,0,152
"(@P0 nvarchar(4000))SELECT     dbo.""TP_THAI_ADDR_FORMAT_CSV"".""PRIORITY"" ,     dbo.""TP_THAI_ADDR_FORMAT_CSV"".""TIME"" ,     dbo.""TP_THAI_ADDR_FORMAT_CSV"".""VALUE"" ,     dbo.""TP_THAI_ADDR_FORMAT_CSV"".""GROUP_FILE""  FROM     dbo.""TP_THAI_ADDR_FORMAT_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",50,265,-215,53490,0,15370
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states        SELECT AR.replica_server_name AS [Name], 'Server[@Name=' + quotename(CAST(         serverproperty(N'Servername')        AS sysname),'''') + ']' + '/AvailabilityGroup[@Name=' + quotename(AG.name,'''') + ']' + '/AvailabilityReplica[@Name=' + quotename(AR.replica_server_name,'''') + ']' AS [Urn], ISNULL(arstates.role, 3) AS [Role], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(arcs.join_state, 99) AS [JoinState] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_replica_rollupstate              DROP TABLE #tmpar_availability_replica_cluster_states              drop table #tmpag_availability_groups       ",48,37,11,98,2,97
"(@P0 nvarchar(4000))SELECT     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_CSV"".""PRIORITY"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_CSV"".""TIME"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_CSV"".""VALUE"" ,     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_CSV"".""GROUP_FILE""  FROM     dbo.""TP_CLEANED_DATA_SPEC_WITHOUT_SPECTRUM_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",48,270,-222,53488,0,14671
"(@P0 nvarchar(4000))SELECT     dbo.""TP_CLEANED_DATA_SPEC_ENG_CSV"".""PRIORITY"" ,     dbo.""TP_CLEANED_DATA_SPEC_ENG_CSV"".""TIME"" ,     dbo.""TP_CLEANED_DATA_SPEC_ENG_CSV"".""VALUE"" ,     dbo.""TP_CLEANED_DATA_SPEC_ENG_CSV"".""GROUP_FILE""  FROM     dbo.""TP_CLEANED_DATA_SPEC_ENG_CSV""  WHERE      GROUP_FILE =  @P0   ORDER BY PRIORITY ASC, CAST(RECORD_ID AS INT) ASC  ",47,262,-215,53490,0,14534
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",47,28,19,227,0,4316
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",47,29,18,1453,0,4287
(@1 smallint)UPDATE [ACTUAL_DATA_SPEC] set [STATUS] = NULL  WHERE [FILE_ID]=@1,45,139,-94,24512,75,45
"SELECT * FROM  (SELECT  ADDRESS_MAKER TO_USER,         'TP_DCE_PROCESS_FLOW' JOB_FLOW_NAME,         'tpsup1' FROM_USER, 		'RECORD_ID:'+ADDRESS_MAKER+':'+RECORD_ID OTHER_PARAM FROM BSM_INPUT_SPEC_TEMP a WHERE BSM_STATUS IS NULL ) T1 GROUP BY TO_USER,JOB_FLOW_NAME,FROM_USER,OTHER_PARAM ORDER BY TO_USER DESC",45,45,0,13708,0,470265
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",45,25,20,729,0,4105
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [UpdatableLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 2 AND is_dropped_ledger_table = 0     ",44,27,17,119,0,4035
"SELECT RECORD_ID , ITERATION FROM dbo.BSM_INPUT_SPEC_TEMP WHERE BSM_STATUS IS NULL",44,44,0,13330,0,337484
" CREATE   PROCEDURE autoadmin_fetch_system_flags AS BEGIN 	BEGIN TRANSACTION 		DECLARE @value NVARCHAR(MAX)  		SELECT @value = value FROM autoadmin_system_flags WHERE LOWER(name) = LOWER(N'SSMBackup2WAEverConfigured') 		 		IF (LOWER(ISNULL(@value, '')) <> N'true') 		BEGIN 			DECLARE @is_configured BIT 			SET @is_configured = 0 			 			IF EXISTS (SELECT TOP 1 container_url FROM managed_backup.fn_backup_db_config(NULL) WHERE container_url IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 container_url FROM managed_backup.fn_backup_instance_config() WHERE container_url IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 credential_name FROM smart_admin.fn_backup_db_config(NULL) WHERE credential_name IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			ELSE IF EXISTS (SELECT TOP 1 credential_name FROM smart_admin.fn_backup_instance_config() WHERE credential_name IS NOT NULL) 			BEGIN 				SET @is_configured = 1	 			END 			 			IF (@is_configured = 1) 			BEGIN 				MERGE autoadmin_system_flags AS target 				USING (SELECT LOWER(N'SSMBackup2WAEverConfigured') as name) AS source 				ON source.name = target.name 				WHEN MATCHED THEN UPDATE SET target.value = N'true' 				WHEN NOT MATCHED THEN INSERT VALUES (N'SSMBackup2WAEverConfigured', N'true'); 			END 		END 	COMMIT TRANSACTION 	     SELECT name, 	value  	FROM autoadmin_system_flags END ",43,43,0,276,2,43
Select * From [dbo].[DCE_PARSED_RESULT_VW],43,43,0,10502,0,66947
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [AppendOnlyLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 3 AND is_dropped_ledger_table = 0     ",43,27,16,119,0,3953
"       SELECT database_id, database_guid,       CASE       WHEN db_name(database_id) LIKE '%WideWorldImportersDW%' THEN 'WideWorldImportersDW'       WHEN db_name(database_id) LIKE '%WideWorldImporters%' THEN 'WideWorldImporters'       WHEN db_name(database_id) LIKE '%AdventureWorks2016CTP3%' THEN 'AdventureWorks2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2016CTP3%' THEN 'AdventureWorksDW2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorks2014%' THEN 'AdventureWorks2014'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2014%' THEN 'AdventureWorksDW2014'       WHEN db_name(database_id) LIKE '%AdventureWorks2012%' THEN 'AdventureWorks2012'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2012%' THEN 'AdventureWorksDW2012'       WHEN db_name(database_id) LIKE '%AdventureWorks2008%' THEN 'AdventureWorks2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2008%' THEN 'AdventureWorksDW2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW%' THEN 'AdventureWorksDW'       WHEN db_name(database_id) LIKE '%AdventureWorks%' THEN 'AdventureWorks'       WHEN db_name(database_id) LIKE '%ReportServerTempDB%' THEN 'ReportServerTempDB'       WHEN db_name(database_id) LIKE '%ReportServer%' THEN 'ReportServer'       WHEN db_name(database_id) LIKE '%WSS_Content%' THEN 'WSS_Content'       WHEN db_name(database_id) LIKE '%MDW%' THEN 'MDW'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX_baseline%' THEN 'MicrosoftDynamicsAX_baseline'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX%' THEN 'MicrosoftDynamicsAX'       WHEN db_name(database_id) = 'master' THEN 'master'       WHEN db_name(database_id) = 'msdb' THEN 'msdb'       WHEN db_name(database_id) = 'tempdb' THEN 'tempdb'       WHEN db_name(database_id) = 'model' THEN 'model'       WHEN db_name(database_id) LIKE '%SharePoint_Config%' THEN 'SharePoint_Config'       WHEN db_name(database_id) LIKE '%SharePoint_AdminContent%' THEN 'SharePoint_AdminContent'       WHEN db_name(database_id) LIKE '%AppManagement%' THEN 'AppManagement'       WHEN db_name(database_id) LIKE '%Bdc_Service_DB%' THEN 'Bdc_Service_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_DB%' THEN 'Search_Service_Application_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_AnalyticsReportingStoreDB%' THEN 'Search_Service_Application_AnalyticsReportingStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_CrawlStoreDB%' THEN 'Search_Service_Application_CrawlStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_LinkStoreDB%' THEN 'Search_Service_Application_LinkStoreDB'       WHEN db_name(database_id) LIKE '%Secure_Store_Service_DB%' THEN 'Secure_Store_Service_DB'       WHEN db_name(database_id) LIKE '%SharePoint_Logging%' THEN 'SharePoint_Logging'       WHEN db_name(database_id) LIKE '%SettingsServiceDB%' THEN 'SettingsServiceDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_ProfileDB%' THEN 'User Profile Service Application_ProfileDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SyncDB%' THEN 'User Profile Service Application_SyncDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SocialDB%' THEN 'User Profile Service Application_SocialDB'       WHEN db_name(database_id) LIKE '%WordAutomationServices%' THEN 'WordAutomationServices'       WHEN db_name(database_id) LIKE '%Managed Metadata Service Application_Metadata%' THEN 'Managed Metadata Service Application_Metadata'       WHEN db_name(database_id) LIKE '%SharePoint Translation Services%' THEN 'SharePoint Translation Services'       WHEN db_name(database_id) LIKE '%ProjectWebApp%' THEN 'ProjectWebApp'       WHEN db_name(database_id) LIKE '%DefaultPowerPivotServiceApplicationDB%' THEN 'DefaultPowerPivotServiceApplicationDB'       WHEN db_name(database_id) LIKE '%PerformancePoint Service%' THEN 'PerformancePoint Service'       WHEN db_name(database_id) LIKE '%SessionStateService%' THEN 'SessionStateService'       WHEN db_name(database_id) = 'SSISDB' THEN 'SSISDB'       WHEN db_name(database_id) = 'DQS_MAIN' THEN 'DQS_MAIN'       ELSE 'Other'       END AS default_database_class       FROM sys.database_recovery_status WITH(nolock)     ",42,22,20,26,0,3848
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",42,23,19,579,0,3824
(@1 smallint)DELETE [bsm_input_spec]  WHERE [FILE_ID]=@1,41,41,0,6245,0,41
"       SELECT         db_id() AS [database_id],         CASE           WHEN EXISTS (             SELECT *             FROM sys.tables             WHERE ledger_type in (2,3) AND is_dropped_ledger_table = 0)           THEN 1           ELSE 0           END AS [IsLedger]     ",41,24,17,75,0,3753
(@1 varchar(8000))SELECT * FROM [cleaned_data_spec] WHERE [FILE_ID]=@1,41,40,1,16618,0,657
(@1 smallint)DELETE [cleaned_update_adr]  WHERE [FILE_ID]=@1,40,40,0,5730,0,40
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",40,22,18,453,0,3692
"(@1 smallint,@2 varchar(8000))DELETE [bsm_input_spec]  WHERE [FILE_ID]=@1 AND [RM_NUMBER]=@2",40,40,0,6247,3,40
