"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info;",53,53,0,1541,0,53
" 	SELECT 	CASE 		WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END AS LoadedModules, 	COUNT(1) AS ModuleCount         FROM sys.dm_os_loaded_modules WITH (NOLOCK)         WHERE name like  '%msdtcprx.dll%' 	OR name like  '%sqljdbc_xa.dll%'         GROUP BY 	CASE WHEN name like  '%msdtcprx.dll%' THEN 'msdtcprx' 		WHEN name like  '%sqljdbc_xa.dll%' THEN 'sqljdbc_xa' 		ELSE NULL 	END;     ",48,48,0,9,0,144
SELECT target_data 									FROM sys.dm_xe_session_targets xet WITH(nolock) 									JOIN sys.dm_xe_sessions xes WITH(nolock) 									ON xes.address = xet.event_session_address 									WHERE xes.name = 'telemetry_xevents' 									AND xet.target_name = 'ring_buffer',42,36,6,0,0,32009
"         DECLARE @msticks bigint, @mstickstime datetime, @LastHour datetime                 SELECT @mstickstime = GETDATE(), @msticks = ms_ticks from sys.dm_os_sys_info                 SELECT @LastHour = DATEADD(HOUR, -1, @mstickstime);                  WITH Quartiles AS (                 SELECT DISTINCT                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,                        CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],                        PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS MedianSQLCPU                            ,                        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS Q3SQLCPU                      ,                        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')                            )                            OVER (PARTITION BY CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112),                                   CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)                            ) AS Q1SQLCPU                   FROM (                     SELECT timestamp, CONVERT (xml, record) AS 'record'                     FROM sys.dm_os_ring_buffers                     WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'                       AND record LIKE '%<SystemHealth>%'                             ) AS t                      WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)                      AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)               ),               SimpleStats AS (                 SELECT                     CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) EventDate,                        CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114) AS [EventTime],                     MAX(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MaxSQLCPU],                        MIN(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [MinSQLCPU],                        AVG(record.value('(Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')) AS [AvgSQLCPU]                   FROM (                     SELECT timestamp, CONVERT (xml, record) AS 'record'                     FROM sys.dm_os_ring_buffers                     WHERE ring_buffer_type = 'RING_BUFFER_SCHEDULER_MONITOR'                       AND record LIKE '%<SystemHealth>%'                             ) AS t               WHERE DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)) = DATEPART(HOUR, @LastHour)                      AND CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE) = CAST(@LastHour AS DATE)               GROUP BY                      CONVERT(VARCHAR(10), CAST(DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime) AS DATE), 112) ,                      CONVERT(VARCHAR(30), TIMEFROMPARTS(DATEPART(HOUR, DATEADD (ms, -1 * (@msticks - [timestamp]),@mstickstime)), 00,00,00,00), 114)               )               SELECT                      ss.EventDate AS EventDate,                      ss.EventTime AS EventTime,                      ss.MaxSQLCPU,                      ss.MinSQLCPU,                      ss.AvgSQLCPU,                      q.MedianSQLCPU,                      q.Q1SQLCPU,                      q.Q3SQLCPU               FROM SimpleStats ss                      INNER JOIN Quartiles q                            ON q.EventDate = ss.EventDate                            AND q.EventTime = ss.EventTime      ",33,33,0,781,0,2108
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",26,25,1,1546,0,78
"CREATE PROCEDURE sp_sqlagent_has_server_access   @login_name         sysname = NULL,   @job_id             uniqueidentifier = NULL, -- if this is not null, @login_name will be ignored!   @is_sysadmin_member INT     = NULL OUTPUT AS BEGIN   DECLARE @has_server_access BIT   DECLARE @is_sysadmin       BIT   DECLARE @actual_login_name sysname   -- Set only when login_name is actually found. It will be zero when @actual_login_name is (unknown).   DECLARE @login_found BIT   DECLARE @cachedate         DATETIME    SET NOCOUNT ON    SELECT @cachedate = NULL    -- remove expired entries from the cache   DELETE msdb.dbo.syscachedcredentials   WHERE  DATEDIFF(MINUTE, cachedate, GETDATE()) >= 29    -- query the cache   SELECT  @is_sysadmin = is_sysadmin_member,           @has_server_access = has_server_access,           @cachedate = cachedate   FROM    msdb.dbo.syscachedcredentials   WHERE   login_name = @login_name   AND     DATEDIFF(MINUTE, cachedate, GETDATE()) < 29    IF (@cachedate IS NOT NULL)   BEGIN     -- no output variable     IF (@is_sysadmin_member IS NULL)     BEGIN       -- Return result row       SELECT has_server_access = @has_server_access,              is_sysadmin       = @is_sysadmin,              actual_login_name = @login_name       RETURN     END     ELSE     BEGIN       SELECT @is_sysadmin_member = @is_sysadmin       RETURN     END   END -- select from cache    -- Set defaults   SELECT @has_server_access = 0   SELECT @is_sysadmin = 0   SELECT @actual_login_name = FORMATMESSAGE(14205)   SELECT @login_found = 0      -- If @job_id was set, get the current name associated with the job owner sid.   if (@job_id IS NOT NULL)   BEGIN 	SELECT @login_name = dbo.SQLAGENT_SUSER_SNAME(owner_sid) 	FROM msdb.dbo.sysjobs_view 	WHERE @job_id = job_id      -- If the job_id is invalid, return error     IF (@login_name IS NULL)     BEGIN       RETURN 1;     END    END   IF (@login_name IS NULL)   BEGIN     SELECT has_server_access = 1,            is_sysadmin       = IS_SRVROLEMEMBER(N'sysadmin'),            actual_login_name = SUSER_SNAME()     RETURN   END    IF (@login_name LIKE '%\%')   BEGIN     -- Handle the LocalSystem account ('NT AUTHORITY\SYSTEM') as a special case     IF (UPPER(@login_name collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')     BEGIN       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')          SET @login_found = 1       END       ELSE       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')          SET @login_found = 1       END     END     ELSE     BEGIN       -- Check if the NT login has been explicitly denied access       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (loginname = @login_name)                     AND (denylogin = 1)))       BEGIN         SELECT @has_server_access = 0,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (loginname = @login_name)          SET @login_found = 1       END       ELSE       BEGIN         -- declare table variable for storing results         DECLARE @xp_results TABLE         (         account_name      sysname      COLLATE database_default NOT NULL PRIMARY KEY,         type              NVARCHAR(10) COLLATE database_default NOT NULL,         privilege         NVARCHAR(10) COLLATE database_default NOT NULL,         mapped_login_name sysname      COLLATE database_default NOT NULL,         permission_path   sysname      COLLATE database_default NULL         )          -- Call xp_logininfo to determine server access         INSERT INTO @xp_results         EXECUTE master.dbo.xp_logininfo @login_name          IF (SELECT COUNT(*) FROM @xp_results) > 0         BEGIN           SET @has_server_access = 1           SET @login_found = 1         END          SELECT @actual_login_name = mapped_login_name,                @is_sysadmin = CASE UPPER(privilege collate SQL_Latin1_General_CP1_CS_AS)                                 WHEN 'ADMIN' THEN 1                                 ELSE 0                              END         FROM @xp_results       END     END     -- Only cache the NT logins to approximate the behavior of Sql Server and Windows (see bug 323287)     -- update the cache only if something is found     IF  (UPPER(@actual_login_name collate SQL_Latin1_General_CP1_CS_AS) <> '(UNKNOWN)')     BEGIN       -- Procedure starts its own transaction.       BEGIN TRANSACTION;        -- Modify database.       -- use a try catch login to prevent any error when trying       -- to insert/update syscachedcredentials table       -- no need to fail since the job owner has been validated       BEGIN TRY         IF EXISTS (SELECT * FROM msdb.dbo.syscachedcredentials WITH (TABLOCKX) WHERE login_name = @login_name)         BEGIN           UPDATE msdb.dbo.syscachedcredentials           SET    has_server_access = @has_server_access,                 is_sysadmin_member = @is_sysadmin,                 cachedate = GETDATE()           WHERE  login_name = @login_name         END         ELSE         BEGIN           INSERT INTO msdb.dbo.syscachedcredentials(login_name, has_server_access, is_sysadmin_member)           VALUES(@login_name, @has_server_access, @is_sysadmin)         END         END TRY         BEGIN CATCH             -- If an error occurred we want to ignore it         END CATCH          -- The procedure must commit the transaction it started.         COMMIT TRANSACTION;     END    END   ELSE   BEGIN     -- Standard login     IF (EXISTS (SELECT *                 FROM master.dbo.syslogins                 WHERE (loginname = @login_name)))     BEGIN       SELECT @has_server_access = hasaccess,              @is_sysadmin = sysadmin,              @actual_login_name = loginname       FROM master.dbo.syslogins       WHERE (loginname = @login_name)        SET @login_found = 1     END   END    IF (@is_sysadmin_member IS NULL)     -- Return result row     SELECT has_server_access = @has_server_access,            is_sysadmin       = @is_sysadmin,            actual_login_name = @actual_login_name,            login_found       = @login_found   ELSE     -- output variable only     SELECT @is_sysadmin_member = @is_sysadmin END ",17,17,0,207,0,105
"       select counter_name, cntr_value from sys.dm_os_performance_counters where object_name like '%External Scripts%'     ",15,15,0,0,0,46
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",13,13,0,2894,0,40
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",12,7,5,1477,0,37
"(@_msparam_0 nvarchar(4000))SELECT CAST(COLLATIONPROPERTY(name, 'LCID') AS int) AS [LocaleID] FROM sys.fn_helpcollations() cl WHERE (cl.name=@_msparam_0)",8,8,0,0,0,49
"       SELECT db_id() AS database_id, o.[type] as ModuleType, COUNT_BIG(*) as ModuleCount       FROM sys.objects AS o WITH(nolock)       WHERE o.type in ('AF', 'F', 'FN', 'FS', 'FT', 'IF', 'P', 'PC', 'TA', 'TF', 'TR', 'X', 'C', 'D', 'PG', 'SN', 'SO', 'SQ', 'TT', 'UQ', 'V')       GROUP BY o.[type]     ",6,6,0,96,0,19
FETCH API_CURSOR0000000000001629 ,6,6,0,5053,0,12
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       t.object_type,       i.is_disabled     ",6,6,0,643,0,18
FETCH API_CURSOR0000000000001625 ,5,5,0,4550,0,23
FETCH API_CURSOR0000000000001626 ,5,5,0,5040,0,11
FETCH API_CURSOR0000000000001627 ,5,5,0,4546,0,11
FETCH API_CURSOR000000000000162A ,5,5,0,4558,0,10
"       SELECT db_id() AS database_id,       COUNT_BIG(*) AS [NumExternalStats]       FROM sys.tables t WITH(nolock) INNER JOIN sys.stats s WITH(nolock) ON t.object_id = s.object_id       WHERE t.is_external=1     ",4,4,0,708,0,12
" ------------------------------- xp_logininfo ----------------------------------  create procedure sys.xp_logininfo 	@acctname		sysname = null,				-- IN: NT login name 	@option			varchar(10) = null,			-- IN: 'all' | 'members' | null 	@privilege		varchar(10) = 'Not wanted' OUTPUT	-- OUT: 'admin' | 'user' | null as 	set nocount on  	declare @ret		int  	-- VALIDATE PARAMETERS -- 	if (@acctname is null AND (@option is not null OR (@privilege is null OR @privilege <> 'Not wanted'))) 		OR ((@option is null OR @option <> 'all') AND (@privilege is null OR @privilege <> 'Not wanted')) 		OR (@option is not null and @option not in ('all', 'members')) 	begin         raiserror(15600,-1,-1,'sys.xp_logininfo')         return 1 	end   	-- HANDLE case where NO @acctname GIVEN -- 	if (@acctname is null) 	begin 		select	'account name' = loginname, 				'type' = convert(varchar(8), case when isntuser = 1 then 'user' else 'group' end), 				'privilege' = convert(varchar(8), case when sysadmin = 1 then 'admin' else 'user' end), 				'mapped login name' = loginname, 				'permission path' = convert(sysname, null) 		from master..syslogins where isntname = 1 and hasaccess = 1 		order by 3, 1 		return @@error 	end  	-- HANDLE 'members' QUERY -- 	if (@option = 'members') 	begin 		declare @priv varchar(8) 		select @priv = case when sysadmin = 1 then 'admin' else 'user' end 			from master..syslogins where isntname = 1 and loginname = @acctname and hasaccess = 1 		if @priv is not null 			select	'account name' = domain+N'\'+name, 					'type' = convert(varchar(8), case when sidtype = 1 then 'user' else 'group' end), 					'privilege' = @priv, 					'mapped login name' = domain+N'\'+name, 					'permission path' = @acctname 			from OpenRowset(TABLE NETGROUPGETMEMBERS, @acctname) order by 3, 1 		else 			select	'account name' = convert(sysname, null), 					'type' = convert(varchar(8), null), 					'privilege' = @priv, 					'mapped login name' = convert(sysname, null), 					'permission path' = convert(sysname, null) 			where 0=1	-- empty result set 		return @@error 	end   	-- CREATE TEMP TABLE AND POPULATE WITH THE REQUIRED DATA -- 	CREATE TABLE #nt (name sysname collate catalog_default, sid varbinary(85), sidtype int) 	insert #nt select loginname, sid, isntgroup + 1 from master..syslogins 			where isntname = 1 and loginname = @acctname 	insert #nt select distinct domain+N'\'+name, sid, sidtype 			from OpenRowset(TABLE NETUSERGETGROUPS, @acctname) 	select @ret = @@error 	if @ret <> 0 		return @ret 	-- IF ANY DENY, THEN NO ACCESS -- 	if exists (select * from master..syslogins where sid in (select #nt.sid from #nt) and denylogin = 1) 		delete #nt   	-- HANDLE case where OUTPUT REQUESTED -- 	if (@privilege is null OR @privilege <> 'Not wanted') 	begin 		select @privilege = case max(sysadmin) 			when 1 then 'admin' 			when 0 then 'user' 			else NULL end 		from master..syslogins where isntname = 1 and hasaccess = 1 			AND sid in (select sid from #nt) 		return @@error 	end   	-- GET NT TYPE FOR NEXT OPTIONS -- 	declare @type varchar(8) 	select @type = case when get_sid('\U'+@acctname) is null then 'group' else 'user' end  	-- HANDLE 'all' QUERY -- 	if (@option = 'all') 	begin 		select	'account name' = @acctname, 				'type' = @type, 				'privilege' = convert(varchar(8), case when sysadmin = 1 then 'admin' else 'user' end), 				'mapped login name' = @acctname, 				'permission path' = case when l.loginname = @acctname then NULL else l.loginname end 		from master..syslogins l join #nt n on l.isntname = 1 and l.sid = n.sid 		where l.loginname = n.name and hasaccess = 1 		order by 3, 5 		return @@error 	end   	-- HANDLE DEFAULT QUERY -- 	select	TOP 1 			'account name' = @acctname, 			'type' = @type, 			'privilege' = convert(varchar(8), case when sysadmin = 1 then 'admin' else 'user' end), 			'mapped login name' = @acctname, 			'permission path' = case when l.loginname = @acctname then NULL else l.loginname end 	from master..syslogins l join #nt n on l.isntname = 1 and l.sid = n.sid 	where l.loginname = n.name and hasaccess = 1 	order by 3, 5 	return @@error ",3,3,0,5,0,19
"       SELECT COUNT_BIG(*) AS [NumOfNativeProcs], db_id() AS database_id FROM sys.sql_modules m WITH(nolock) JOIN sys.procedures p WITH(nolock) ON m.object_id=p.object_id WHERE uses_native_compilation=1     ",3,3,0,92,0,9
"       --In the following query, the certificate certificate key length, and the certificate encryption type for TDE are collected.       SELECT key_length, pvt_key_encryption_type, COUNT_BIG(*) AS cert_count FROM sys.certificates WITH(nolock) GROUP BY key_length, pvt_key_encryption_type     ",2,2,0,44,0,8
"       SELECT ISNULL(AVG(c),0) AS [XTPAvgNumOfIndexes],       ISNULL(MAX(c),0) AS [XTPMaxNumOfIndexes], db_id() AS database_id       FROM (SELECT COUNT_BIG(*) AS c       FROM sys.indexes i WITH(nolock) JOIN sys.tables t WITH(nolock) ON i.object_id=t.object_id WHERE t.is_memory_optimized=1       GROUP BY i.object_id) a     ",2,2,0,460,0,8
"with fs as (select database_id, type, CAST ( size as BIGINT ) / 128 size from [master].[sys].[master_files]) select db.name, db.database_id, db.recovery_model_desc, db.state_desc, db.is_in_standby, (SELECT SUM ( CAST ( size as BIGINT ) ) from fs where fs.database_id = db.database_id) DBSizeMB, ag.name as ag_name, ag_rep_states.role_desc, ag_rep_states.operational_state_desc, ag_rep.secondary_role_allow_connections_desc, ls.primary_id, ag.group_id, ag.cluster_type, db.service_broker_guid, is_cdc_enabled from [master].[sys].[databases] db LEFT OUTER JOIN [master].[sys].[availability_databases_cluster] dbc ON db.group_database_id = dbc.group_database_id LEFT OUTER JOIN [master].[sys].[availability_groups] ag ON dbc.group_id = ag.group_id LEFT OUTER JOIN [master].[sys].[dm_hadr_availability_replica_states] ag_rep_states ON db.replica_id = ag_rep_states.replica_id LEFT OUTER JOIN [master].[sys].[availability_replicas] ag_rep ON db.replica_id = ag_rep.replica_id LEFT OUTER JOIN [msdb].[dbo].[log_shipping_monitor_primary] ls ON db.name collate database_default = ls.primary_database collate database_default WHERE source_database_id is NULL",2,2,0,158,0,4
"(@1 varchar(8000))SELECT [succeeded] FROM [msdb]..[sysmaintplan_logdetail] WHERE [task_detail_id]=@1 ORDER BY [start_time] ASC,[end_time] ASC",2,2,0,497,0,27
"(@1 varchar(8000))SELECT * FROM [msdb]..[sysmaintplan_logdetail] WHERE [task_detail_id]=@1 ORDER BY [start_time] ASC,[end_time] ASC",2,2,0,497,0,25
"       SELECT b1.device_type,       ISNULL(b1.[type],'NULL') AS backup_type,       b1.is_copy_only,       b1.time_bucket,       b1.compressed_backup_size_bucket,       b1.compression_percent_bucket,       b1.backup_throughput_bucket,       COUNT_BIG(b1.device_type) AS 'count',       b1.encryption       FROM       (       SELECT       mf.device_type,       bset.[type],       CAST(bset.[is_copy_only] AS INT) AS [is_copy_only],       CASE       WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0                    THEN 0       WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 1 AND 30       THEN 1       WHEN DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 30 AND 60      THEN 2       WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 1 AND 5        THEN 3       WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 5 AND 10       THEN 4       WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 10 AND 30      THEN 5       WHEN DATEDIFF(MINUTE, bset.[backup_start_date], bset.[backup_finish_date])      BETWEEN 30 AND 60      THEN 6       WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 1 AND 2        THEN 7       WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 2 AND 6        THEN 8       WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 6 AND 12       THEN 9       WHEN DATEDIFF(HOUR, bset.[backup_start_date], bset.[backup_finish_date])        BETWEEN 12 AND 24      THEN 10       ELSE 99       END       AS 'time_bucket',       CASE       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 0 AND 1          THEN 0       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 1 AND 5          THEN 1       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 5 AND 25         THEN 2       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 25 AND 100       THEN 3       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 100 AND 500      THEN 4       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 500 AND 1000     THEN 5       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 1000 AND 5000    THEN 6       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 5000 AND 10000   THEN 7       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 10000 AND 50000  THEN 8       WHEN CAST(ISNULL(bset.compressed_backup_size, 0) / 1048576 AS FLOAT) BETWEEN 50000 AND 100000 THEN 9       ELSE 99       END       AS compressed_backup_size_bucket,       CASE       WHEN CAST(((ISNULL(bset.backup_size,0) - ISNULL(bset.compressed_backup_size,0)) /       CASE WHEN bset.backup_size <= 0 THEN 1       ELSE ISNULL(bset.backup_size, 1)       END       ) * 100  AS FLOAT) = 0.0 THEN 0       ELSE (CAST(((ISNULL(bset.backup_size,0) - ISNULL(bset.compressed_backup_size,0)) /       CASE WHEN bset.backup_size <= 0 THEN 1       ELSE ISNULL(bset.backup_size, 1)       END       ) * 100  AS INT)/10) + 1       END       AS compression_percent_bucket,       CASE       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) = 0.0                       THEN 0       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  0 AND 100          THEN 1       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  100 AND 500        THEN 2       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  500 AND 1000       THEN 3       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  1000 AND 5000      THEN 4       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  5000 AND 10000     THEN 5       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  10000 AND 20000    THEN 6       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  20000 AND 30000    THEN 7       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  30000 AND 50000    THEN 8       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  50000 AND 100000   THEN 9       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  100000 AND 500000  THEN 10       WHEN CAST(CAST(ISNULL(bset.compressed_backup_size, 0) / 1024 AS FLOAT) / (CASE WHEN  DATEDIFF(SECOND, bset.[backup_start_date], bset.[backup_finish_date]) = 0 THEN 1 END) AS FLOAT) BETWEEN  500000 AND 1000000 THEN 11       ELSE 99       END       AS backup_throughput_bucket, -- in KB       CASE       WHEN bset.encryptor_type like '%CERTIFICATE%' THEN 1       WHEN bset.encryptor_type like '%ASYMMETRIC KEY%' THEN 2       ELSE 0       END       AS encryption       FROM [msdb].[dbo].[backupset] bset WITH (READUNCOMMITTED)       JOIN [msdb].[dbo].[backupmediafamily]  mf WITH (READUNCOMMITTED) ON  mf.media_set_id = bset.media_set_id       WHERE       backup_finish_date <= GETDATE() and backup_finish_date > DATEADD(hh, -24, GETDATE() )       ) AS b1       GROUP BY       b1.device_type,       b1.[type],       b1.is_copy_only,       b1.time_bucket,       b1.compressed_backup_size_bucket,       b1.compression_percent_bucket,       b1.backup_throughput_bucket,       b1.encryption      ",2,1,1,105,0,6
"       select 1 as name, -- Temp DB       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id = 2 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.name, mf.type, mf.type_desc        UNION ALL        select 2 as name, -- User DBs       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and fs.database_id > 4 and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.type, mf.type_desc        UNION ALL        select 3 as name, -- System DBs       case mf.type_desc       when 'ROWS' then 1       when 'LOG' then 2       end as 'type',       CAST(SUM(num_of_reads) as nvarchar(128)) as total_num_of_reads,       CAST(SUM(num_of_bytes_read) as nvarchar(128)) as total_num_of_bytes_read,       CAST(SUM(io_stall_read_ms) as nvarchar(128)) as total_io_stall_read_ms,       CAST(SUM(num_of_writes) as nvarchar(128)) as total_num_of_writes,       CAST(SUM(num_of_bytes_written) as nvarchar(128)) as total_num_of_bytes_written,       CAST(SUM(io_stall_write_ms) as nvarchar(128)) as total_io_stall_write_ms,       COUNT_BIG(*) as total       from sys.dm_io_virtual_file_stats(NULL, NULL) fs, sys.master_files mf WITH(nolock)       where fs.database_id = mf.database_id and fs.file_id = mf.file_id and (fs.database_id = 1 OR fs.database_id = 3 OR fs.database_id = 4) and (fs.num_of_reads != 0 OR fs.num_of_writes != 0)       group by mf.type, mf.type_desc      ",1,1,0,112,0,5
"       SELECT       value_name,       value_data       FROM sys.dm_server_registry WITH(nolock)       WHERE value_name = 'InstallId'       OR (registry_key LIKE '%Polybase%' AND value_name = 'ScaleOutReady')     ",1,1,0,3,0,5
"       SELECT DB_ID() AS database_id, COUNT_BIG(*) as MemoryOptimizedScalarUDFCount       FROM sys.sql_modules m WITH(nolock) JOIN sys.objects o WITH(nolock) ON m.object_id=o.object_id       WHERE uses_native_compilation=1 and o.type='FN'     ",1,1,0,98,0,5
"       SELECT startup_type, status       FROM sys.dm_server_services WITH(nolock)       WHERE servicename LIKE 'SQL Server Agent (%'     ",1,1,0,9,0,4
"     SELECT     db_id() AS database_id,     desired_state AS QueryStoreDesiredState,     actual_state AS QueryStoreActualState,     current_storage_size_mb AS QueryStoreCurrentStorageSizeMb     FROM sys.database_query_store_options WITH(nolock)",1,1,0,467,0,4
"       SELECT       database_id,       source_database_id AS SDID,       create_date,       compatibility_level,       user_access,       is_read_only,       is_auto_close_on,       is_auto_shrink_on,       state,       is_in_standby,       is_cleanly_shutdown,       is_supplemental_logging_enabled AS SLE,       recovery_model,       page_verify_option,       is_auto_create_stats_on AS ACS,       is_auto_create_stats_incremental_on AS ACSI,       is_auto_update_stats_on AS AUS,       is_auto_update_stats_async_on AUSA,       is_fulltext_enabled AS FTE,       is_trustworthy_on AS TW,       is_db_chaining_on AS DBC,       is_parameterization_forced AS PF,       is_master_key_encrypted_by_server AS MKEBS,       is_query_store_on AS QS,       is_published AS TREPL,       is_merge_published AS MREPL,       is_distributor,       is_sync_with_backup AS SWB,       is_broker_enabled AS BE,       log_reuse_wait,       is_cdc_enabled AS CDC,       is_encrypted,       is_honor_broker_priority_on AS HBP,       replica_id AS RID,       group_database_id AS GDID,       resource_pool_id AS RPID,       containment,       target_recovery_time_in_seconds AS TRT,       delayed_durability,       is_memory_optimized_elevate_to_snapshot_on AS MOES,       is_remote_data_archive_enabled AS RDAE,       collation_name AS DBCollation       FROM sys.databases WITH(nolock)     ",1,1,0,86,0,1
"       SELECT database_id, database_guid,       CASE       WHEN db_name(database_id) LIKE '%WideWorldImportersDW%' THEN 'WideWorldImportersDW'       WHEN db_name(database_id) LIKE '%WideWorldImporters%' THEN 'WideWorldImporters'       WHEN db_name(database_id) LIKE '%AdventureWorks2016CTP3%' THEN 'AdventureWorks2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2016CTP3%' THEN 'AdventureWorksDW2016CTP3'       WHEN db_name(database_id) LIKE '%AdventureWorks2014%' THEN 'AdventureWorks2014'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2014%' THEN 'AdventureWorksDW2014'       WHEN db_name(database_id) LIKE '%AdventureWorks2012%' THEN 'AdventureWorks2012'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2012%' THEN 'AdventureWorksDW2012'       WHEN db_name(database_id) LIKE '%AdventureWorks2008%' THEN 'AdventureWorks2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW2008%' THEN 'AdventureWorksDW2008'       WHEN db_name(database_id) LIKE '%AdventureWorksDW%' THEN 'AdventureWorksDW'       WHEN db_name(database_id) LIKE '%AdventureWorks%' THEN 'AdventureWorks'       WHEN db_name(database_id) LIKE '%ReportServerTempDB%' THEN 'ReportServerTempDB'       WHEN db_name(database_id) LIKE '%ReportServer%' THEN 'ReportServer'       WHEN db_name(database_id) LIKE '%WSS_Content%' THEN 'WSS_Content'       WHEN db_name(database_id) LIKE '%MDW%' THEN 'MDW'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX_baseline%' THEN 'MicrosoftDynamicsAX_baseline'       WHEN db_name(database_id) LIKE '%MicrosoftDynamicsAX%' THEN 'MicrosoftDynamicsAX'       WHEN db_name(database_id) = 'master' THEN 'master'       WHEN db_name(database_id) = 'msdb' THEN 'msdb'       WHEN db_name(database_id) = 'tempdb' THEN 'tempdb'       WHEN db_name(database_id) = 'model' THEN 'model'       WHEN db_name(database_id) LIKE '%SharePoint_Config%' THEN 'SharePoint_Config'       WHEN db_name(database_id) LIKE '%SharePoint_AdminContent%' THEN 'SharePoint_AdminContent'       WHEN db_name(database_id) LIKE '%AppManagement%' THEN 'AppManagement'       WHEN db_name(database_id) LIKE '%Bdc_Service_DB%' THEN 'Bdc_Service_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_DB%' THEN 'Search_Service_Application_DB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_AnalyticsReportingStoreDB%' THEN 'Search_Service_Application_AnalyticsReportingStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_CrawlStoreDB%' THEN 'Search_Service_Application_CrawlStoreDB'       WHEN db_name(database_id) LIKE '%Search_Service_Application_LinkStoreDB%' THEN 'Search_Service_Application_LinkStoreDB'       WHEN db_name(database_id) LIKE '%Secure_Store_Service_DB%' THEN 'Secure_Store_Service_DB'       WHEN db_name(database_id) LIKE '%SharePoint_Logging%' THEN 'SharePoint_Logging'       WHEN db_name(database_id) LIKE '%SettingsServiceDB%' THEN 'SettingsServiceDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_ProfileDB%' THEN 'User Profile Service Application_ProfileDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SyncDB%' THEN 'User Profile Service Application_SyncDB'       WHEN db_name(database_id) LIKE '%User Profile Service Application_SocialDB%' THEN 'User Profile Service Application_SocialDB'       WHEN db_name(database_id) LIKE '%WordAutomationServices%' THEN 'WordAutomationServices'       WHEN db_name(database_id) LIKE '%Managed Metadata Service Application_Metadata%' THEN 'Managed Metadata Service Application_Metadata'       WHEN db_name(database_id) LIKE '%SharePoint Translation Services%' THEN 'SharePoint Translation Services'       WHEN db_name(database_id) LIKE '%ProjectWebApp%' THEN 'ProjectWebApp'       WHEN db_name(database_id) LIKE '%DefaultPowerPivotServiceApplicationDB%' THEN 'DefaultPowerPivotServiceApplicationDB'       WHEN db_name(database_id) LIKE '%PerformancePoint Service%' THEN 'PerformancePoint Service'       WHEN db_name(database_id) LIKE '%SessionStateService%' THEN 'SessionStateService'       WHEN db_name(database_id) = 'SSISDB' THEN 'SSISDB'       WHEN db_name(database_id) = 'DQS_MAIN' THEN 'DQS_MAIN'       ELSE 'Other'       END AS default_database_class       FROM sys.database_recovery_status WITH(nolock)     ",1,1,0,23,0,4
"SELECT (select value from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDop], (select value_for_secondary from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDopForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimation], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimationForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffing], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffingForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixes], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixesForSecondary]",1,0,1,393,0,3
"       select db_id() AS database_id,       ISNULL(AVG(convert(decimal(10,2),(100 *((cs2.[rowsin_deltastore_count] *1.0) /       ((CASE WHEN  cs1.[total_rows_count] = 0 THEN 1 ELSE cs1.[total_rows_count] END)* 1.0))))),0)       as [percent_open_deltastore]  from       (select object_id, index_id, SUM(total_rows) as [total_rows_count] from sys.dm_db_column_store_row_group_physical_stats       group by object_id, index_id) as  cs1       join       (select object_id, index_id, SUM(total_rows) as [rowsin_deltastore_count]       from sys.dm_db_column_store_row_group_physical_stats where state = 1 group by object_id, index_id) as cs2       on cs1.object_id = cs2.object_id and cs1.index_id = cs2.index_id     ",1,1,0,7,0,3
"SELECT  TOP 30 d.[name] FROM    sys.databases d WITH(nolock) 	   INNER JOIN sys.master_files mf WITH(nolock) 			  ON mf.database_id = d.database_id  	   LEFT OUTER JOIN sys.database_mirroring dm WITH(nolock) 			  ON dm.database_id = d.database_id 	   LEFT OUTER JOIN sys.dm_hadr_database_replica_states hadr WITH(nolock) 			  ON hadr.[database_id] = d.[database_id] WHERE d.[state] NOT BETWEEN 1 AND 6 -- online only AND d.[user_access] NOT IN (1, 2) -- multi user AND d.[source_database_id] IS NULL -- not snapshot AND d.[name] NOT IN ('master', 'tempdb', 'model', 'msdb') -- not system AND ISNULL(dm.[mirroring_role], 1) = 1 -- either principal or not mirrored AND d.[is_in_standby] = 0 -- not standby AND DATABASEPROPERTYEX(d.[name], 'Collation') IS NOT NULL -- started AND ISNULL(hadr.[database_state], 0) = 0 -- online in HADR GROUP BY d.[name]  ORDER BY SUM(mf.size) DESC -- sampling using size ",1,1,0,93,0,1
"       SELECT db_id() AS database_id,       COUNT_BIG(*) AS [NumExternalTables],       MAX([NumColumns]) AS [MaxNumColumns],       MIN([NumColumns]) AS [MinNumColumns],       AVG([NumColumns]) AS [AvgNumColumns],       MAX([MaxRowWidth]) AS [MaxFullRowWidth],       MIN([MaxRowWidth]) AS [MinFullRowWidth],       AVG([MaxRowWidth]) AS [AvgFullRowWidth]       FROM ( SELECT COUNT_BIG(*) AS [NumColumns],       SUM(CASE WHEN max_length > 0 THEN max_length ELSE 0 END) AS [MaxRowWidth]       FROM sys.tables t WITH(nolock) INNER JOIN sys.columns c WITH(nolock) ON t.object_id = c.object_id       WHERE t.is_external=1       GROUP BY t.object_id ) S     ",1,1,0,55,0,3
"       select db_id() AS database_id, ISNULL(AVG(100 *((cs2.[open_deltastore_count] * 1.0) /       ((CASE WHEN  cs1.[total_row_group_count] = 0 THEN 1 ELSE cs1.[total_row_group_count] END)* 1.0))),0) as [percent_open_deltastore]  from       (select object_id, index_id, COUNT_BIG(*) as [total_row_group_count] from sys.column_store_row_groups       group by object_id, index_id) as  cs1       join       (select object_id, index_id, COUNT_BIG(*) as [open_deltastore_count], AVG(total_rows) as [avg_rows_in_deltastore]       from sys.column_store_row_groups where state = 1 group by object_id, index_id) as cs2       on cs1.object_id = cs2.object_id and cs1.index_id = cs2.index_id     ",1,1,0,7,0,3
"       SELECT         DB_ID() AS database_id,         COUNT_BIG(*) AS TotalNumberOfClassifiedColumns,         COUNT_BIG(DISTINCT Totals.major_id) AS TotalNumberOfClassifiedTables,         COUNT_BIG(DISTINCT Totals.information_type_name) AS TotalNumberOfUniqueInformationTypes,         COUNT_BIG(DISTINCT Totals.sensitivity_label_name) AS TotalNumberOfUniqueSenstivityLabels       FROM (SELECT         C1.major_id,         C1.minor_id,         C1.information_type_name,         C2.sensitivity_label_name       FROM (SELECT         major_id,         minor_id,         value AS information_type_name       FROM sys.extended_properties       WHERE NAME = 'sys_information_type_name') C1       FULL OUTER JOIN (SELECT         major_id,         minor_id,         value AS sensitivity_label_name       FROM sys.extended_properties       WHERE NAME = 'sys_sensitivity_label_name') C2         ON (C1.major_id = C2.major_id AND C1.minor_id = C2.minor_id)) AS Totals     ",1,1,0,11,0,3
"(@P1 nvarchar(9),@P2 nvarchar(27))SELECT replace(convert(varchar, s.backup_start_date,111),'/','') + replace(convert(varchar, s.backup_start_date,108),':',''), replace(convert(varchar, s.backup_finish_date,111),'/','') + replace(convert(varchar, s.backup_finish_date,108),':',''), DATEDIFF(second,'1970-01-01 00:00:00',s.backup_finish_date),isnull(cast(s.first_lsn as varchar(25)),''),isnull(cast(s.last_lsn as varchar(25)),''),isnull(cast(s.checkpoint_lsn as varchar(25)),''),isnull(cast(s.database_backup_lsn as varchar(25)),''),isnull(cast(s.differential_base_lsn as varchar(25)),'') FROM msdb.dbo.backupset s inner join msdb.dbo.backupmediafamily m ON s.media_set_id = m.media_set_id WHERE s.database_name = @P1 AND m.physical_device_name = @P2 ORDER BY s.backup_finish_date",0,0,0,104,0,1
"   USE [master]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [tempdb]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [model]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [msdb]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [LUCENTGRC]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;",0,0,0,48,0,0
"       WITH COL_VAL(object_id,EncryptedColumns,AllowEnclaveComputations) AS       (SELECT object_id,       COUNT_BIG(*) AS EncryptedColumns,       max(M.allow_enclave_computations) AS AllowEnclaveComputations       FROM  sys.columns C WITH(nolock) inner join sys.column_encryption_key_values V ON V.column_encryption_key_id = C.column_encryption_key_id       JOIN sys.column_master_keys M ON M.column_master_key_id = V.column_master_key_id       WHERE C.column_encryption_key_id IS NOT NULL       GROUP BY object_id       HAVING COUNT(DISTINCT(V.column_encryption_key_id)) > 0)       SELECT       db_id() AS database_id,       COL_VAL.*,       P.rows       FROM COL_VAL join sys.partitions P WITH(nolock) ON COL_VAL.object_id = P.object_id     ",0,0,0,32,0,2
"       SELECT SUM(max_readers) AS number_of_queue_readers       , db_id() AS database_id       FROM sys.service_queues WITH(nolock)     ",0,0,0,40,0,2
"       SELECT DB_ID() AS database_id,       is_schema_bound,       COUNT_BIG(*) AS RLSSecurityPoliciesCount       FROM sys.security_policies WITH(nolock)       GROUP BY is_schema_bound     ",0,0,0,50,0,2
"       select       group_id,       replica_id,       availability_mode,       failover_mode,       primary_role_allow_connections,       secondary_role_allow_connections,       LEN(ISNULL(read_only_routing_url, '')) as read_only_routing_url_length,       seeding_mode,       session_timeout       from sys.availability_replicas WITH(nolock) where group_id in       (select group_id from sys.dm_hadr_availability_replica_states WITH(nolock) where is_local = 1 and role = 1)     ",0,0,0,18,0,2
"       SELECT pr.type PrincipalType,       pr.default_language_name DefaultLanguageName,       COUNT_BIG(DISTINCT pr.principal_id) PrincipalCount       FROM sys.server_principals AS pr       GROUP BY       pr.type, pr.default_language_name     ",0,0,0,125,0,2
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 43 AND c.user_type_id = 43 -- only datetimeoffset columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetimeoffsetCols], db_id() AS database_id       FROM CTE     ",0,0,0,179,0,2
"       SELECT COUNT_BIG(*) AS [NumOfMemoryOptimizedNDTs], db_id() AS database_id FROM sys.tables WITH(nolock) WHERE is_memory_optimized=1 AND durability=1     ",0,0,0,49,0,2
"       select cntr_value as merge_policy_evaluation       from sys.dm_os_performance_counters WITH(nolock)       where       object_name like '%columnstore%' and       counter_name ='Total Merge Policy Evaluations' and       instance_name = '_Total'     ",0,0,0,0,0,2
"SELECT (select value from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDop], (select value_for_secondary from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDopForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimation], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimationForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffing], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffingForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixes], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixesForSecondary]",0,0,0,372,0,2
"       DECLARE @ConfigDefault TABLE (       Name NVARCHAR(35) PRIMARY KEY,       DefaultValue SQL_VARIANT       );        INSERT INTO @ConfigDefault (Name, DefaultValue)       VALUES ('access check cache bucket count',0)       ,('access check cache quota',0)       ,('Ad Hoc Distributed Queries',0)       ,('affinity I/O mask',0)       ,('affinity mask',0)       ,('affinity64 I/O mask',0)       ,('affinity64 mask',0)       ,('Agent XPs',1)       ,('allow polybase export',0)       ,('allow updates',0)       ,('awe enabled',0)       ,('backup compression default',0)       ,('blocked process threshold (s)',0)       ,('c2 audit mode',0)       ,('clr enabled',0)       ,('common criteria compliance enabled',0)       ,('cost threshold for parallelism',5)       ,('cross db ownership chaining',0)       ,('cursor threshold',-1)       ,('Database Mail XPs',0)       ,('default full-text language',1033)       ,('default language',0)       ,('default trace enabled',1)       ,('disallow results from triggers',0)       ,('EKM provider enabled',0)       ,('external scripts enabled',0)       ,('filestream access level',0)       ,('fill factor (%)',0)       ,('ft crawl bandwidth (max)',100)       ,('ft crawl bandwidth (min)',0)       ,('ft notify bandwidth (max)',100)       ,('ft notify bandwidth (min)',0)       ,('hadoop connectivity',0)       ,('index create memory (KB)',0)       ,('in-doubt xact resolution',0)       ,('lightweight pooling',0)       ,('locks',0)       ,('max degree of parallelism',0)       ,('max full-text crawl range',4)       ,('max server memory (MB)',2147483647)       ,('max text repl size (B)',65536)       ,('max worker threads',0)       ,('media retention',0)       ,('min memory per query (KB)',1024)       ,('min server memory (MB)',0)       ,('nested triggers',1)       ,('network packet size (B)',4096)       ,('Ole Automation Procedures',0)       ,('open objects',0)       ,('optimize for ad hoc workloads',0)       ,('PH timeout (s)',60)       ,('polybase network encryption',1)       ,('precompute rank',0)       ,('priority boost',0)       ,('query governor cost limit',0)       ,('query wait (s)',-1)       ,('recovery interval (min)',0)       ,('remote access',1)       ,('remote admin connections',0)       ,('remote login timeout (s)',10) --20       ,('remote proc trans',0)       ,('remote query timeout (s)',600)       ,('Replication XPs',0)       ,('scan for startup procs',0)       ,('server trigger recursion',1)       ,('set working set size',0)       ,('show advanced options',0)       ,('SMO and DMO XPs',1)       ,('SQL Mail XPs',0)       ,('transform noise words',0)       ,('two digit year cutoff',2049)       ,('user connections',0)       ,('user options',0)       ,('xp_cmdshell',0)       ,('column encryption enclave type',0);        SELECT       c.name ConfigName,       c.value ValueSet,       c.value_in_use ValueInUse,       d.DefaultValue DefaultValue       FROM sys.configurations c WITH(nolock)       INNER JOIN @ConfigDefault d ON c.name = d.Name       WHERE       c.value != c.value_in_use       OR c.value_in_use != d.DefaultValue;     ",0,0,0,315,0,2
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info;",0,0,0,44,0,0
"       SELECT replica_id, group_id, is_local, role, operational_state, recovery_health, synchronization_health, connected_state, last_connect_error_number, last_connect_error_timestamp FROM sys.dm_hadr_availability_replica_states WITH(nolock)     ",0,0,0,14,0,2
"       select count_big(*) AS [XTPAlwaysOnAG],       isnull(sum(ar.availability_mode),0) AS [XTPAlwaysOnAGSync], db_id() AS database_id       from sys.databases d WITH (NOLOCK)       join sys.availability_databases_cluster adb WITH (NOLOCK)       on d.group_database_id=adb.group_database_id       join sys.availability_replicas ar  WITH (NOLOCK)       on d.replica_id=ar.replica_id       where database_id=db_id() and exists (select * from sys.data_spaces  WITH (NOLOCK) where type='FX')     ",0,0,0,4,0,0
"       SELECT AVG(cells_per_object) AS CellsPerObjectAvg       , db_id() AS database_id       FROM sys.spatial_index_tessellations WITH(nolock)     ",0,0,0,204,0,2
"CREATE PROCEDURE sp_maintplan_open_logentry     @plan_id       UNIQUEIDENTIFIER,     @subplan_id       UNIQUEIDENTIFIER,        @start_time       DATETIME            = NULL,     @task_detail_id  UNIQUEIDENTIFIER    = NULL OUTPUT AS BEGIN     --Set defaults    IF (@start_time IS NULL)    BEGIN       SELECT @start_time = GETDATE()    END     SELECT @task_detail_id = NEWID()     --Insert a new record into sysmaintplan_log table    INSERT INTO msdb.dbo.sysmaintplan_log(task_detail_id, plan_id, subplan_id, start_time)     VALUES(@task_detail_id, @plan_id, @subplan_id, @start_time)     RETURN (@@ERROR) END ",0,0,0,4,1,8
"       SELECT DB_ID() AS database_id, COUNT_BIG(*) as MemoryOptimizedTriggerCount       FROM sys.sql_modules m WITH(nolock) JOIN sys.triggers t WITH(nolock) ON m.object_id=t.object_id       WHERE uses_native_compilation=1     ",0,0,0,50,0,2
"       SELECT db_id() AS database_id,       CASE       WHEN total_rows < 10000 THEN '< 10k'       WHEN total_rows < 100000 THEN '>= 10K and < 100K'       WHEN total_rows > 100000 THEN '> 100K'       END DeltaStoresCategory       ,COUNT_BIG(*) as [DeltaStoresCount]       FROM sys.dm_db_column_store_row_group_physical_stats       WHERE STATE = 1 AND  created_time < DATEADD(day, -1, GETDATE())       GROUP BY       CASE       WHEN total_rows < 10000 THEN '< 10k'       WHEN total_rows < 100000 THEN '>= 10K and < 100K'       WHEN total_rows > 100000 THEN '> 100K'       END     ",0,0,0,20,0,2
"       SELECT db_id() AS database_id, ISNULL(AVG(100*(((total_rows - ISNULL(deleted_rows,0)) *1.0)/       ISNULL(((CASE WHEN total_rows = 0 THEN 1 ELSE total_rows END) * 1.0),1))), 0) AS PercentFull       FROM sys.column_store_row_groups     ",0,0,0,15,0,2
"CREATE PROCEDURE [dbo].[sp_ssis_getpackage]   @name sysname,   @folderid uniqueidentifier AS   DECLARE @sid varbinary(85)   DECLARE @isencrypted bit   DECLARE @readrolesid varbinary(85)   DECLARE @readrole nvarchar(128)   --// Check security, if the row exists   SELECT @sid = [ownersid], @readrolesid = [readrolesid] FROM sysssispackages WHERE [name] = @name AND [folderid] = @folderid   IF @sid IS NOT NULL   BEGIN       IF @readrolesid IS NOT NULL       BEGIN           SELECT @readrole = [name] FROM sys.database_principals WHERE [type] = 'R' AND [sid] = @readrolesid           IF @readrole IS NULL SET @readrole = 'db_ssisadmin'       END       IF @readrole IS NOT NULL       BEGIN           IF (IS_MEMBER(@readrole)<>1) AND (IS_MEMBER('db_ssisadmin')<>1) AND (IS_SRVROLEMEMBER('sysadmin')<>1)           BEGIN               IF (IS_MEMBER('db_ssisltduser')<>1) OR (@sid<>SUSER_SID())               BEGIN                   RAISERROR (14307, -1, -1, @name)                   RETURN 1  -- Failure               END           END       END       ELSE       BEGIN           IF (IS_MEMBER('db_ssisadmin')<>1) AND (IS_SRVROLEMEMBER('sysadmin')<>1) AND (IS_MEMBER('db_ssisoperator')<>1)           BEGIN               IF (IS_MEMBER('db_ssisltduser')<>1) OR (@sid<>SUSER_SID())               BEGIN                   RAISERROR (14586, -1, -1, @name)                   RETURN 1  -- Failure               END           END       END   END    SELECT       packagedata   FROM       sysssispackages   WHERE       [name] = @name AND       [folderid] = @folderid ",0,0,0,10,0,7
"       SELECT       ISNULL(sum(memory_allocated_for_table_kb+memory_allocated_for_indexes_kb) ,0) AS total_memory_allocated_for_user_data_kb, db_id() AS database_id       FROM sys.dm_db_xtp_table_memory_stats WITH(nolock)     ",0,0,0,18,0,1
"       select COUNT_BIG(*) AS [XTPRGUsageCount],       isnull(sum(rp.max_memory_kb), 0) as [XTPRGMaxMemoryKB],       isnull(sum(rp.max_memory_percent), 0) AS [XTPRGMaxMemoryPercent], db_id() AS database_id       from sys.databases d WITH(nolock) join sys.dm_resource_governor_resource_pools rp WITH(nolock) on d.resource_pool_id=rp.pool_id       where database_id=db_id() and isnull(resource_pool_id, 2) > 2 and exists (select * from sys.data_spaces WITH(nolock) where type='FX')     ",0,0,0,4,0,0
"       select case       when COUNT_BIG(*)>0 then 1       else 0       End AS [NumDBsWithSpatialIndexes], db_id() AS database_id       from sys.spatial_index_tessellations WITH(nolock)     ",0,0,0,192,0,1
"         declare @HkeyLocal nvarchar(18)         declare @ServicesRegPath nvarchar(34)         declare @SqlServiceRegPath sysname         declare @BrowserServiceRegPath sysname         declare @MSSqlServerRegPath nvarchar(31)         declare @InstanceNamesRegPath nvarchar(59)         declare @InstanceRegPath sysname         declare @SetupRegPath sysname         declare @NpRegPath sysname         declare @TcpRegPath sysname         declare @RegPathParams sysname         declare @FilestreamRegPath sysname          select @HkeyLocal=N'HKEY_LOCAL_MACHINE'          -- Instance-based paths         select @MSSqlServerRegPath=N'SOFTWARE\Microsoft\MSSQLServer'         select @InstanceRegPath=@MSSqlServerRegPath + N'\MSSQLServer'         select @FilestreamRegPath=@InstanceRegPath + N'\Filestream'         select @SetupRegPath=@MSSqlServerRegPath + N'\Setup'         select @RegPathParams=@InstanceRegPath+'\Parameters'          -- Services         select @ServicesRegPath=N'SYSTEM\CurrentControlSet\Services'         select @SqlServiceRegPath=@ServicesRegPath + N'\MSSQLSERVER'         select @BrowserServiceRegPath=@ServicesRegPath + N'\SQLBrowser'          -- InstanceId setting         select @InstanceNamesRegPath=N'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL'          -- Network settings         select @NpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Np'         select @TcpRegPath=@InstanceRegPath + N'\SuperSocketNetLib\Tcp'                  declare @SmoAuditLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'AuditLevel', @SmoAuditLevel OUTPUT                  declare @NumErrorLogs int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'NumErrorLogs', @NumErrorLogs OUTPUT                  declare @SmoLoginMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'LoginMode', @SmoLoginMode OUTPUT                  declare @SmoMailProfile nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'MailAccountName', @SmoMailProfile OUTPUT                  declare @BackupDirectory nvarchar(512)         if 1=isnull(cast(SERVERPROPERTY('IsLocalDB') as bit), 0)         select @BackupDirectory=cast(SERVERPROPERTY('instancedefaultdatapath') as nvarchar(512))         else         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'BackupDirectory', @BackupDirectory OUTPUT                  declare @SmoPerfMonMode int         exec master.dbo.xp_instance_regread @HkeyLocal, @InstanceRegPath, N'Performance', @SmoPerfMonMode OUTPUT          if @SmoPerfMonMode is null         begin         set @SmoPerfMonMode = 1000         end                  declare @InstallSqlDataDir nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLDataRoot', @InstallSqlDataDir OUTPUT                  declare @MasterPath nvarchar(512)         declare @LogPath nvarchar(512)         declare @ErrorLog nvarchar(512)         declare @ErrorLogPath nvarchar(512)         declare @Slash varchar = convert(varchar, serverproperty('PathSeparator'))         select @MasterPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'master'         select @LogPath=substring(physical_name, 1, len(physical_name) - charindex(@Slash, reverse(physical_name))) from master.sys.database_files where name=N'mastlog'         select @ErrorLog=cast(SERVERPROPERTY(N'errorlogfilename') as nvarchar(512))         select @ErrorLogPath=IIF(@ErrorLog IS NULL, N'', substring(@ErrorLog, 1, len(@ErrorLog) - charindex(@Slash, reverse(@ErrorLog))))                  declare @SmoRoot nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @SmoRoot OUTPUT                  declare @ServiceStartMode int         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'Start', @ServiceStartMode OUTPUT                  declare @ServiceAccount nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SqlServiceRegPath, N'ObjectName', @ServiceAccount OUTPUT                  declare @NamedPipesEnabled int         exec master.dbo.xp_instance_regread @HkeyLocal, @NpRegPath, N'Enabled', @NamedPipesEnabled OUTPUT                  declare @TcpEnabled int         EXEC master.sys.xp_instance_regread @HkeyLocal, @TcpRegPath, N'Enabled', @TcpEnabled OUTPUT                  declare @InstallSharedDirectory nvarchar(512)         EXEC master.sys.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLPath', @InstallSharedDirectory OUTPUT                  declare @SqlGroup nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @SetupRegPath, N'SQLGroup', @SqlGroup OUTPUT                  declare @FilestreamLevel int         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'EnableLevel', @FilestreamLevel OUTPUT                  declare @FilestreamShareName nvarchar(512)         exec master.dbo.xp_instance_regread @HkeyLocal, @FilestreamRegPath, N'ShareName', @FilestreamShareName OUTPUT                  declare @cluster_name nvarchar(128)         declare @quorum_type tinyint         declare @quorum_state tinyint         BEGIN TRY         SELECT @cluster_name = cluster_name,         @quorum_type = quorum_type,         @quorum_state = quorum_state         FROM sys.dm_hadr_cluster         END TRY         BEGIN CATCH         --Querying this DMV using a contained auth connection throws error 15562 (Module is untrusted)         --because of lack of trustworthiness by the server. This is expected so we just leave the         --values as default         IF(ERROR_NUMBER() NOT IN (297,300, 15562))         BEGIN         THROW         END         END CATCH         SELECT @SmoAuditLevel AS [AuditLevel], ISNULL(@NumErrorLogs, -1) AS [NumberOfLogFiles], (case when @SmoLoginMode < 3 then @SmoLoginMode else 9 end) AS [LoginMode], ISNULL(@SmoMailProfile,N'') AS [MailProfile], @BackupDirectory AS [BackupDirectory], @SmoPerfMonMode AS [PerfMonMode], ISNULL(@InstallSqlDataDir,N'') AS [InstallDataDirectory], CAST(@@SERVICENAME AS sysname) AS [ServiceName], @ErrorLogPath AS [ErrorLogPath], @SmoRoot AS [RootDirectory], CAST(case when 'a' <> 'A' then 1 else 0 end AS bit) AS [IsCaseSensitive], @@MAX_PRECISION AS [MaxPrecision], CAST(FULLTEXTSERVICEPROPERTY('IsFullTextInstalled') AS bit) AS [IsFullTextInstalled], SERVERPROPERTY(N'ProductVersion') AS [VersionString], CAST(SERVERPROPERTY(N'Edition') AS sysname) AS [Edition], CAST(SERVERPROPERTY(N'ProductLevel') AS sysname) AS [ProductLevel], CAST(ISNULL(SERVERPROPERTY(N'ProductUpdateLevel'), N'') AS sysname) AS [ProductUpdateLevel], CAST(SERVERPROPERTY('IsSingleUser') AS bit) AS [IsSingleUser], CAST(SERVERPROPERTY('EngineEdition') AS int) AS [EngineEdition], convert(sysname, serverproperty(N'collation')) AS [Collation], CAST(ISNULL(SERVERPROPERTY('IsClustered'), 0) AS bit) AS [IsClustered], CAST(ISNULL(SERVERPROPERTY(N'MachineName'), N'') AS sysname) AS [NetName], ISNULL(SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS'),N'') AS [ComputerNamePhysicalNetBIOS], ISNULL(@ServiceStartMode,2) AS [ServiceStartMode], @LogPath AS [MasterDBLogPath], @MasterPath AS [MasterDBPath], SERVERPROPERTY('instancedefaultdatapath') AS [DefaultFile], SERVERPROPERTY('instancedefaultlogpath') AS [DefaultLog], SERVERPROPERTY(N'ResourceVersion') AS [ResourceVersionString], SERVERPROPERTY(N'ResourceLastUpdateDateTime') AS [ResourceLastUpdateDateTime], SERVERPROPERTY(N'CollationID') AS [CollationID], SERVERPROPERTY(N'ComparisonStyle') AS [ComparisonStyle], SERVERPROPERTY(N'SqlCharSet') AS [SqlCharSet], SERVERPROPERTY(N'SqlCharSetName') AS [SqlCharSetName], SERVERPROPERTY(N'SqlSortOrder') AS [SqlSortOrder], SERVERPROPERTY(N'SqlSortOrderName') AS [SqlSortOrderName], SERVERPROPERTY(N'BuildClrVersion') AS [BuildClrVersionString], ISNULL(@ServiceAccount,N'') AS [ServiceAccount], CAST(@NamedPipesEnabled AS bit) AS [NamedPipesEnabled], CAST(@TcpEnabled AS bit) AS [TcpEnabled], ISNULL(@InstallSharedDirectory,N'') AS [InstallSharedDirectory], ISNULL(suser_sname(sid_binary(ISNULL(@SqlGroup,N''))),N'') AS [SqlDomainGroup], case when 1=msdb.dbo.fn_syspolicy_is_automation_enabled() and exists (select * from msdb.dbo.syspolicy_system_health_state  where target_query_expression_with_id like 'Server%' ) then 1 else 0 end AS [PolicyHealthState], @FilestreamLevel AS [FilestreamLevel], ISNULL(@FilestreamShareName,N'') AS [FilestreamShareName], -1 AS [TapeLoadWaitTime], CAST(SERVERPROPERTY(N'IsHadrEnabled') AS bit) AS [IsHadrEnabled], SERVERPROPERTY(N'HADRManagerStatus') AS [HadrManagerStatus], ISNULL(@cluster_name, '') AS [ClusterName], ISNULL(@quorum_type, 4) AS [ClusterQuorumType], ISNULL(@quorum_state, 3) AS [ClusterQuorumState], SUSER_SID(@ServiceAccount, 0) AS [ServiceAccountSid], CAST(SERVERPROPERTY('IsPolyBaseInstalled') AS bit) AS [IsPolyBaseInstalled], CAST(         serverproperty(N'Servername')        AS sysname) AS [Name], CAST(         ISNULL(serverproperty(N'instancename'),N'')        AS sysname) AS [InstanceName], CAST(0x0001 AS int) AS [Status], SERVERPROPERTY('PathSeparator') AS [PathSeparator], 0 AS [IsContainedAuthentication], CAST(null AS int) AS [ServerType]",0,0,0,5,0,3
"SELECT (select value from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDop], (select value_for_secondary from sys.database_scoped_configurations as dsc where dsc.name = 'MAXDOP') AS [MaxDopForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimation], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'LEGACY_CARDINALITY_ESTIMATION') AS [LegacyCardinalityEstimationForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffing], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'PARAMETER_SNIFFING') AS [ParameterSniffingForSecondary], (select value from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixes], (select ISNULL(value_for_secondary, 2) from sys.database_scoped_configurations as dsc where dsc.name = 'QUERY_OPTIMIZER_HOTFIXES') AS [QueryOptimizerHotfixesForSecondary]",0,0,0,372,0,1
"       SELECT COUNT_BIG(*) AS [XTPCheckpointFileCount], db_id() AS database_id FROM sys.dm_db_xtp_checkpoint_files WITH(nolock)     ",0,0,0,16,0,1
"       -- In the following query, the EKM provider type (cryptographic provider or not) and the asymmetric key algorithm for TDE are collected.       SELECT provider_type, algorithm_desc, COUNT_BIG(*) AS key_count FROM sys.asymmetric_keys WITH(nolock) GROUP BY provider_type, algorithm_desc     ",0,0,0,14,0,1
"       SELECT COUNT_BIG(*) AS number_of_queues       , db_id() AS database_id       FROM sys.service_queues WITH(nolock)       WHERE is_ms_shipped != 1     ",0,0,0,54,0,1
"(@_msparam_0 nvarchar(4000))SELECT dtb.is_ansi_null_default_on AS [AnsiNullDefault], dtb.is_ansi_nulls_on AS [AnsiNullsEnabled], dtb.is_ansi_padding_on AS [AnsiPaddingEnabled], dtb.is_ansi_warnings_on AS [AnsiWarningsEnabled], dtb.is_arithabort_on AS [ArithmeticAbortEnabled], dtb.is_auto_shrink_on AS [AutoShrink], dtb.is_cursor_close_on_commit_on AS [CloseCursorsOnCommitEnabled], dtb.is_concat_null_yields_null_on AS [ConcatenateNullYieldsNull], dtb.is_numeric_roundabort_on AS [NumericRoundAbortEnabled], dtb.is_quoted_identifier_on AS [QuotedIdentifiersEnabled], dtb.is_read_only AS [ReadOnly], dtb.is_recursive_triggers_on AS [RecursiveTriggersEnabled], dtb.user_access AS [UserAccess], dtb.is_db_chaining_on AS [DatabaseOwnershipChaining], dtb.is_auto_update_stats_async_on AS [AutoUpdateStatisticsAsync], dtb.is_date_correlation_on AS [DateCorrelationOptimization], dtb.is_trustworthy_on AS [Trustworthy], dtb.name AS [Name], dtb.database_id AS [ID], dtb.create_date AS [CreateDate], dtb.is_auto_create_stats_on AS [AutoCreateStatisticsEnabled], dtb.is_auto_update_stats_on AS [AutoUpdateStatisticsEnabled], dtb.is_parameterization_forced AS [IsParameterizationForced], dtb.is_read_committed_snapshot_on AS [IsReadCommittedSnapshotOn], CAST(isnull(dtb.source_database_id, 0) AS bit) AS [IsDatabaseSnapshot], ISNULL(DB_NAME(dtb.source_database_id), N'') AS [DatabaseSnapshotBaseName], dtb.is_fulltext_enabled AS [IsFullTextEnabled], dtb.service_broker_guid AS [ServiceBrokerGuid], dtb.snapshot_isolation_state AS [SnapshotIsolationState], (dtb.is_published*1+dtb.is_subscribed*2+dtb.is_merge_published*4) AS [ReplicationOptions], dtb.is_local_cursor_default AS [LocalCursorsDefault], dtb.page_verify_option AS [PageVerify], dtb.recovery_model AS [RecoveryModel], dtb.is_auto_close_on AS [AutoClose], dtb.is_broker_enabled AS [BrokerEnabled], ISNULL(suser_sname(dtb.owner_sid),'') AS [Owner], ISNULL(dtb.log_reuse_wait,0) AS [LogReuseWaitStatus], drs.recovery_fork_guid AS [RecoveryForkGuid], drs.database_guid AS [DatabaseGuid], CAST((case when drs.last_log_backup_lsn is not null then 1 else 0 end) AS bit) AS [HasFullBackup], CAST(case when dtb.name in ('master','model','msdb','tempdb') then 1 else dtb.is_distributor end AS bit) AS [IsSystemObject], CAST(case when ctb.database_id is null then 0 else 1  end AS bit) AS [ChangeTrackingEnabled], CAST(ISNULL(ctb.is_auto_cleanup_on,0) AS bit) AS [ChangeTrackingAutoCleanUp], ISNULL(ctb.retention_period,0) AS [ChangeTrackingRetentionPeriod], CAST(ISNULL(ctb.retention_period_units,0) AS tinyint) AS [ChangeTrackingRetentionPeriodUnits], dtb.containment AS [ContainmentType], dtb.default_language_lcid AS [DefaultLanguageLcid], dtb.default_language_name AS [DefaultLanguageName], dtb.default_fulltext_language_lcid AS [DefaultFullTextLanguageLcid], ISNULL(dtb.default_fulltext_language_name,N'') AS [DefaultFullTextLanguageName], CAST(dtb.is_nested_triggers_on AS bit) AS [NestedTriggersEnabled], CAST(dtb.is_transform_noise_words_on AS bit) AS [TransformNoiseWords], dtb.two_digit_year_cutoff AS [TwoDigitYearCutoff], dtb.target_recovery_time_in_seconds AS [TargetRecoveryTime], dtb.delayed_durability AS [DelayedDurability], dtb.is_auto_create_stats_incremental_on AS [AutoCreateIncrementalStatisticsEnabled],          case         when dtb.collation_name is null then 0x200         else 0         end |         case         when 1 = dtb.is_in_standby then 0x40         else 0         end |         case dtb.state         when 1 then 0x2         when 2 then 0x8         when 3 then 0x4         when 4 then 0x10         when 5 then 0x100         when 6 then 0x20         else 1         end        AS [Status], CAST(( case LOWER(convert( nvarchar(128), DATABASEPROPERTYEX(dtb.name, 'Updateability'))) when 'read_write' then 1 else 0 end) AS bit) AS [IsUpdateable], CAST(dtb.is_encrypted AS bit) AS [EncryptionEnabled], CAST(dtb.is_honor_broker_priority_on AS bit) AS [HonorBrokerPriority], CAST(         case         when SERVERPROPERTY('EngineEdition') = 6 then cast(1 as bit)         else cast(0 as bit)         end        AS bit) AS [IsSqlDw], CAST(has_dbaccess(dtb.name) AS bit) AS [IsAccessible], ISNULL(fsopt.directory_name , N'') AS [FilestreamDirectoryName], ISNULL(fsopt.non_transacted_access , 0) AS [FilestreamNonTransactedAccess], CAST(dtb.is_remote_data_archive_enabled AS bit) AS [RemoteDataArchiveEnabled], 0 AS [MaxDop], NULL AS [MaxDopForSecondary], 0 AS [LegacyCardinalityEstimation], 2 AS [LegacyCardinalityEstimationForSecondary], 0 AS [ParameterSniffing], 2 AS [ParameterSniffingForSecondary], 0 AS [QueryOptimizerHotfixes], 2 AS [QueryOptimizerHotfixesForSecondary], dtb.catalog_collation_type AS [CatalogCollation], CAST(ISNULL(DATABASEPROPERTYEX(dtb.name, 'lastgoodcheckdbtime'), 0) AS datetime) AS [LastGoodCheckDbTime], dtb.name AS [DatabaseName2], dtb.containment AS [ContainmentType2], dtb.name AS [DatabaseName6] FROM master.sys.databases AS dtb LEFT OUTER JOIN sys.database_recovery_status AS drs ON drs.database_id = dtb.database_id LEFT OUTER JOIN sys.change_tracking_databases AS ctb ON ctb.database_id = dtb.database_id  LEFT OUTER JOIN sys.database_filestream_options AS fsopt ON fsopt.database_id = dtb.database_id WHERE (dtb.name=@_msparam_0)",0,0,0,56,0,1
SELECT dtb.name AS [Name] FROM master.sys.databases AS dtb,0,0,0,39,0,1
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info;",0,0,0,0,0,0
"       SELECT COUNT_BIG(*) AS number_of_enabled_queues       , db_id() AS database_id       FROM sys.service_queues WITH(nolock)       WHERE is_ms_shipped != 1 AND is_receive_enabled = 1 AND is_enqueue_enabled = 1     ",0,0,0,40,0,1
"       DECLARE @ConfigDefault TABLE (       Name NVARCHAR(35) PRIMARY KEY,       DefaultValue SQL_VARIANT       );        INSERT INTO @ConfigDefault (Name, DefaultValue)       VALUES ('access check cache bucket count',0)       ,('access check cache quota',0)       ,('Ad Hoc Distributed Queries',0)       ,('affinity I/O mask',0)       ,('affinity mask',0)       ,('affinity64 I/O mask',0)       ,('affinity64 mask',0)       ,('Agent XPs',1)       ,('allow polybase export',0)       ,('allow updates',0)       ,('awe enabled',0)       ,('backup compression default',0)       ,('blocked process threshold (s)',0)       ,('c2 audit mode',0)       ,('clr enabled',0)       ,('common criteria compliance enabled',0)       ,('cost threshold for parallelism',5)       ,('cross db ownership chaining',0)       ,('cursor threshold',-1)       ,('Database Mail XPs',0)       ,('default full-text language',1033)       ,('default language',0)       ,('default trace enabled',1)       ,('disallow results from triggers',0)       ,('EKM provider enabled',0)       ,('external scripts enabled',0)       ,('filestream access level',0)       ,('fill factor (%)',0)       ,('ft crawl bandwidth (max)',100)       ,('ft crawl bandwidth (min)',0)       ,('ft notify bandwidth (max)',100)       ,('ft notify bandwidth (min)',0)       ,('hadoop connectivity',0)       ,('index create memory (KB)',0)       ,('in-doubt xact resolution',0)       ,('lightweight pooling',0)       ,('locks',0)       ,('max degree of parallelism',0)       ,('max full-text crawl range',4)       ,('max server memory (MB)',2147483647)       ,('max text repl size (B)',65536)       ,('max worker threads',0)       ,('media retention',0)       ,('min memory per query (KB)',1024)       ,('min server memory (MB)',0)       ,('nested triggers',1)       ,('network packet size (B)',4096)       ,('Ole Automation Procedures',0)       ,('open objects',0)       ,('optimize for ad hoc workloads',0)       ,('PH timeout (s)',60)       ,('polybase network encryption',1)       ,('precompute rank',0)       ,('priority boost',0)       ,('query governor cost limit',0)       ,('query wait (s)',-1)       ,('recovery interval (min)',0)       ,('remote access',1)       ,('remote admin connections',0)       ,('remote login timeout (s)',10) --20       ,('remote proc trans',0)       ,('remote query timeout (s)',600)       ,('Replication XPs',0)       ,('scan for startup procs',0)       ,('server trigger recursion',1)       ,('set working set size',0)       ,('show advanced options',0)       ,('SMO and DMO XPs',1)       ,('SQL Mail XPs',0)       ,('transform noise words',0)       ,('two digit year cutoff',2049)       ,('user connections',0)       ,('user options',0)       ,('xp_cmdshell',0)       ,('column encryption enclave type',0);        SELECT       c.name ConfigName,       c.value ValueSet,       c.value_in_use ValueInUse,       d.DefaultValue DefaultValue       FROM sys.configurations c WITH(nolock)       INNER JOIN @ConfigDefault d ON c.name = d.Name       WHERE       c.value != c.value_in_use       OR c.value_in_use != d.DefaultValue;     ",0,0,0,162,2,1
"       IF ((SELECT db_name()) LIKE 'SSISDB%'       AND EXISTS (SELECT TOP 1 1                            FROM INFORMATION_SCHEMA.COLUMNS                            WHERE TABLE_NAME IN ('packages', 'executions')                            AND TABLE_SCHEMA = 'catalog'                            AND COLUMN_NAME IN ('package_id', 'execution_id')                            )       )       BEGIN              SELECT                     (SELECT COUNT(DISTINCT p.[package_id]) AS PackageCount                     FROM [catalog].[packages] p) AS PackageCount,                     (SELECT COUNT(DISTINCT e.[execution_id]) AS ExecutionCount                     FROM [catalog].[executions] e) AS ExecutionCount;       END     ",0,0,0,20,0,1
"(@P1 nvarchar(6))select database_id from sys.databases where name = @P1 ",0,0,0,11,0,0
"       SELECT       ISNULL(sum(allocated_bytes)/1024,0) AS total_memory_allocated_for_system_kb       FROM sys.dm_xtp_system_memory_consumers WITH(nolock)     ",0,0,0,10,0,1
"       SELECT COUNT_BIG(*) AS number_of_routes       , db_id() AS database_id       FROM sys.routes WITH(nolock)     ",0,0,0,13,0,1
"SELECT database_id, type, SUM(CAST(size AS BIGINT))*8 as DatabaseSize FROM sys.master_files WITH(nolock) GROUP BY database_id, type",0,0,0,38,0,1
"       SELECT COUNT_BIG(*) AS number_of_queues_with_retention       , db_id() AS database_id       FROM sys.service_queues WITH(nolock)       WHERE is_retention_enabled = 1     ",0,0,0,40,0,1
"       SELECT COUNT_BIG(*) AS number_of_activated_queues       , db_id() AS database_id       FROM sys.service_queues WITH(nolock)       WHERE is_activation_enabled = 1     ",0,0,0,40,0,1
"       Select       current_enclave_session_count,       current_column_encryption_key_count,       current_memory_size_kb,       total_evicted_session_count       from sys.dm_column_encryption_enclave WITH(nolock)     ",0,0,0,4,0,1
"       SELECT protocol AS [sProtocolId], COUNT_BIG(*) AS [sNumProtocols] FROM master.sys.endpoints WITH(nolock) GROUP BY protocol     ",0,0,0,35,0,1
"       SELECT DB_ID() AS database_id, COUNT_BIG(DISTINCT ic.object_id) as table_count       FROM  sys.index_columns ic WITH(nolock)       INNER JOIN sys.columns col WITH(nolock) ON ic.object_id = col.object_id and ic.column_id = col.column_id       WHERE col.user_type_id = 129 OR col.user_type_id = 130     ",0,0,0,25,0,1
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 41 AND c.user_type_id = 41 -- only time columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumTimeIndices], db_id() AS database_id       FROM CTE     ",0,0,0,31,0,1
"       SELECT COUNT(*) as provider_count, provider FROM sys.servers WITH(nolock) WHERE is_linked=1 GROUP BY provider     ",0,0,0,20,0,1
"       WITH CTE AS (       SELECT DISTINCT i.object_id oid, i.index_id iid       FROM sys.indexes i WITH(nolock)       JOIN sys.index_columns ic WITH(nolock) ON i.object_id = ic.object_id       JOIN sys.columns c WITH(nolock) ON ic.column_id = c.column_id AND c.object_id = i.object_id       WHERE c.system_type_id = 42 AND c.user_type_id = 42 -- only datetime2 columns       AND ic.key_ordinal != 0 -- only key columns       )       SELECT COUNT_BIG(*) AS [NumDatetime2Indices], db_id() AS database_id       FROM CTE     ",0,0,0,37,0,1
"       SELECT COUNT_BIG(*) AS MdsTables       , db_id() AS database_id       FROM INFORMATION_SCHEMA.TABLES WITH(nolock)       WHERE TABLE_TYPE = 'BASE TABLE'       AND TABLE_NAME = 'tblSystem'       AND TABLE_SCHEMA = 'mdm'     ",0,0,0,8,0,1
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info;",0,0,0,72,0,0
"CREATE PROCEDURE sp_sqlagent_has_server_access   @login_name         sysname = NULL,   @job_id             uniqueidentifier = NULL, -- if this is not null, @login_name will be ignored!   @is_sysadmin_member INT     = NULL OUTPUT AS BEGIN   DECLARE @has_server_access BIT   DECLARE @is_sysadmin       BIT   DECLARE @actual_login_name sysname   -- Set only when login_name is actually found. It will be zero when @actual_login_name is (unknown).   DECLARE @login_found BIT   DECLARE @cachedate         DATETIME    SET NOCOUNT ON    SELECT @cachedate = NULL    -- remove expired entries from the cache   DELETE msdb.dbo.syscachedcredentials   WHERE  DATEDIFF(MINUTE, cachedate, GETDATE()) >= 29    -- query the cache   SELECT  @is_sysadmin = is_sysadmin_member,           @has_server_access = has_server_access,           @cachedate = cachedate   FROM    msdb.dbo.syscachedcredentials   WHERE   login_name = @login_name   AND     DATEDIFF(MINUTE, cachedate, GETDATE()) < 29    IF (@cachedate IS NOT NULL)   BEGIN     -- no output variable     IF (@is_sysadmin_member IS NULL)     BEGIN       -- Return result row       SELECT has_server_access = @has_server_access,              is_sysadmin       = @is_sysadmin,              actual_login_name = @login_name       RETURN     END     ELSE     BEGIN       SELECT @is_sysadmin_member = @is_sysadmin       RETURN     END   END -- select from cache    -- Set defaults   SELECT @has_server_access = 0   SELECT @is_sysadmin = 0   SELECT @actual_login_name = FORMATMESSAGE(14205)   SELECT @login_found = 0      -- If @job_id was set, get the current name associated with the job owner sid.   if (@job_id IS NOT NULL)   BEGIN 	SELECT @login_name = dbo.SQLAGENT_SUSER_SNAME(owner_sid) 	FROM msdb.dbo.sysjobs_view 	WHERE @job_id = job_id      -- If the job_id is invalid, return error     IF (@login_name IS NULL)     BEGIN       RETURN 1;     END    END   IF (@login_name IS NULL)   BEGIN     SELECT has_server_access = 1,            is_sysadmin       = IS_SRVROLEMEMBER(N'sysadmin'),            actual_login_name = SUSER_SNAME()     RETURN   END    IF (@login_name LIKE '%\%')   BEGIN     -- Handle the LocalSystem account ('NT AUTHORITY\SYSTEM') as a special case     IF (UPPER(@login_name collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')     BEGIN       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')          SET @login_found = 1       END       ELSE       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')          SET @login_found = 1       END     END     ELSE     BEGIN       -- Check if the NT login has been explicitly denied access       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (loginname = @login_name)                     AND (denylogin = 1)))       BEGIN         SELECT @has_server_access = 0,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (loginname = @login_name)          SET @login_found = 1       END       ELSE       BEGIN         -- declare table variable for storing results         DECLARE @xp_results TABLE         (         account_name      sysname      COLLATE database_default NOT NULL PRIMARY KEY,         type              NVARCHAR(10) COLLATE database_default NOT NULL,         privilege         NVARCHAR(10) COLLATE database_default NOT NULL,         mapped_login_name sysname      COLLATE database_default NOT NULL,         permission_path   sysname      COLLATE database_default NULL         )          -- Call xp_logininfo to determine server access         INSERT INTO @xp_results         EXECUTE master.dbo.xp_logininfo @login_name          IF (SELECT COUNT(*) FROM @xp_results) > 0         BEGIN           SET @has_server_access = 1           SET @login_found = 1         END          SELECT @actual_login_name = mapped_login_name,                @is_sysadmin = CASE UPPER(privilege collate SQL_Latin1_General_CP1_CS_AS)                                 WHEN 'ADMIN' THEN 1                                 ELSE 0                              END         FROM @xp_results       END     END     -- Only cache the NT logins to approximate the behavior of Sql Server and Windows (see bug 323287)     -- update the cache only if something is found     IF  (UPPER(@actual_login_name collate SQL_Latin1_General_CP1_CS_AS) <> '(UNKNOWN)')     BEGIN       -- Procedure starts its own transaction.       BEGIN TRANSACTION;        -- Modify database.       -- use a try catch login to prevent any error when trying       -- to insert/update syscachedcredentials table       -- no need to fail since the job owner has been validated       BEGIN TRY         IF EXISTS (SELECT * FROM msdb.dbo.syscachedcredentials WITH (TABLOCKX) WHERE login_name = @login_name)         BEGIN           UPDATE msdb.dbo.syscachedcredentials           SET    has_server_access = @has_server_access,                 is_sysadmin_member = @is_sysadmin,                 cachedate = GETDATE()           WHERE  login_name = @login_name         END         ELSE         BEGIN           INSERT INTO msdb.dbo.syscachedcredentials(login_name, has_server_access, is_sysadmin_member)           VALUES(@login_name, @has_server_access, @is_sysadmin)         END         END TRY         BEGIN CATCH             -- If an error occurred we want to ignore it         END CATCH          -- The procedure must commit the transaction it started.         COMMIT TRANSACTION;     END    END   ELSE   BEGIN     -- Standard login     IF (EXISTS (SELECT *                 FROM master.dbo.syslogins                 WHERE (loginname = @login_name)))     BEGIN       SELECT @has_server_access = hasaccess,              @is_sysadmin = sysadmin,              @actual_login_name = loginname       FROM master.dbo.syslogins       WHERE (loginname = @login_name)        SET @login_found = 1     END   END    IF (@is_sysadmin_member IS NULL)     -- Return result row     SELECT has_server_access = @has_server_access,            is_sysadmin       = @is_sysadmin,            actual_login_name = @actual_login_name,            login_found       = @login_found   ELSE     -- output variable only     SELECT @is_sysadmin_member = @is_sysadmin END ",0,0,0,4,0,3
"   USE [master]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [tempdb]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [model]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [msdb]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;     USE [LUCENTGRC]     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, 'SpaceUsed') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;",0,0,0,25,2,0
"       SELECT cntr_value AS SqlServerMemory FROM sys.dm_os_performance_counters WITH(nolock) WHERE object_name = 'SQLServer:Memory Manager' AND counter_name = 'Total Server Memory (KB)'     ",0,0,0,4,0,1
"CREATE PROCEDURE sp_sqlagent_has_server_access   @login_name         sysname = NULL,   @job_id             uniqueidentifier = NULL, -- if this is not null, @login_name will be ignored!   @is_sysadmin_member INT     = NULL OUTPUT AS BEGIN   DECLARE @has_server_access BIT   DECLARE @is_sysadmin       BIT   DECLARE @actual_login_name sysname   -- Set only when login_name is actually found. It will be zero when @actual_login_name is (unknown).   DECLARE @login_found BIT   DECLARE @cachedate         DATETIME    SET NOCOUNT ON    SELECT @cachedate = NULL    -- remove expired entries from the cache   DELETE msdb.dbo.syscachedcredentials   WHERE  DATEDIFF(MINUTE, cachedate, GETDATE()) >= 29    -- query the cache   SELECT  @is_sysadmin = is_sysadmin_member,           @has_server_access = has_server_access,           @cachedate = cachedate   FROM    msdb.dbo.syscachedcredentials   WHERE   login_name = @login_name   AND     DATEDIFF(MINUTE, cachedate, GETDATE()) < 29    IF (@cachedate IS NOT NULL)   BEGIN     -- no output variable     IF (@is_sysadmin_member IS NULL)     BEGIN       -- Return result row       SELECT has_server_access = @has_server_access,              is_sysadmin       = @is_sysadmin,              actual_login_name = @login_name       RETURN     END     ELSE     BEGIN       SELECT @is_sysadmin_member = @is_sysadmin       RETURN     END   END -- select from cache    -- Set defaults   SELECT @has_server_access = 0   SELECT @is_sysadmin = 0   SELECT @actual_login_name = FORMATMESSAGE(14205)   SELECT @login_found = 0      -- If @job_id was set, get the current name associated with the job owner sid.   if (@job_id IS NOT NULL)   BEGIN 	SELECT @login_name = dbo.SQLAGENT_SUSER_SNAME(owner_sid) 	FROM msdb.dbo.sysjobs_view 	WHERE @job_id = job_id      -- If the job_id is invalid, return error     IF (@login_name IS NULL)     BEGIN       RETURN 1;     END    END   IF (@login_name IS NULL)   BEGIN     SELECT has_server_access = 1,            is_sysadmin       = IS_SRVROLEMEMBER(N'sysadmin'),            actual_login_name = SUSER_SNAME()     RETURN   END    IF (@login_name LIKE '%\%')   BEGIN     -- Handle the LocalSystem account ('NT AUTHORITY\SYSTEM') as a special case     IF (UPPER(@login_name collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')     BEGIN       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'NT AUTHORITY\SYSTEM')          SET @login_found = 1       END       ELSE       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')))       BEGIN         SELECT @has_server_access = hasaccess,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (UPPER(loginname collate SQL_Latin1_General_CP1_CS_AS) = N'BUILTIN\ADMINISTRATORS')          SET @login_found = 1       END     END     ELSE     BEGIN       -- Check if the NT login has been explicitly denied access       IF (EXISTS (SELECT *                   FROM master.dbo.syslogins                   WHERE (loginname = @login_name)                     AND (denylogin = 1)))       BEGIN         SELECT @has_server_access = 0,                @is_sysadmin = sysadmin,                @actual_login_name = loginname         FROM master.dbo.syslogins         WHERE (loginname = @login_name)          SET @login_found = 1       END       ELSE       BEGIN         -- declare table variable for storing results         DECLARE @xp_results TABLE         (         account_name      sysname      COLLATE database_default NOT NULL PRIMARY KEY,         type              NVARCHAR(10) COLLATE database_default NOT NULL,         privilege         NVARCHAR(10) COLLATE database_default NOT NULL,         mapped_login_name sysname      COLLATE database_default NOT NULL,         permission_path   sysname      COLLATE database_default NULL         )          -- Call xp_logininfo to determine server access         INSERT INTO @xp_results         EXECUTE master.dbo.xp_logininfo @login_name          IF (SELECT COUNT(*) FROM @xp_results) > 0         BEGIN           SET @has_server_access = 1           SET @login_found = 1         END          SELECT @actual_login_name = mapped_login_name,                @is_sysadmin = CASE UPPER(privilege collate SQL_Latin1_General_CP1_CS_AS)                                 WHEN 'ADMIN' THEN 1                                 ELSE 0                              END         FROM @xp_results       END     END     -- Only cache the NT logins to approximate the behavior of Sql Server and Windows (see bug 323287)     -- update the cache only if something is found     IF  (UPPER(@actual_login_name collate SQL_Latin1_General_CP1_CS_AS) <> '(UNKNOWN)')     BEGIN       -- Procedure starts its own transaction.       BEGIN TRANSACTION;        -- Modify database.       -- use a try catch login to prevent any error when trying       -- to insert/update syscachedcredentials table       -- no need to fail since the job owner has been validated       BEGIN TRY         IF EXISTS (SELECT * FROM msdb.dbo.syscachedcredentials WITH (TABLOCKX) WHERE login_name = @login_name)         BEGIN           UPDATE msdb.dbo.syscachedcredentials           SET    has_server_access = @has_server_access,                 is_sysadmin_member = @is_sysadmin,                 cachedate = GETDATE()           WHERE  login_name = @login_name         END         ELSE         BEGIN           INSERT INTO msdb.dbo.syscachedcredentials(login_name, has_server_access, is_sysadmin_member)           VALUES(@login_name, @has_server_access, @is_sysadmin)         END         END TRY         BEGIN CATCH             -- If an error occurred we want to ignore it         END CATCH          -- The procedure must commit the transaction it started.         COMMIT TRANSACTION;     END    END   ELSE   BEGIN     -- Standard login     IF (EXISTS (SELECT *                 FROM master.dbo.syslogins                 WHERE (loginname = @login_name)))     BEGIN       SELECT @has_server_access = hasaccess,              @is_sysadmin = sysadmin,              @actual_login_name = loginname       FROM master.dbo.syslogins       WHERE (loginname = @login_name)        SET @login_found = 1     END   END    IF (@is_sysadmin_member IS NULL)     -- Return result row     SELECT has_server_access = @has_server_access,            is_sysadmin       = @is_sysadmin,            actual_login_name = @actual_login_name,            login_found       = @login_found   ELSE     -- output variable only     SELECT @is_sysadmin_member = @is_sysadmin END ",0,0,0,4,0,1
"       SELECT db_id() AS database_id, COUNT_BIG(*) AS [TVPStoredProcsCount]       FROM sys.types t WITH(nolock)       JOIN sys.parameters p WITH(nolock) ON t.system_type_id = p.system_type_id AND t.user_type_id=p.user_type_id       JOIN sys.objects o WITH(nolock) ON o.object_id = p.object_id       WHERE is_table_type = 1     ",0,0,0,51,0,1
"       select db_id() AS database_id,       name AS automatic_tuning_option_name,       desired_state,       actual_state,       reason       from sys.database_automatic_tuning_options       where desired_state > 0     ",0,0,0,10,0,1
"CREATE PROCEDURE [dbo].[sp_sqlagent_update_jobactivity_requested_date]     @session_id               INT,     @job_id                   UNIQUEIDENTIFIER,     @is_system             TINYINT = 0,     @run_requested_source_id  TINYINT AS BEGIN     IF(@is_system = 1)     BEGIN 		-- TODO:: Call job activity update spec proc 		RETURN     END      -- update sysjobactivity for user jobs     UPDATE [msdb].[dbo].[sysjobactivity]     SET run_requested_date = DATEADD(ms, -DATEPART(ms, GETDATE()),  GETDATE()),         run_requested_source = CONVERT(SYSNAME, @run_requested_source_id),         queued_date = NULL,         start_execution_date = NULL,         last_executed_step_id = NULL,         last_executed_step_date = NULL,         stop_execution_date = NULL,         job_history_id = NULL,         next_scheduled_run_date = NULL     WHERE job_id = @job_id     AND session_id = @session_id END ",0,0,0,6,7,5
select COUNT_BIG(*) AS ReadOnlyRoutingRuleCount from sys.availability_read_only_routing_lists WITH(nolock),0,0,0,3,0,1
"       SELECT       ISNULL(SUM(memory_used_by_table_kb),0) AS total_memory_used_by_tables_kb,       ISNULL(SUM(memory_used_by_indexes_kb),0) AS total_memory_used_by_indexes_kb, db_id() AS database_id       FROM sys.dm_db_xtp_table_memory_stats WITH(nolock)     ",0,0,0,14,0,1
"(@P1 nvarchar(4))select CAST(page_verify_option AS int),CAST(recovery_model AS int) from sys.databases where name = @P1 ",0,0,0,11,0,0
"(@P1 nvarchar(6))select CAST(page_verify_option AS int),CAST(recovery_model AS int) from sys.databases where name = @P1 ",0,0,0,11,0,0
"       SELECT DB_ID() AS database_id, COUNT_BIG(DISTINCT ic.object_id) as table_count       FROM  sys.index_columns ic WITH(nolock)       INNER JOIN sys.columns col WITH(nolock) ON ic.object_id = col.object_id and ic.column_id = col.column_id       WHERE col.system_type_id = 241     ",0,0,0,25,0,1
