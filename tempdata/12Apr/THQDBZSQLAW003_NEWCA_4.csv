"CREATE   PROCEDURE [dbo].[sp_syscollector_purge_collection_logs]     @reference_date datetime = NULL,     @delete_batch_size int = 500 AS BEGIN     SET NOCOUNT ON      -- Security check (role membership)     IF (NOT (ISNULL(IS_MEMBER(N'dc_proxy'), 0) = 1) AND NOT (ISNULL(IS_MEMBER(N'db_owner'), 0) = 1))     BEGIN         RAISERROR(14677, -1, -1, 'dc_proxy')         RETURN(1) -- Failure     END      IF (@reference_date IS NULL)     BEGIN         SET @reference_date = GETDATE()     END          -- An expired log record is any record of a collection set that is older than      -- the reference date minus the collection set's days_until_expiration     CREATE TABLE #purged_log_ids (log_id BIGINT, package_execution_id uniqueidentifier)          -- Identify logs to purge based on following criteria     -- a) limit max batch size      -- b) do not delete last log record that is a root log record for a collection set     INSERT INTO #purged_log_ids     SELECT TOP (@delete_batch_size) log_id, package_execution_id     FROM syscollector_execution_log_internal as l     INNER JOIN syscollector_collection_sets s ON l.collection_set_id = s.collection_set_id     WHERE s.days_until_expiration > 0     AND @reference_date >= DATEADD(DAY, s.days_until_expiration, l.finish_time)     AND log_id NOT IN (                         SELECT TOP 1 log_id  from syscollector_execution_log_internal                          WHERE parent_log_id IS NULL                          AND collection_set_id = l.collection_set_id                         ORDER BY start_time DESC                         )      DECLARE @purge_log_count int     SELECT @purge_log_count  = COUNT(log_id)      FROM  #purged_log_ids      -- Delete all ssis log records pertaining to expired logs     DELETE FROM dbo.sysssislog         FROM dbo.sysssislog AS s         INNER JOIN #purged_log_ids AS i ON i.package_execution_id = s.executionid              -- Then delete the actual logs     DELETE FROM syscollector_execution_log_internal         FROM syscollector_execution_log_internal AS l         INNER Join #purged_log_ids AS i ON i.log_id = l.log_id       DROP TABLE #purged_log_ids      -- making sure that delete # record does not exceed given delete batch size     DECLARE @orphaned_record_cleanup_count int     SET @orphaned_record_cleanup_count = @delete_batch_size - @purge_log_count      -- Go for another round to cleanup the orphans     -- Ideally, the log heirarchy guarantees that a finish time by a parent log will always     -- be higher than the finish time of any of its descendants.     -- The purge step however does not delete log records with a null finish time     -- A child log can have a null finish time while its parent is closed if there is an     -- error in execution that causes the log to stay open.     -- If such a child log exists, its parent will be purged leaving it as an orphan          -- get orphan records and all their descendants in a cursor and purge them     DECLARE orphaned_log_cursor INSENSITIVE CURSOR FOR             SELECT TOP (@orphaned_record_cleanup_count) log_id              FROM syscollector_execution_log_internal             WHERE parent_log_id NOT IN (                 SELECT log_id FROM syscollector_execution_log_internal             )             FOR READ ONLY                  DECLARE @log_id BIGINT      -- for every orphan, delete all its remaining tree     -- this is supposedly a very small fraction of the entire log     OPEN orphaned_log_cursor         FETCH orphaned_log_cursor INTO @log_id     WHILE @@FETCH_STATUS = 0     BEGIN         EXEC sp_syscollector_delete_execution_log_tree @log_id = @log_id, @from_collection_set = 0         FETCH orphaned_log_cursor INTO @log_id     END          CLOSE orphaned_log_cursor     DEALLOCATE orphaned_log_cursor END ",21090,21082,8,749213,80,105454
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",4633,2804,1829,1256,5,417049
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",3830,2346,1484,1245,0,344733
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",3674,2275,1399,1250,0,330677
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",1439,1532,-93,0,0,2879
"declare      @CPU_Usage_Percentage int,      @Total_SQL_Server_Memory_MB int   -- CPU WITH y AS (     SELECT               CONVERT(VARCHAR(5), 100 - ca.c.value('.', 'INT')) AS system_idle,         CONVERT(VARCHAR(30), rb.event_date) AS event_date,         CONVERT(VARCHAR(8000), rb.record) AS record     FROM (            SELECT              CONVERT(XML, dorb.record) AS record,             DATEADD(ms, ( ts.ms_ticks - dorb.timestamp ), GETDATE()) AS event_date         FROM   sys.dm_os_ring_buffers AS dorb             CROSS JOIN (                  SELECT                      dosi.ms_ticks                  FROM sys.dm_os_sys_info AS dosi ) AS ts                 WHERE   dorb.ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'                         AND record LIKE '%%' ) AS rb             CROSS APPLY rb.record.nodes('/Record/SchedulerMonitorEvent/SystemHealth/SystemIdle') AS ca(c)         )     SELECT @CPU_Usage_Percentage = (select          TOP 1 y.system_idle     FROM y      ORDER BY y.event_date DESC)   -- memory select @Total_SQL_Server_Memory_MB = (select      cntr_value / 1024 from sys.dm_os_performance_counters pc where   [object_name] = 'SQLServer:Memory Manager'         and counter_name = 'Total Server Memory (KB)'                                                                                                         )   select      @CPU_Usage_Percentage           [CPU_Usage_Percentage],      @Total_SQL_Server_Memory_MB     [Total_SQL_Server_Memory_MB]; 	 WITH DB_CPU_Stats AS (SELECT pa.DatabaseID, DB_Name(pa.DatabaseID) AS [Database Name], SUM(qs.total_worker_time/1000) AS [CPU_Time_Ms]  FROM sys.dm_exec_query_stats AS qs WITH (NOLOCK)  CROSS APPLY (SELECT CONVERT(int, value) AS [DatabaseID]               FROM sys.dm_exec_plan_attributes(qs.plan_handle)               WHERE attribute = N'dbid') AS pa  GROUP BY DatabaseID) SELECT ROW_NUMBER() OVER(ORDER BY [CPU_Time_Ms] DESC) AS [CPU Rank],        [Database Name], [CPU_Time_Ms] AS [CPU Time (ms)],        CAST([CPU_Time_Ms] * 1.0 / SUM([CPU_Time_Ms]) OVER() * 100.0 AS DECIMAL(5, 2)) AS [CPU Percent] FROM DB_CPU_Stats WHERE DatabaseID <> 32767 -- ResourceDB ORDER BY [CPU Rank] OPTION (RECOMPILE);   DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",1430,1523,-93,0,0,1430
" DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",1406,1497,-91,0,0,1406
" DECLARE @total_buffer INT;  SELECT @total_buffer = cntr_value FROM sys.dm_os_performance_counters  WHERE RTRIM([object_name]) LIKE '%Buffer Manager' AND counter_name = 'Database Pages';  ;WITH src AS (   SELECT    database_id, db_buffer_pages = COUNT_BIG(*)   FROM sys.dm_os_buffer_descriptors   --WHERE database_id BETWEEN 5 AND 32766   GROUP BY database_id ) SELECT [db_name] = CASE [database_id] WHEN 32767  THEN 'Resource DB'  ELSE DB_NAME([database_id]) END, db_buffer_pages, db_buffer_MB = db_buffer_pages / 128, db_buffer_percent = CONVERT(DECIMAL(6,3),  db_buffer_pages * 100.0 / @total_buffer) FROM src ORDER BY db_buffer_MB DESC;  ",1377,1467,-90,0,0,2754
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_02_110001_9577898.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_02_110001_9577898', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",1359,278,1081,151,0,1359
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",1343,787,556,2759,0,120922
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",1341,795,546,671,0,120723
"       SELECT       db_id() as database_id,       sm.[is_inlineable] AS InlineableScalarCount,​       sm.[inline_type] AS InlineType,​       COUNT_BIG(*) AS ScalarCount, ​       COUNT_BIG(CASE WHEN sm.[definition] LIKE '%getdate%' OR       sm.[definition] LIKE '%getutcdate%' OR ​       sm.[definition] LIKE '%sysdatetime%' OR​       sm.[definition] LIKE '%sysu​tcdatetime%' OR​       sm.[definition] LIKE '%sysdatetimeoffset%' OR​       sm.[definition] LIKE '%CURRENT_TIMESTAMP%'​       THEN 1       END) AS ScalarCountWithDate       FROM    [sys].[objects] o​       INNER JOIN    [sys].[sql_modules] sm       ON o.[object_id] = sm.[object_id]​       WHERE   o.[type] = 'FN'​       GROUP BY ​       sm.[is_inlineable],​       sm.[inline_type]     ",1298,776,522,669,0,116890
"       SELECT db_id() AS database_id, COUNT_BIG(*) AS [TVPStoredProcsCount]       FROM sys.types t WITH(nolock)       JOIN sys.parameters p WITH(nolock) ON t.system_type_id = p.system_type_id AND t.user_type_id=p.user_type_id       JOIN sys.objects o WITH(nolock) ON o.object_id = p.object_id       WHERE is_table_type = 1     ",1264,717,547,1163,0,113784
"       SELECT db_id() AS database_id, COUNT_BIG(*) AS [TVPStoredProcsCount]       FROM sys.types t WITH(nolock)       JOIN sys.parameters p WITH(nolock) ON t.system_type_id = p.system_type_id AND t.user_type_id=p.user_type_id       JOIN sys.objects o WITH(nolock) ON o.object_id = p.object_id       WHERE is_table_type = 1     ",1115,638,477,1175,0,100400
"       SELECT db_id() AS database_id, COUNT_BIG(*) AS [TVPStoredProcsCount]       FROM sys.types t WITH(nolock)       JOIN sys.parameters p WITH(nolock) ON t.system_type_id = p.system_type_id AND t.user_type_id=p.user_type_id       JOIN sys.objects o WITH(nolock) ON o.object_id = p.object_id       WHERE is_table_type = 1     ",1045,608,437,1181,0,94052
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",960,727,233,92353,3,86408
"declare @Path nvarchar(255) declare @Name nvarchar(255)   select @Path = N'G:\Backup_SQL\NEWCA\Transaction'   select @Name = null;           create table #filetmpfin (Name nvarchar(255) NOT NULL, IsFile bit NULL, FullName nvarchar(300) not NULL)         declare @FullName nvarchar(300)         declare @UseLegacyXPs bit = 1          if exists (select 1 from sys.all_objects where name = 'dm_os_enumerate_filesystem' and type = 'IF' and is_ms_shipped = 1)            select @UseLegacyXPs = IIF((LOWER(@Name) = N'nul') AND (exists (select 1 from sys.dm_os_host_info where host_platform = 'Windows')), 1, 0)          if @UseLegacyXPs = 0         begin            if (@Name is null)           begin                insert #filetmpfin select file_or_directory_name, 1 - is_directory, full_filesystem_path from sys.dm_os_enumerate_filesystem(@Path, '*') where [level] = 0           end            if (NOT @Name is null)           begin              if(@Path is null)                select @FullName = @Name             else               select @FullName = @Path 	+ convert(nvarchar(1), serverproperty('PathSeparator')) + @Name              create table #filetmp3 ( Exist bit NOT NULL, IsDir bit NOT NULL, DirExist bit NULL )              insert #filetmp3 select file_exists, file_is_a_directory, parent_directory_exists from sys.dm_os_file_exists(@FullName)              insert #filetmpfin select @Name, 1-IsDir, @FullName from #filetmp3 where Exist = 1 or IsDir = 1              drop table #filetmp3            end         end         else         begin           if(@Name is null)           begin             if (right(@Path, 1) = '\')               select @Path= substring(@Path, 1, len(@Path) - charindex('\', reverse(@Path)))             create table #filetmp (Name nvarchar(255) NOT NULL, depth int NOT NULL, IsFile bit NULL )             insert #filetmp EXECUTE master.dbo.xp_dirtree @Path, 1, 1             insert #filetmpfin select Name, IsFile, @Path + '\' + Name from #filetmp f             drop table #filetmp           end            if(NOT @Name is null)           begin             if(@Path is null)               select @FullName = @Name             else               select @FullName = @Path +  '\' + @Name             if (right(@FullName, 1) = '\')               select @Path= substring(@Path, 1, len(@FullName) - charindex('\', reverse(@FullName)))             create table #filetmp2 ( Exist bit NOT NULL, IsDir bit NOT NULL, DirExist bit NULL )             insert #filetmp2 EXECUTE master.dbo.xp_fileexist @FullName             insert #filetmpfin select @Name, 1-IsDir, @FullName from #filetmp2 where Exist = 1 or IsDir = 1              drop table #filetmp2           end          end           SELECT Name AS [Name], IsFile AS [IsFile], FullName AS [FullName] FROM #filetmpfin ORDER BY [IsFile] ASC,[Name] ASC drop table #filetmpfin ",930,299,631,23127,314,3722
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",894,691,203,117918,2,80464
"       SELECT       db_id() AS database_id,       o.[type] AS object_type,       i.[type] AS index_type,       p.[data_compression],       COUNT_BIG(DISTINCT p.[object_id]) AS NumTables,       COUNT_BIG(DISTINCT CAST(p.[object_id] AS VARCHAR(30)) + '|' + CAST(p.[index_id] AS VARCHAR(10))) AS NumIndexes,       ISNULL(px.[IsPartitioned], 0) AS IsPartitioned,       IIF(px.[IsPartitioned] = 1, COUNT_BIG(1), 0) NumPartitions,       SUM(p.[rows]) NumRows       FROM sys.partitions p       INNER JOIN sys.objects o       ON o.[object_id] = p.[object_id]       INNER JOIN sys.indexes i       ON i.[object_id] = p.[object_id]       AND i.[index_id] = p.[index_id]       OUTER APPLY (SELECT       x.[object_id], 1 AS [IsPartitioned]       FROM sys.partitions x       WHERE x.[object_id] = p.[object_id]       GROUP by       x.[object_id]       HAVING MAX(x.partition_number) > 1) px       WHERE o.[type] NOT IN ('S', 'IT')       GROUP BY       o.[type]       ,i.[type]       ,p.[data_compression]       ,px.[IsPartitioned]     ",888,686,202,117914,1,79927
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_21_120002_7764063.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_21_120002_7764063', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",824,198,626,148,0,824
"()                 begin try                 declare @enable int;                 select top 1 @enable = convert(int,value_in_use) from sys.configurations where name = 'default trace enabled'                 if @enable = 1 --default trace is enabled                 begin                 declare @curr_tracefilename varchar(500);                 declare @base_tracefilename varchar(500);                 declare @indx int ;                 declare @temp_trace table (                 StartTime datetime                 ,       EventSubClass int                 ,       IntegerData int                 );                 declare @path_separator CHAR(1) ;                 set @path_separator = ISNULL(CONVERT(CHAR(1), serverproperty('PathSeparator')), '\') ;                  select @curr_tracefilename = path from sys.traces where is_default = 1 ;                 set @curr_tracefilename = reverse(@curr_tracefilename)                 select @indx  = PATINDEX('%'+@path_separator+'%', @curr_tracefilename)                 set @curr_tracefilename = reverse(@curr_tracefilename)                 set @base_tracefilename = LEFT( @curr_tracefilename, len(@curr_tracefilename) - @indx) + @path_separator + 'log.trc';                  insert into @temp_trace                 select StartTime                 ,       EventSubClass                 ,       IntegerData                 from ::fn_trace_gettable( @base_tracefilename, default )                 where EventClass = 81;                  update @temp_trace set IntegerData = -IntegerData where EventSubClass = 2;                  select   1 as row_no                 ,       StartTime                 ,       EventSubClass                 ,       IntegerData                 ,       case when IntegerData < 0                 then -IntegerData                 else IntegerData                 end ""Absolute""                 from @temp_trace                 where (datediff(dd,StartTime,getdate()) < 7) order by StartTime ;                 end                 else                 begin                 select top 0 1 as row_no, 1 as StartTime , 1 as EventSubClass, 1 as IntegerData, 1 as Absolute                 end                 end try                 begin catch                 select  -100 as row_no                 ,       ERROR_NUMBER()  as StartTime                 ,       ERROR_SEVERITY() as EventSubClass                 ,       ERROR_STATE()  as   IntegerData                 ,       ERROR_MESSAGE() as Absolute                 end catch               ",806,805,1,0,0,1613
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",617,376,241,3894,0,55594
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",527,327,200,3638,0,47505
"       SELECT db_id() AS database_id, o.[type] as ModuleType, COUNT_BIG(*) as ModuleCount       FROM sys.objects AS o WITH(nolock)       WHERE o.type in ('AF', 'F', 'FN', 'FS', 'FT', 'IF', 'P', 'PC', 'TA', 'TF', 'TR', 'X', 'C', 'D', 'PG', 'SN', 'SO', 'SQ', 'TT', 'UQ', 'V')       GROUP BY o.[type]     ",506,311,195,370,0,45628
"       WITH TablesAndViews AS       (SELECT object_id, 'table' AS object_type FROM sys.tables WITH(nolock) UNION ALL SELECT object_id, 'view' AS object_type FROM sys.views WITH(nolock))       SELECT       db_id() as database_id,       i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.is_disabled,       i.has_filter,       i.optimize_for_sequential_key,       COUNT_BIG(1) CountOfIndexes,       t.object_type       FROM sys.indexes i WITH(nolock)       INNER JOIN TablesAndViews t       ON t.object_id = i.object_id       GROUP BY i.type,       i.is_unique,       i.is_primary_key,       i.is_unique_constraint,       i.has_filter,       i.optimize_for_sequential_key,       t.object_type,       i.is_disabled     ",500,314,186,3642,0,45005
"       SELECT db_id() AS database_id, o.[type] as ModuleType, COUNT_BIG(*) as ModuleCount       FROM sys.objects AS o WITH(nolock)       WHERE o.type in ('AF', 'F', 'FN', 'FS', 'FT', 'IF', 'P', 'PC', 'TA', 'TF', 'TR', 'X', 'C', 'D', 'PG', 'SN', 'SO', 'SQ', 'TT', 'UQ', 'V')       GROUP BY o.[type]     ",458,282,176,340,0,41292
"       SELECT db_id() AS database_id, o.[type] as ModuleType, COUNT_BIG(*) as ModuleCount       FROM sys.objects AS o WITH(nolock)       WHERE o.type in ('AF', 'F', 'FN', 'FS', 'FT', 'IF', 'P', 'PC', 'TA', 'TF', 'TR', 'X', 'C', 'D', 'PG', 'SN', 'SO', 'SQ', 'TT', 'UQ', 'V')       GROUP BY o.[type]     ",447,278,169,340,0,40269
"       SELECT       db_id() AS database_id,       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.is_filestream,       c.encryption_type,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END AS is_user,       COUNT_BIG(*) AS [ColCount],       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END AS collation_name,       AVG(c.max_length) AS avg_max_length       FROM sys.columns c WITH (NOLOCK)       LEFT OUTER JOIN sys.objects o WITH (NOLOCK)       ON o.object_id = c.object_id       AND o.type = 'U'       GROUP BY       c.system_type_id,       c.user_type_id,       c.is_sparse,       c.is_column_set,       c.encryption_type,       c.is_filestream,       CASE WHEN o.object_id IS NOT NULL THEN 1 ELSE 0 END,       CASE WHEN c.collation_name IS NULL THEN CONVERT(VARCHAR(128), SERVERPROPERTY('Collation')) ELSE c.collation_name END     ",358,214,144,209,0,32240
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_02_110001_9747629.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_02_110001_9747629', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",342,66,276,151,0,342
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",331,202,129,8189,0,29857
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [UpdatableLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 2 AND is_dropped_ledger_table = 0     ",304,197,107,12909,0,27435
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",299,183,116,6294,0,26988
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [AppendOnlyLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 3 AND is_dropped_ledger_table = 0     ",292,191,101,12909,0,26309
"       SELECT DB_ID() AS database_id,       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       COUNT_BIG(*) AS NumTables,       is_node,       is_edge       FROM sys.tables WITH(nolock)       GROUP BY       is_remote_data_archive_enabled,       temporal_type,       is_memory_optimized,       lock_escalation,       type,       is_node,       is_edge     ",291,179,112,6295,0,26207
"       SELECT         db_id() AS [database_id],         CASE           WHEN EXISTS (             SELECT *             FROM sys.tables             WHERE ledger_type in (2,3) AND is_dropped_ledger_table = 0)           THEN 1           ELSE 0           END AS [IsLedger]     ",278,170,108,187,0,25058
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [UpdatableLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 2 AND is_dropped_ledger_table = 0     ",274,179,95,12177,0,24673
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_03_19_230001_4731410.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_03_19_230001_4731410', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",273,73,200,151,0,273
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [AppendOnlyLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 3 AND is_dropped_ledger_table = 0     ",264,175,89,12177,0,23817
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [AppendOnlyLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 3 AND is_dropped_ledger_table = 0     ",259,172,87,12195,0,23393
"       SELECT         db_id() AS [database_id],         CASE           WHEN EXISTS (             SELECT *             FROM sys.tables             WHERE ledger_type in (2,3) AND is_dropped_ledger_table = 0)           THEN 1           ELSE 0           END AS [IsLedger]     ",257,158,99,179,0,23173
"       SELECT         db_id() AS [database_id],         CASE           WHEN EXISTS (             SELECT *             FROM sys.tables             WHERE ledger_type in (2,3) AND is_dropped_ledger_table = 0)           THEN 1           ELSE 0           END AS [IsLedger]     ",257,158,99,180,0,23164
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_03_28_100001_5904632.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_03_28_100001_5904632', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",257,80,177,151,0,257
"       SELECT         db_id() AS [database_id],         COUNT(*) AS [UpdatableLedgerTableCount]       FROM         sys.tables       WHERE         ledger_type = 2 AND is_dropped_ledger_table = 0     ",253,169,84,12195,0,22818
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_03_30_170001_5386436.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_03_30_170001_5386436', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",252,112,140,151,0,252
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0  SELECT sqlserver_start_time, (committed_kb/1024) AS Total_Server_Memory_MB, (committed_target_kb/1024)  AS Target_Server_Memory_MB FROM sys.dm_os_sys_info; ",245,92,153,33086,1267,490
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_17_230002_3148681.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_17_230002_3148681', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",223,78,145,148,0,223
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_03_20_230002_1782580.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_03_20_230002_1782580', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",221,70,151,151,0,221
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_20_230002_0714284.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_20_230002_0714284', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",198,100,98,236,0,198
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_09_230001_0897709.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_09_230001_0897709', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",180,104,76,236,0,180
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0   ",179,46,133,13574,694,358
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_06_170001_2082913.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_06_170001_2082913', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",174,58,116,151,0,174
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_03_28_150001_3956174.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_03_28_150001_3956174', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",166,67,99,148,0,166
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_04_13_230002_3040371.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_04_13_230002_3040371', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",165,77,88,151,0,165
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_05_230001_9083325.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_05_230001_9083325', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",159,79,80,151,0,159
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_14_230001_9466938.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_14_230001_9466938', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",156,90,66,236,0,156
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_06_180001_7049338.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_06_180001_7049338', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",153,69,84,148,0,153
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_16_230001_2314968.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_16_230001_2314968', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",149,54,95,151,0,149
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_28_100001_5774846.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_28_100001_5774846', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",147,100,47,236,0,147
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_02_230001_3032705.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_02_230001_3032705', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",146,63,83,151,0,146
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_01_230002_0260210.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_01_230002_0260210', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",137,63,74,151,0,137
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_13_230002_3459692.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_13_230002_3459692', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",134,56,78,151,0,134
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_13_230002_2401384.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_13_230002_2401384', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",130,67,63,151,0,130
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_02_110002_0067117.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_02_110002_0067117', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",128,64,64,148,0,128
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_03_31_140001_3868631.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_03_31_140001_3868631', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",125,77,48,151,0,125
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_15_230001_7152474.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_15_230001_7152474', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",125,68,57,151,0,125
"()begin try select top 10 rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ) as row_no ,       (rank() over(order by (total_worker_time+0.0)/execution_count desc,sql_handle,statement_start_offset ))%2 as l1 ,       creation_time ,       last_execution_time  ,       (total_worker_time+0.0)/1000 as total_worker_time ,       (total_worker_time+0.0)/(execution_count*1000) as [AvgCPUTime] ,       total_logical_reads as [LogicalReads] ,       total_logical_writes as [LogicalWrites] ,       execution_count ,       total_logical_reads+total_logical_writes as [AggIO] ,       (total_logical_reads+total_logical_writes)/(execution_count+0.0) as [AvgIO] ,       case when sql_handle IS NULL                 then ' '                 else ( substring(st.text,(qs.statement_start_offset+2)/2,       (case when qs.statement_end_offset = -1         then len(convert(nvarchar(MAX),st.text))*2      else qs.statement_end_offset    end - qs.statement_start_offset) /2  ) )         end as query_text  ,       db_name(st.dbid) as db_name ,       st.objectid as object_id from sys.dm_exec_query_stats  qs cross apply sys.dm_exec_sql_text(sql_handle) st where total_worker_time  > 0  order by [AvgCPUTime] desc end try begin catch select -100 as row_no ,       1 as l1, 1 as create_time,1 as last_execution_time,1 as total_worker_time,1 as AvgCPUTime,1 as LogicalReads,1 as LogicalWrites ,       ERROR_NUMBER() as execution_count ,       ERROR_SEVERITY() as AggIO ,       ERROR_STATE() as AvgIO ,       ERROR_MESSAGE() as query_text ,       0 as db_name ,       0 as object_name end catch",124,124,0,70009,2202,249
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_03_230002_0168593.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_03_230002_0168593', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",119,69,50,236,0,119
"(@_msparam_0 nvarchar(4000))       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states                SELECT             arrc.replica_server_name,              COUNT(cm.member_name) AS node_count,             SUM(cm.member_state) AS member_state_sum,             SUM(cm.number_of_quorum_votes) AS quorum_vote_sum         INTO #tmpar_availability_replica_cluster_info         FROM              (SELECT DISTINCT replica_server_name, node_name FROM master.sys.dm_hadr_availability_replica_cluster_nodes) AS arrc          LEFT OUTER JOIN master.sys.dm_hadr_cluster_members AS cm ON UPPER(arrc.node_name) = UPPER(cm.member_name)          GROUP BY arrc.replica_server_name              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags        SELECT AR.replica_server_name AS [Name], ISNULL(AR.availability_mode, 2) AS [AvailabilityMode], ISNULL(AR.backup_priority, -1) AS [BackupPriority], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], ISNULL(AR.create_date, 0) AS [CreateDate], ISNULL(AR.modify_date, 0) AS [DateLastModified], ISNULL(AR.endpoint_url, N'') AS [EndpointUrl], ISNULL(AR.failover_mode, 3) AS [FailoverMode], ISNULL(arcs.join_state, 99) AS [JoinState], ISNULL(arstates.last_connect_error_description, N'') AS [LastConnectErrorDescription], ISNULL(arstates.last_connect_error_number,-1) AS [LastConnectErrorNumber], ISNULL(arstates.last_connect_error_timestamp, 0) AS [LastConnectErrorTimestamp],  CASE      WHEN arci.member_state_sum IS NULL OR arci.node_count = 0 THEN 3     WHEN arci.member_state_sum = 0 THEN 0      WHEN arci.member_state_sum < arci.node_count THEN 2     WHEN arci.member_state_sum = arci.node_count THEN 1     ELSE 3 END        AS [MemberState], ISNULL(arstates.operational_state, 6) AS [OperationalState], suser_sname(AR.owner_sid) AS [Owner], ISNULL(arci.quorum_vote_sum, -1) AS [QuorumVoteCount], ISNULL(AR.read_only_routing_url, '') AS [ReadonlyRoutingConnectionUrl], ISNULL(arstates.role, 3) AS [Role], ISNULL(arstates.recovery_health, 2) AS [RollupRecoveryState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(AR.session_timeout, -1) AS [SessionTimeout], AR.replica_id AS [UniqueId], ISNULL(AR.seeding_mode, 1) AS [SeedingMode] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_info AS arci ON UPPER(AR.replica_server_name) = UPPER(arci.replica_server_name)  LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id WHERE (AG.name=@_msparam_0) ORDER BY [Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_availability_replica_cluster_states              DROP TABLE #tmpar_availability_replica_cluster_info              DROP TABLE #tmpar_replica_rollupstate              drop table #tmpag_availability_groups       ",115,88,27,183,0,115
"       select * into #tmpag_availability_groups from master.sys.availability_groups                 select group_id, replica_id, replica_server_name,create_date, modify_date, endpoint_url, read_only_routing_url, primary_role_allow_connections, secondary_role_allow_connections, availability_mode,failover_mode, session_timeout, backup_priority, owner_sid, seeding_mode into #tmpar_availability_replicas from master.sys.availability_replicas                select group_id, replica_id, role,operational_state,recovery_health,synchronization_health,connected_state, last_connect_error_number,last_connect_error_description, last_connect_error_timestamp into #tmpar_availability_replica_states from master.sys.dm_hadr_availability_replica_states              select replica_id,join_state into #tmpar_availability_replica_cluster_states from master.sys.dm_hadr_availability_replica_cluster_states                SELECT             arrc.replica_server_name,              COUNT(cm.member_name) AS node_count,             SUM(cm.member_state) AS member_state_sum,             SUM(cm.number_of_quorum_votes) AS quorum_vote_sum         INTO #tmpar_availability_replica_cluster_info         FROM              (SELECT DISTINCT replica_server_name, node_name FROM master.sys.dm_hadr_availability_replica_cluster_nodes) AS arrc          LEFT OUTER JOIN master.sys.dm_hadr_cluster_members AS cm ON UPPER(arrc.node_name) = UPPER(cm.member_name)          GROUP BY arrc.replica_server_name              select * into #tmpar_ags from master.sys.dm_hadr_availability_group_states       select ar.group_id, ar.replica_id, ar.replica_server_name, ar.availability_mode, (case when UPPER(ags.primary_replica) = UPPER(ar.replica_server_name) then 1 else 0 end) as role, ars.synchronization_health into #tmpar_availabilty_mode from #tmpar_availability_replicas as ar       left join #tmpar_ags as ags on ags.group_id = ar.group_id       left join #tmpar_availability_replica_states as ars on ar.group_id = ars.group_id and ar.replica_id = ars.replica_id       select am1.replica_id, am1.role, (case when (am1.synchronization_health is null) then 3 else am1.synchronization_health end) as sync_state, (case when (am1.availability_mode is NULL) or (am3.availability_mode is NULL) then null when (am1.role = 1) then 1 when (am1.availability_mode = 0 or am3.availability_mode = 0) then 0 else 1 end) as effective_availability_mode       into #tmpar_replica_rollupstate from #tmpar_availabilty_mode as am1 left join (select group_id, role, availability_mode from #tmpar_availabilty_mode as am2 where am2.role = 1) as am3 on am1.group_id = am3.group_id       drop table #tmpar_availabilty_mode       drop table #tmpar_ags        SELECT CAST(         serverproperty(N'Servername')        AS sysname) AS [Server_Name], AG.name AS [AvailabilityGroup_Name], AR.replica_server_name AS [Name], ISNULL(AR.availability_mode, 2) AS [AvailabilityMode], ISNULL(AR.backup_priority, -1) AS [BackupPriority], ISNULL(AR.primary_role_allow_connections, 4) AS [ConnectionModeInPrimaryRole], ISNULL(AR.secondary_role_allow_connections, 3) AS [ConnectionModeInSecondaryRole], ISNULL(arstates.connected_state, 2) AS [ConnectionState], ISNULL(AR.create_date, 0) AS [CreateDate], ISNULL(AR.modify_date, 0) AS [DateLastModified], ISNULL(AR.endpoint_url, N'') AS [EndpointUrl], ISNULL(AR.failover_mode, 3) AS [FailoverMode], ISNULL(arcs.join_state, 99) AS [JoinState], ISNULL(arstates.last_connect_error_description, N'') AS [LastConnectErrorDescription], ISNULL(arstates.last_connect_error_number,-1) AS [LastConnectErrorNumber], ISNULL(arstates.last_connect_error_timestamp, 0) AS [LastConnectErrorTimestamp],  CASE      WHEN arci.member_state_sum IS NULL OR arci.node_count = 0 THEN 3     WHEN arci.member_state_sum = 0 THEN 0      WHEN arci.member_state_sum < arci.node_count THEN 2     WHEN arci.member_state_sum = arci.node_count THEN 1     ELSE 3 END        AS [MemberState], ISNULL(arstates.operational_state, 6) AS [OperationalState], suser_sname(AR.owner_sid) AS [Owner], ISNULL(arci.quorum_vote_sum, -1) AS [QuorumVoteCount], ISNULL(AR.read_only_routing_url, '') AS [ReadonlyRoutingConnectionUrl], ISNULL(arstates.role, 3) AS [Role], ISNULL(arstates.recovery_health, 2) AS [RollupRecoveryState], (case when arrollupstates.sync_state = 3 then 3 when (arrollupstates.effective_availability_mode = 1 or arrollupstates.role = 1) then arrollupstates.sync_state when arrollupstates.sync_state = 2 then 1 else 0 end) AS [RollupSynchronizationState], ISNULL(AR.session_timeout, -1) AS [SessionTimeout], AR.replica_id AS [UniqueId], ISNULL(AR.seeding_mode, 1) AS [SeedingMode] FROM #tmpag_availability_groups AS AG INNER JOIN #tmpar_availability_replicas AS AR ON (AR.replica_server_name IS NOT NULL) AND (AR.group_id=AG.group_id) LEFT OUTER JOIN #tmpar_availability_replica_states AS arstates ON AR.replica_id = arstates.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_states AS arcs ON AR.replica_id = arcs.replica_id LEFT OUTER JOIN #tmpar_availability_replica_cluster_info AS arci ON UPPER(AR.replica_server_name) = UPPER(arci.replica_server_name)  LEFT OUTER JOIN #tmpar_replica_rollupstate AS arrollupstates ON AR.replica_id = arrollupstates.replica_id ORDER BY [AvailabilityGroup_Name] ASC,[Name] ASC        DROP TABLE #tmpar_availability_replicas              DROP TABLE #tmpar_availability_replica_states              DROP TABLE #tmpar_availability_replica_cluster_states              DROP TABLE #tmpar_availability_replica_cluster_info              DROP TABLE #tmpar_replica_rollupstate              drop table #tmpag_availability_groups       ",114,87,27,183,1,114
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_19_230002_1584142.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_19_230002_1584142', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",113,58,55,151,0,113
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_15_230001_6653268.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_15_230001_6653268', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",112,56,56,151,0,112
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_05_100001_7211742.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_05_100001_7211742', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",108,50,58,151,0,108
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_18_230002_1363093.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_18_230002_1363093', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",105,65,40,151,0,105
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_24_230001_9767584.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_24_230001_9767584', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",104,78,26,236,0,104
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_07_180001_8074156.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_07_180001_8074156', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",104,57,47,148,0,104
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_07_180001_7764656.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_07_180001_7764656', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",103,61,42,148,0,103
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_10_120001_0817672.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_10_120001_0817672', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",102,79,23,148,0,102
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_31_230001_6647011.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_31_230001_6647011', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",100,68,32,236,0,100
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_03_29_230001_9001493.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_03_29_230001_9001493', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",97,65,32,151,0,97
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_21_070000_9163757.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_21_070000_9163757', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",96,64,32,236,0,96
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_26_230001_9785360.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_26_230001_9785360', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",96,54,42,151,0,96
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_20_130000_7638455.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_20_130000_7638455', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",95,59,36,148,0,95
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_04_22_120001_1527502.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_04_22_120001_1527502', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",95,57,38,151,0,95
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_13_160001_6459966.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_13_160001_6459966', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",94,42,52,151,0,94
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_04_10_170000_8598621.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_04_10_170000_8598621', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",94,68,26,151,0,94
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_20_160001_2009759.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_20_160001_2009759', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",94,72,22,236,0,94
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_04_09_230001_1317031.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_04_09_230001_1317031', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",92,52,40,151,0,92
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_05_110001_2897895.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_05_110001_2897895', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",91,65,26,151,0,91
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_03_23_230001_5322647.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_03_23_230001_5322647', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",90,75,15,151,0,90
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_03_25_230002_2885307.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_03_25_230002_2885307', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",89,49,40,151,0,89
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_04_230002_6519391.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_04_230002_6519391', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",89,49,40,151,0,89
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP DATABASE [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Full\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_13_230002_3000440.bak' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_13_230002_3000440', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",87,49,38,151,0,87
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_02_090001_5332160.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_02_090001_5332160', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",86,62,24,187,0,86
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_02_030000_8807158.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_02_030000_8807158', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",86,57,29,148,0,86
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_03_22_230001_2551092.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_03_22_230001_2551092', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",85,82,3,272,0,85
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('MDW_NEWCA'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [MDW_NEWCA] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\MDW_NEWCA\MDW_NEWCA_backup_2024_04_16_210000_8821920.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'MDW_NEWCA_backup_2024_04_16_210000_8821920', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",85,76,9,151,0,85
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_DEV'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_DEV] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_DEV\CAPOS_BR_DEV_backup_2024_04_11_230001_2728190.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_DEV_backup_2024_04_11_230001_2728190', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",84,57,27,151,0,84
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_BR_PRELOAD'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_BR_PRELOAD] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_BR_PRELOAD\CAPOS_BR_PRELOAD_backup_2024_04_21_020001_0629999.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_BR_PRELOAD_backup_2024_04_21_020001_0629999', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",84,67,17,236,0,84
"DECLARE @preferredReplica int  SET @preferredReplica = (SELECT [master].sys.fn_hadr_backup_is_preferred_replica('CAPOS_PL_LIVE'))  IF (@preferredReplica = 1) BEGIN     BACKUP LOG [CAPOS_PL_LIVE] TO  DISK = N'G:\Backup_SQL\NEWCA\Transaction\CAPOS_PL_LIVE\CAPOS_PL_LIVE_backup_2024_04_01_140001_5294726.trn' WITH  RETAINDAYS = 7, NOFORMAT, NOINIT,  NAME = N'CAPOS_PL_LIVE_backup_2024_04_01_140001_5294726', SKIP, REWIND, NOUNLOAD, COMPRESSION,  STATS = 10 END ",83,44,39,151,0,83
"SELECT     DB_NAME (database_id) as [Database Name],     name as [Database File Name],     [Type] = CASE WHEN Type_Desc = 'ROWS' THEN 'Data File(s)'             WHEN Type_Desc = 'LOG'  THEN 'Log File(s)'             ELSE Type_Desc END,     size*8/1024 as 'Size (MB)',     physical_name as [Database_File_Location] FROM sys.master_files ORDER BY 1,3  IF OBJECT_ID('tempdb.dbo.#space') IS NOT NULL     DROP TABLE #space  CREATE TABLE #space (       database_id INT PRIMARY KEY     , data_used_size DECIMAL(18,2)     , log_used_size DECIMAL(18,2) )  DECLARE @SQL NVARCHAR(MAX)  SELECT @SQL = STUFF((     SELECT '     USE [' + d.name + ']     INSERT INTO #space (database_id, data_used_size, log_used_size)     SELECT           DB_ID()         , SUM(CASE WHEN [type] = 0 THEN space_used END)         , SUM(CASE WHEN [type] = 1 THEN space_used END)     FROM (         SELECT s.[type], space_used = SUM(FILEPROPERTY(s.name, ''SpaceUsed'') * 8. / 1024)         FROM sys.database_files s         GROUP BY s.[type]     ) t;'     FROM sys.databases d     WHERE d.[state] = 0     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 2, '')  EXEC sys.sp_executesql @SQL  SELECT       d.database_id     , d.name     , d.state_desc     , d.recovery_model_desc     , t.total_size     , t.data_size     , s.data_used_size     , t.log_size     , s.log_used_size     , bu.full_last_date     , bu.full_size     , bu.log_last_date     , bu.log_size FROM (     SELECT           database_id         , log_size = CAST(SUM(CASE WHEN [type] = 1 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , data_size = CAST(SUM(CASE WHEN [type] = 0 THEN size END) * 8. / 1024 AS DECIMAL(18,2))         , total_size = CAST(SUM(size) * 8. / 1024 AS DECIMAL(18,2))     FROM sys.master_files     GROUP BY database_id ) t JOIN sys.databases d ON d.database_id = t.database_id LEFT JOIN #space s ON d.database_id = s.database_id LEFT JOIN (     SELECT           database_name         , full_last_date = MAX(CASE WHEN [type] = 'D' THEN backup_finish_date END)         , full_size = MAX(CASE WHEN [type] = 'D' THEN backup_size END)         , log_last_date = MAX(CASE WHEN [type] = 'L' THEN backup_finish_date END)         , log_size = MAX(CASE WHEN [type] = 'L' THEN backup_size END)     FROM (         SELECT               s.database_name             , s.[type]             , s.backup_finish_date             , backup_size =                         CAST(CASE WHEN s.backup_size = s.compressed_backup_size                                     THEN s.backup_size                                     ELSE s.compressed_backup_size                         END / 1048576.0 AS DECIMAL(18,2))             , RowNum = ROW_NUMBER() OVER (PARTITION BY s.database_name, s.[type] ORDER BY s.backup_finish_date DESC)         FROM msdb.dbo.backupset s         WHERE s.[type] IN ('D', 'L')     ) f     WHERE f.RowNum = 1     GROUP BY f.database_name ) bu ON d.name = bu.database_name ORDER BY t.total_size DESC  SELECT      req.session_id     , req.total_elapsed_time AS duration_ms     , req.cpu_time AS cpu_time_ms     , req.total_elapsed_time - req.cpu_time AS wait_time     , req.logical_reads     , SUBSTRING (REPLACE (REPLACE (SUBSTRING (ST.text, (req.statement_start_offset/2) + 1,         ((CASE statement_end_offset            WHEN -1            THEN DATALENGTH(ST.text)              ELSE req.statement_end_offset          END - req.statement_start_offset)/2) + 1) , CHAR(10), ' '), CHAR(13), ' '),        1, 512)  AS statement_text   FROM sys.dm_exec_requests AS req     CROSS APPLY sys.dm_exec_sql_text(req.sql_handle) AS ST ORDER BY total_elapsed_time DESC;  SELECT top 100 t.text,      (qs.total_elapsed_time/1000) / qs.execution_count AS avg_elapsed_time,      (qs.total_worker_time/1000) / qs.execution_count AS avg_cpu_time,      ((qs.total_elapsed_time/1000) / qs.execution_count ) - ((qs.total_worker_time/1000) / qs.execution_count) AS avg_wait_time,      qs.total_logical_reads / qs.execution_count AS avg_logical_reads,      qs.total_logical_writes / qs.execution_count AS avg_writes,      (qs.total_elapsed_time/1000) AS cumulative_elapsed_time_all_executions FROM sys.dm_exec_query_stats qs      CROSS apply sys.Dm_exec_sql_text (sql_handle) t -- WHERE t.text like '<Your Query>%' -- Replace <Your Query> with your query or the beginning part of your query. The special chars like '[','_','%','^' in the query should be escaped. ORDER BY (qs.total_elapsed_time / qs.execution_count) DESC  --Deadlock sql check SELECT     session_id,     start_time,      [status],     command,     blocking_session_id,     wait_type,     wait_time,     open_transaction_count,     transaction_id,     total_elapsed_time,     Definition = CAST(text AS VARCHAR(MAX)) FROM     SYS.DM_EXEC_REQUESTS     CROSS APPLY sys.dm_exec_sql_text(sql_handle)  WHERE blocking_session_id != 0   ",83,83,0,3925,0,83
